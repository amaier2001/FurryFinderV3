
FurryFinder_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039f4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000380  08003b00  08003b00  00004b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e80  08003e80  0000508c  2**0
                  CONTENTS
  4 .ARM          00000008  08003e80  08003e80  00004e80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003e88  08003e88  0000508c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e88  08003e88  00004e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003e8c  08003e8c  00004e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  08003e90  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000374  2000008c  08003f1c  0000508c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000400  08003f1c  00005400  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000816e  00000000  00000000  000050b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a2f  00000000  00000000  0000d223  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000720  00000000  00000000  0000ec58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000565  00000000  00000000  0000f378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017449  00000000  00000000  0000f8dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009b44  00000000  00000000  00026d26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000821f6  00000000  00000000  0003086a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b2a60  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023c0  00000000  00000000  000b2aa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000b4e64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000008c 	.word	0x2000008c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003ae8 	.word	0x08003ae8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000090 	.word	0x20000090
 8000148:	08003ae8 	.word	0x08003ae8

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <SIM7070G_COMMAND>:
{
	"AT+CBC\r\n"
};

void SIM7070G_COMMAND(char **pack, uint8_t len)
{
 800015c:	b590      	push	{r4, r7, lr}
 800015e:	b085      	sub	sp, #20
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
 8000164:	460b      	mov	r3, r1
 8000166:	70fb      	strb	r3, [r7, #3]
	int retry = 0;
 8000168:	2300      	movs	r3, #0
 800016a:	60fb      	str	r3, [r7, #12]

	for(int i = 0; i < len; i++)
 800016c:	2300      	movs	r3, #0
 800016e:	60bb      	str	r3, [r7, #8]
 8000170:	e037      	b.n	80001e2 <SIM7070G_COMMAND+0x86>
		{
			memset(sentence,0,strlen(sentence));
 8000172:	4820      	ldr	r0, [pc, #128]	@ (80001f4 <SIM7070G_COMMAND+0x98>)
 8000174:	f7ff ffea 	bl	800014c <strlen>
 8000178:	4603      	mov	r3, r0
 800017a:	461a      	mov	r2, r3
 800017c:	2100      	movs	r1, #0
 800017e:	481d      	ldr	r0, [pc, #116]	@ (80001f4 <SIM7070G_COMMAND+0x98>)
 8000180:	f002 fb80 	bl	8002884 <memset>
			//HAL_UART_Transmit(&huart2, "\nTRANSMIT\n\r", strlen("TRANSMIT\n\n\r"), 500);
			HAL_UART_Transmit(&huart1, pack[i], strlen((char*)pack[i]), 500);
 8000184:	68bb      	ldr	r3, [r7, #8]
 8000186:	009b      	lsls	r3, r3, #2
 8000188:	687a      	ldr	r2, [r7, #4]
 800018a:	4413      	add	r3, r2
 800018c:	681c      	ldr	r4, [r3, #0]
 800018e:	68bb      	ldr	r3, [r7, #8]
 8000190:	009b      	lsls	r3, r3, #2
 8000192:	687a      	ldr	r2, [r7, #4]
 8000194:	4413      	add	r3, r2
 8000196:	681b      	ldr	r3, [r3, #0]
 8000198:	4618      	mov	r0, r3
 800019a:	f7ff ffd7 	bl	800014c <strlen>
 800019e:	4603      	mov	r3, r0
 80001a0:	b29a      	uxth	r2, r3
 80001a2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80001a6:	4621      	mov	r1, r4
 80001a8:	4813      	ldr	r0, [pc, #76]	@ (80001f8 <SIM7070G_COMMAND+0x9c>)
 80001aa:	f001 fccb 	bl	8001b44 <HAL_UART_Transmit>
			//HAL_UART_Transmit(&huart2, pack[i], strlen((char*)pack[i]), 500);

			//HAL_UART_Transmit(&huart2, "\nRECEIVE\n\r", strlen("RECEIVE\n\n\r"), 500);
			HAL_UART_Receive(&huart1, (char*)sentence, GPS_MAX + 1, 2500);
 80001ae:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80001b2:	227b      	movs	r2, #123	@ 0x7b
 80001b4:	490f      	ldr	r1, [pc, #60]	@ (80001f4 <SIM7070G_COMMAND+0x98>)
 80001b6:	4810      	ldr	r0, [pc, #64]	@ (80001f8 <SIM7070G_COMMAND+0x9c>)
 80001b8:	f001 fd47 	bl	8001c4a <HAL_UART_Receive>
			//HAL_UART_Transmit(&huart2, (char*)sentence, strlen((char*)sentence), 500);

			if(retry < 3 && strstr(sentence, "ERROR") != NULL)
 80001bc:	68fb      	ldr	r3, [r7, #12]
 80001be:	2b02      	cmp	r3, #2
 80001c0:	dc0c      	bgt.n	80001dc <SIM7070G_COMMAND+0x80>
 80001c2:	490e      	ldr	r1, [pc, #56]	@ (80001fc <SIM7070G_COMMAND+0xa0>)
 80001c4:	480b      	ldr	r0, [pc, #44]	@ (80001f4 <SIM7070G_COMMAND+0x98>)
 80001c6:	f002 fb7d 	bl	80028c4 <strstr>
 80001ca:	4603      	mov	r3, r0
 80001cc:	2b00      	cmp	r3, #0
 80001ce:	d005      	beq.n	80001dc <SIM7070G_COMMAND+0x80>
			{
				i--;
 80001d0:	68bb      	ldr	r3, [r7, #8]
 80001d2:	3b01      	subs	r3, #1
 80001d4:	60bb      	str	r3, [r7, #8]
				retry++;
 80001d6:	68fb      	ldr	r3, [r7, #12]
 80001d8:	3301      	adds	r3, #1
 80001da:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < len; i++)
 80001dc:	68bb      	ldr	r3, [r7, #8]
 80001de:	3301      	adds	r3, #1
 80001e0:	60bb      	str	r3, [r7, #8]
 80001e2:	78fb      	ldrb	r3, [r7, #3]
 80001e4:	68ba      	ldr	r2, [r7, #8]
 80001e6:	429a      	cmp	r2, r3
 80001e8:	dbc3      	blt.n	8000172 <SIM7070G_COMMAND+0x16>
			}
		}
}
 80001ea:	bf00      	nop
 80001ec:	bf00      	nop
 80001ee:	3714      	adds	r7, #20
 80001f0:	46bd      	mov	sp, r7
 80001f2:	bd90      	pop	{r4, r7, pc}
 80001f4:	20000130 	.word	0x20000130
 80001f8:	200000a8 	.word	0x200000a8
 80001fc:	08003c38 	.word	0x08003c38

08000200 <SIM7070G_COMMAND_SINGLE>:

void SIM7070G_COMMAND_SINGLE(char *pack) //horrible hack
{
 8000200:	b580      	push	{r7, lr}
 8000202:	b082      	sub	sp, #8
 8000204:	af00      	add	r7, sp, #0
 8000206:	6078      	str	r0, [r7, #4]
	memset(sentence,0,strlen(sentence));
 8000208:	480f      	ldr	r0, [pc, #60]	@ (8000248 <SIM7070G_COMMAND_SINGLE+0x48>)
 800020a:	f7ff ff9f 	bl	800014c <strlen>
 800020e:	4603      	mov	r3, r0
 8000210:	461a      	mov	r2, r3
 8000212:	2100      	movs	r1, #0
 8000214:	480c      	ldr	r0, [pc, #48]	@ (8000248 <SIM7070G_COMMAND_SINGLE+0x48>)
 8000216:	f002 fb35 	bl	8002884 <memset>
	//HAL_UART_Transmit(&huart2, "\nTRANSMIT\n\r", strlen("TRANSMIT\n\n\r"), 500);
	HAL_UART_Transmit(&huart1, pack, strlen((char*)pack), 500);
 800021a:	6878      	ldr	r0, [r7, #4]
 800021c:	f7ff ff96 	bl	800014c <strlen>
 8000220:	4603      	mov	r3, r0
 8000222:	b29a      	uxth	r2, r3
 8000224:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000228:	6879      	ldr	r1, [r7, #4]
 800022a:	4808      	ldr	r0, [pc, #32]	@ (800024c <SIM7070G_COMMAND_SINGLE+0x4c>)
 800022c:	f001 fc8a 	bl	8001b44 <HAL_UART_Transmit>
	//HAL_UART_Transmit(&huart2, pack[i], strlen((char*)pack[i]), 500);
	//HAL_UART_Transmit(&huart2, "\nRECEIVE\n\r", strlen("RECEIVE\n\n\r"), 500);
	HAL_UART_Receive(&huart1, (char*)sentence, GPS_MAX + 1, 2500);
 8000230:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8000234:	227b      	movs	r2, #123	@ 0x7b
 8000236:	4904      	ldr	r1, [pc, #16]	@ (8000248 <SIM7070G_COMMAND_SINGLE+0x48>)
 8000238:	4804      	ldr	r0, [pc, #16]	@ (800024c <SIM7070G_COMMAND_SINGLE+0x4c>)
 800023a:	f001 fd06 	bl	8001c4a <HAL_UART_Receive>
	//HAL_UART_Transmit(&huart2, (char*)sentence, strlen((char*)sentence), 500);
}
 800023e:	bf00      	nop
 8000240:	3708      	adds	r7, #8
 8000242:	46bd      	mov	sp, r7
 8000244:	bd80      	pop	{r7, pc}
 8000246:	bf00      	nop
 8000248:	20000130 	.word	0x20000130
 800024c:	200000a8 	.word	0x200000a8

08000250 <SIM7070G_INIT>:

void SIM7070G_INIT() //This takes fucking forever to execute, but is absolutely necessary
{
 8000250:	b580      	push	{r7, lr}
 8000252:	af00      	add	r7, sp, #0
	  //INIT SIM7070G
	  //Set B9 (PWRKEY) to HIGH ASAP, nothing matters before this point
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8000254:	2201      	movs	r2, #1
 8000256:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800025a:	4817      	ldr	r0, [pc, #92]	@ (80002b8 <SIM7070G_INIT+0x68>)
 800025c:	f000 ffe0 	bl	8001220 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 8000260:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000264:	f000 fc74 	bl	8000b50 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
 8000268:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800026c:	4812      	ldr	r0, [pc, #72]	@ (80002b8 <SIM7070G_INIT+0x68>)
 800026e:	f000 ffef 	bl	8001250 <HAL_GPIO_TogglePin>
	  HAL_Delay(20000); //Nuclear option: we pull it down for 20 seconds to ensure it resets every time
 8000272:	f644 6020 	movw	r0, #20000	@ 0x4e20
 8000276:	f000 fc6b 	bl	8000b50 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
 800027a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800027e:	480e      	ldr	r0, [pc, #56]	@ (80002b8 <SIM7070G_INIT+0x68>)
 8000280:	f000 ffe6 	bl	8001250 <HAL_GPIO_TogglePin>
	  HAL_UART_Receive(&huart1, (char*)sentence, GPS_MAX + 1, 2500); //We basically wait until bootup confirmation
 8000284:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8000288:	227b      	movs	r2, #123	@ 0x7b
 800028a:	490c      	ldr	r1, [pc, #48]	@ (80002bc <SIM7070G_INIT+0x6c>)
 800028c:	480c      	ldr	r0, [pc, #48]	@ (80002c0 <SIM7070G_INIT+0x70>)
 800028e:	f001 fcdc 	bl	8001c4a <HAL_UART_Receive>

	  SIM7070G_COMMAND(INIT_PACK, sizeof(INIT_PACK)/sizeof(INIT_PACK[0]));
 8000292:	2102      	movs	r1, #2
 8000294:	480b      	ldr	r0, [pc, #44]	@ (80002c4 <SIM7070G_INIT+0x74>)
 8000296:	f7ff ff61 	bl	800015c <SIM7070G_COMMAND>

	  HAL_Delay(7000);
 800029a:	f641 3058 	movw	r0, #7000	@ 0x1b58
 800029e:	f000 fc57 	bl	8000b50 <HAL_Delay>

	  SIM7070G_COMMAND(NTP_PACK, sizeof(NTP_PACK)/sizeof(NTP_PACK[0]));
 80002a2:	2103      	movs	r1, #3
 80002a4:	4808      	ldr	r0, [pc, #32]	@ (80002c8 <SIM7070G_INIT+0x78>)
 80002a6:	f7ff ff59 	bl	800015c <SIM7070G_COMMAND>

	  SIM7070G_COMMAND(UPD_PACK_OPEN, sizeof(UPD_PACK_OPEN)/sizeof(UPD_PACK_OPEN[0]));
 80002aa:	2103      	movs	r1, #3
 80002ac:	4807      	ldr	r0, [pc, #28]	@ (80002cc <SIM7070G_INIT+0x7c>)
 80002ae:	f7ff ff55 	bl	800015c <SIM7070G_COMMAND>

}
 80002b2:	bf00      	nop
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	bf00      	nop
 80002b8:	40010c00 	.word	0x40010c00
 80002bc:	20000130 	.word	0x20000130
 80002c0:	200000a8 	.word	0x200000a8
 80002c4:	20000000 	.word	0x20000000
 80002c8:	20000008 	.word	0x20000008
 80002cc:	20000014 	.word	0x20000014

080002d0 <SIM7070G_GPS_REQUEST>:

void SIM7070G_GPS_REQUEST()
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
	SIM7070G_COMMAND(GPS_INIT_PACK, sizeof(GPS_INIT_PACK)/sizeof(GPS_INIT_PACK[0]));
 80002d4:	2102      	movs	r1, #2
 80002d6:	4808      	ldr	r0, [pc, #32]	@ (80002f8 <SIM7070G_GPS_REQUEST+0x28>)
 80002d8:	f7ff ff40 	bl	800015c <SIM7070G_COMMAND>
	SIM7070G_COMMAND(GPS_REQUEST, sizeof(GPS_REQUEST)/sizeof(GPS_REQUEST[0]));
 80002dc:	2101      	movs	r1, #1
 80002de:	4807      	ldr	r0, [pc, #28]	@ (80002fc <SIM7070G_GPS_REQUEST+0x2c>)
 80002e0:	f7ff ff3c 	bl	800015c <SIM7070G_COMMAND>

	PARSER(sentence, &GPS);
 80002e4:	4906      	ldr	r1, [pc, #24]	@ (8000300 <SIM7070G_GPS_REQUEST+0x30>)
 80002e6:	4807      	ldr	r0, [pc, #28]	@ (8000304 <SIM7070G_GPS_REQUEST+0x34>)
 80002e8:	f000 f9ea 	bl	80006c0 <PARSER>
	SIM7070G_COMMAND_SINGLE("AT+CGNSPWR=0\r\n");
 80002ec:	4806      	ldr	r0, [pc, #24]	@ (8000308 <SIM7070G_GPS_REQUEST+0x38>)
 80002ee:	f7ff ff87 	bl	8000200 <SIM7070G_COMMAND_SINGLE>
}
 80002f2:	bf00      	nop
 80002f4:	bd80      	pop	{r7, pc}
 80002f6:	bf00      	nop
 80002f8:	20000020 	.word	0x20000020
 80002fc:	20000028 	.word	0x20000028
 8000300:	200000f0 	.word	0x200000f0
 8000304:	20000130 	.word	0x20000130
 8000308:	08003c40 	.word	0x08003c40

0800030c <SIM7070G_BATT_REQUEST>:

void SIM7070G_BATT_REQUEST()
{
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
	SIM7070G_COMMAND(BATT_REQUEST, sizeof(BATT_REQUEST)/sizeof(BATT_REQUEST[0]));
 8000310:	2101      	movs	r1, #1
 8000312:	4804      	ldr	r0, [pc, #16]	@ (8000324 <SIM7070G_BATT_REQUEST+0x18>)
 8000314:	f7ff ff22 	bl	800015c <SIM7070G_COMMAND>
	PARSE_BATT(sentence, &GPS);
 8000318:	4903      	ldr	r1, [pc, #12]	@ (8000328 <SIM7070G_BATT_REQUEST+0x1c>)
 800031a:	4804      	ldr	r0, [pc, #16]	@ (800032c <SIM7070G_BATT_REQUEST+0x20>)
 800031c:	f000 f808 	bl	8000330 <PARSE_BATT>

}
 8000320:	bf00      	nop
 8000322:	bd80      	pop	{r7, pc}
 8000324:	2000002c 	.word	0x2000002c
 8000328:	200000f0 	.word	0x200000f0
 800032c:	20000130 	.word	0x20000130

08000330 <PARSE_BATT>:

void PARSE_BATT(char* src, GPS_DATA *GPRMC)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b086      	sub	sp, #24
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]
 8000338:	6039      	str	r1, [r7, #0]
	int cont = 0;
 800033a:	2300      	movs	r3, #0
 800033c:	617b      	str	r3, [r7, #20]
	const char s[3] = ", ";
 800033e:	4a17      	ldr	r2, [pc, #92]	@ (800039c <PARSE_BATT+0x6c>)
 8000340:	f107 030c 	add.w	r3, r7, #12
 8000344:	6812      	ldr	r2, [r2, #0]
 8000346:	4611      	mov	r1, r2
 8000348:	8019      	strh	r1, [r3, #0]
 800034a:	3302      	adds	r3, #2
 800034c:	0c12      	lsrs	r2, r2, #16
 800034e:	701a      	strb	r2, [r3, #0]
	char *token;

	token = strtok_new(src, s);
 8000350:	f107 030c 	add.w	r3, r7, #12
 8000354:	4619      	mov	r1, r3
 8000356:	6878      	ldr	r0, [r7, #4]
 8000358:	f000 fa30 	bl	80007bc <strtok_new>
 800035c:	6138      	str	r0, [r7, #16]

	while(token != NULL)
 800035e:	e015      	b.n	800038c <PARSE_BATT+0x5c>
	{
		switch(cont)
 8000360:	697b      	ldr	r3, [r7, #20]
 8000362:	2b02      	cmp	r3, #2
 8000364:	d107      	bne.n	8000376 <PARSE_BATT+0x46>
		{
			case 2:
				sscanf(token, "%d", &GPRMC->batt);
 8000366:	683b      	ldr	r3, [r7, #0]
 8000368:	331c      	adds	r3, #28
 800036a:	461a      	mov	r2, r3
 800036c:	490c      	ldr	r1, [pc, #48]	@ (80003a0 <PARSE_BATT+0x70>)
 800036e:	6938      	ldr	r0, [r7, #16]
 8000370:	f002 fa5c 	bl	800282c <siscanf>
				break;
 8000374:	e000      	b.n	8000378 <PARSE_BATT+0x48>

			default:
				break;
 8000376:	bf00      	nop
		}

		cont++;
 8000378:	697b      	ldr	r3, [r7, #20]
 800037a:	3301      	adds	r3, #1
 800037c:	617b      	str	r3, [r7, #20]
		token = strtok_new(NULL, s);
 800037e:	f107 030c 	add.w	r3, r7, #12
 8000382:	4619      	mov	r1, r3
 8000384:	2000      	movs	r0, #0
 8000386:	f000 fa19 	bl	80007bc <strtok_new>
 800038a:	6138      	str	r0, [r7, #16]
	while(token != NULL)
 800038c:	693b      	ldr	r3, [r7, #16]
 800038e:	2b00      	cmp	r3, #0
 8000390:	d1e6      	bne.n	8000360 <PARSE_BATT+0x30>
	}

}
 8000392:	bf00      	nop
 8000394:	bf00      	nop
 8000396:	3718      	adds	r7, #24
 8000398:	46bd      	mov	sp, r7
 800039a:	bd80      	pop	{r7, pc}
 800039c:	08003c54 	.word	0x08003c54
 80003a0:	08003c50 	.word	0x08003c50

080003a4 <SIM7070G_UPDATE>:

void SIM7070G_UPDATE(char* URL) //No idea whether this works
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b082      	sub	sp, #8
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]

	//SIM7070G_COMMAND(UPD_PACK_OPEN, sizeof(UPD_PACK_OPEN)/sizeof(UPD_PACK_OPEN[0]));

	HAL_Delay(1000);
 80003ac:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80003b0:	f000 fbce 	bl	8000b50 <HAL_Delay>

	SIM7070G_COMMAND_SINGLE("AT+SHCONN\r\n");
 80003b4:	4808      	ldr	r0, [pc, #32]	@ (80003d8 <SIM7070G_UPDATE+0x34>)
 80003b6:	f7ff ff23 	bl	8000200 <SIM7070G_COMMAND_SINGLE>

	HAL_Delay(5000);
 80003ba:	f241 3088 	movw	r0, #5000	@ 0x1388
 80003be:	f000 fbc7 	bl	8000b50 <HAL_Delay>

	SIM7070G_COMMAND_SINGLE(URL); //not sure if this will work, due to strlen
 80003c2:	6878      	ldr	r0, [r7, #4]
 80003c4:	f7ff ff1c 	bl	8000200 <SIM7070G_COMMAND_SINGLE>

	SIM7070G_COMMAND_SINGLE("AT+SHDISC\r\n");
 80003c8:	4804      	ldr	r0, [pc, #16]	@ (80003dc <SIM7070G_UPDATE+0x38>)
 80003ca:	f7ff ff19 	bl	8000200 <SIM7070G_COMMAND_SINGLE>
}
 80003ce:	bf00      	nop
 80003d0:	3708      	adds	r7, #8
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	bf00      	nop
 80003d8:	08003c58 	.word	0x08003c58
 80003dc:	08003c64 	.word	0x08003c64

080003e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b082      	sub	sp, #8
 80003e4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003e6:	f000 fb51 	bl	8000a8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003ea:	f000 f85f 	bl	80004ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003ee:	f000 f8cb 	bl	8000588 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80003f2:	f000 f89f 	bl	8000534 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  SIM7070G_INIT();
 80003f6:	f7ff ff2b 	bl	8000250 <SIM7070G_INIT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1)
  {
	  //Blink LED every iteration, just to see if uC crashed
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80003fa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003fe:	481e      	ldr	r0, [pc, #120]	@ (8000478 <main+0x98>)
 8000400:	f000 ff26 	bl	8001250 <HAL_GPIO_TogglePin>

	  //OBTAIN DATA
	  SIM7070G_GPS_REQUEST();
 8000404:	f7ff ff64 	bl	80002d0 <SIM7070G_GPS_REQUEST>
	  SIM7070G_BATT_REQUEST();
 8000408:	f7ff ff80 	bl	800030c <SIM7070G_BATT_REQUEST>

	  run = 0;
 800040c:	4b1b      	ldr	r3, [pc, #108]	@ (800047c <main+0x9c>)
 800040e:	2200      	movs	r2, #0
 8000410:	601a      	str	r2, [r3, #0]
	  //SIM7070G_COMMAND_SINGLE("AT+CNACT=0,1\r\n");
	  //HAL_UART_Transmit_IT(&huart1, "AT+CNACT=0,1\r\n", strlen("AT+CNACT=0,1\r\n"));
	  HAL_UART_Receive(&huart1, (char*)sentence, GPS_MAX + 1, 120000); //just fuck me up man
 8000412:	4b1b      	ldr	r3, [pc, #108]	@ (8000480 <main+0xa0>)
 8000414:	227b      	movs	r2, #123	@ 0x7b
 8000416:	491b      	ldr	r1, [pc, #108]	@ (8000484 <main+0xa4>)
 8000418:	481b      	ldr	r0, [pc, #108]	@ (8000488 <main+0xa8>)
 800041a:	f001 fc16 	bl	8001c4a <HAL_UART_Receive>
		  run = 1;
	  } //I'm sorry
**/

	  //UPDATE GPS
	  memset(url,0,strlen(url));
 800041e:	481b      	ldr	r0, [pc, #108]	@ (800048c <main+0xac>)
 8000420:	f7ff fe94 	bl	800014c <strlen>
 8000424:	4603      	mov	r3, r0
 8000426:	461a      	mov	r2, r3
 8000428:	2100      	movs	r1, #0
 800042a:	4818      	ldr	r0, [pc, #96]	@ (800048c <main+0xac>)
 800042c:	f002 fa2a 	bl	8002884 <memset>
	  sprintf(url,"AT+SHREQ=\"/gpsdata.php\?lat=%s&lng=%s&did=%d\",1\r\n", GPS.latitude, GPS.longitude, UDID);
 8000430:	4b17      	ldr	r3, [pc, #92]	@ (8000490 <main+0xb0>)
 8000432:	9300      	str	r3, [sp, #0]
 8000434:	4b17      	ldr	r3, [pc, #92]	@ (8000494 <main+0xb4>)
 8000436:	4a18      	ldr	r2, [pc, #96]	@ (8000498 <main+0xb8>)
 8000438:	4918      	ldr	r1, [pc, #96]	@ (800049c <main+0xbc>)
 800043a:	4814      	ldr	r0, [pc, #80]	@ (800048c <main+0xac>)
 800043c:	f002 f9d6 	bl	80027ec <siprintf>
	  SIM7070G_UPDATE(url);
 8000440:	4812      	ldr	r0, [pc, #72]	@ (800048c <main+0xac>)
 8000442:	f7ff ffaf 	bl	80003a4 <SIM7070G_UPDATE>

	  //UPDATE BATTERY
	  memset(url,0,strlen(url));
 8000446:	4811      	ldr	r0, [pc, #68]	@ (800048c <main+0xac>)
 8000448:	f7ff fe80 	bl	800014c <strlen>
 800044c:	4603      	mov	r3, r0
 800044e:	461a      	mov	r2, r3
 8000450:	2100      	movs	r1, #0
 8000452:	480e      	ldr	r0, [pc, #56]	@ (800048c <main+0xac>)
 8000454:	f002 fa16 	bl	8002884 <memset>
	  sprintf(url, "AT+SHREQ=\"/bl.php\?bl=%d&did=%d\",1\r\n", GPS.batt, UDID);
 8000458:	4b11      	ldr	r3, [pc, #68]	@ (80004a0 <main+0xc0>)
 800045a:	69da      	ldr	r2, [r3, #28]
 800045c:	4b0c      	ldr	r3, [pc, #48]	@ (8000490 <main+0xb0>)
 800045e:	4911      	ldr	r1, [pc, #68]	@ (80004a4 <main+0xc4>)
 8000460:	480a      	ldr	r0, [pc, #40]	@ (800048c <main+0xac>)
 8000462:	f002 f9c3 	bl	80027ec <siprintf>
	  SIM7070G_UPDATE(url);
 8000466:	4809      	ldr	r0, [pc, #36]	@ (800048c <main+0xac>)
 8000468:	f7ff ff9c 	bl	80003a4 <SIM7070G_UPDATE>

	  SIM7070G_COMMAND_SINGLE("AT+CNACT=0,0\r\n");
 800046c:	480e      	ldr	r0, [pc, #56]	@ (80004a8 <main+0xc8>)
 800046e:	f7ff fec7 	bl	8000200 <SIM7070G_COMMAND_SINGLE>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000472:	bf00      	nop
 8000474:	e7c1      	b.n	80003fa <main+0x1a>
 8000476:	bf00      	nop
 8000478:	40011000 	.word	0x40011000
 800047c:	200002a8 	.word	0x200002a8
 8000480:	0001d4c0 	.word	0x0001d4c0
 8000484:	20000130 	.word	0x20000130
 8000488:	200000a8 	.word	0x200000a8
 800048c:	200001ac 	.word	0x200001ac
 8000490:	000138d5 	.word	0x000138d5
 8000494:	20000122 	.word	0x20000122
 8000498:	20000117 	.word	0x20000117
 800049c:	08003c70 	.word	0x08003c70
 80004a0:	200000f0 	.word	0x200000f0
 80004a4:	08003ca4 	.word	0x08003ca4
 80004a8:	08003cc8 	.word	0x08003cc8

080004ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b090      	sub	sp, #64	@ 0x40
 80004b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004b2:	f107 0318 	add.w	r3, r7, #24
 80004b6:	2228      	movs	r2, #40	@ 0x28
 80004b8:	2100      	movs	r1, #0
 80004ba:	4618      	mov	r0, r3
 80004bc:	f002 f9e2 	bl	8002884 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004c0:	1d3b      	adds	r3, r7, #4
 80004c2:	2200      	movs	r2, #0
 80004c4:	601a      	str	r2, [r3, #0]
 80004c6:	605a      	str	r2, [r3, #4]
 80004c8:	609a      	str	r2, [r3, #8]
 80004ca:	60da      	str	r2, [r3, #12]
 80004cc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80004ce:	2301      	movs	r3, #1
 80004d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004d2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80004d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80004d8:	2300      	movs	r3, #0
 80004da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004dc:	2301      	movs	r3, #1
 80004de:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004e0:	2302      	movs	r3, #2
 80004e2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004e4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80004e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80004ea:	2300      	movs	r3, #0
 80004ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004ee:	f107 0318 	add.w	r3, r7, #24
 80004f2:	4618      	mov	r0, r3
 80004f4:	f000 fec6 	bl	8001284 <HAL_RCC_OscConfig>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d001      	beq.n	8000502 <SystemClock_Config+0x56>
  {
    Error_Handler();
 80004fe:	f000 f8d9 	bl	80006b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000502:	230f      	movs	r3, #15
 8000504:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000506:	2302      	movs	r3, #2
 8000508:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800050a:	2300      	movs	r3, #0
 800050c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800050e:	2300      	movs	r3, #0
 8000510:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000512:	2300      	movs	r3, #0
 8000514:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000516:	1d3b      	adds	r3, r7, #4
 8000518:	2100      	movs	r1, #0
 800051a:	4618      	mov	r0, r3
 800051c:	f001 f934 	bl	8001788 <HAL_RCC_ClockConfig>
 8000520:	4603      	mov	r3, r0
 8000522:	2b00      	cmp	r3, #0
 8000524:	d001      	beq.n	800052a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000526:	f000 f8c5 	bl	80006b4 <Error_Handler>
  }
}
 800052a:	bf00      	nop
 800052c:	3740      	adds	r7, #64	@ 0x40
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
	...

08000534 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000538:	4b11      	ldr	r3, [pc, #68]	@ (8000580 <MX_USART1_UART_Init+0x4c>)
 800053a:	4a12      	ldr	r2, [pc, #72]	@ (8000584 <MX_USART1_UART_Init+0x50>)
 800053c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800053e:	4b10      	ldr	r3, [pc, #64]	@ (8000580 <MX_USART1_UART_Init+0x4c>)
 8000540:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000544:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000546:	4b0e      	ldr	r3, [pc, #56]	@ (8000580 <MX_USART1_UART_Init+0x4c>)
 8000548:	2200      	movs	r2, #0
 800054a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800054c:	4b0c      	ldr	r3, [pc, #48]	@ (8000580 <MX_USART1_UART_Init+0x4c>)
 800054e:	2200      	movs	r2, #0
 8000550:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000552:	4b0b      	ldr	r3, [pc, #44]	@ (8000580 <MX_USART1_UART_Init+0x4c>)
 8000554:	2200      	movs	r2, #0
 8000556:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000558:	4b09      	ldr	r3, [pc, #36]	@ (8000580 <MX_USART1_UART_Init+0x4c>)
 800055a:	220c      	movs	r2, #12
 800055c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800055e:	4b08      	ldr	r3, [pc, #32]	@ (8000580 <MX_USART1_UART_Init+0x4c>)
 8000560:	2200      	movs	r2, #0
 8000562:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000564:	4b06      	ldr	r3, [pc, #24]	@ (8000580 <MX_USART1_UART_Init+0x4c>)
 8000566:	2200      	movs	r2, #0
 8000568:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800056a:	4805      	ldr	r0, [pc, #20]	@ (8000580 <MX_USART1_UART_Init+0x4c>)
 800056c:	f001 fa9a 	bl	8001aa4 <HAL_UART_Init>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d001      	beq.n	800057a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000576:	f000 f89d 	bl	80006b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800057a:	bf00      	nop
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	200000a8 	.word	0x200000a8
 8000584:	40013800 	.word	0x40013800

08000588 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b088      	sub	sp, #32
 800058c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058e:	f107 0310 	add.w	r3, r7, #16
 8000592:	2200      	movs	r2, #0
 8000594:	601a      	str	r2, [r3, #0]
 8000596:	605a      	str	r2, [r3, #4]
 8000598:	609a      	str	r2, [r3, #8]
 800059a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800059c:	4b38      	ldr	r3, [pc, #224]	@ (8000680 <MX_GPIO_Init+0xf8>)
 800059e:	699b      	ldr	r3, [r3, #24]
 80005a0:	4a37      	ldr	r2, [pc, #220]	@ (8000680 <MX_GPIO_Init+0xf8>)
 80005a2:	f043 0310 	orr.w	r3, r3, #16
 80005a6:	6193      	str	r3, [r2, #24]
 80005a8:	4b35      	ldr	r3, [pc, #212]	@ (8000680 <MX_GPIO_Init+0xf8>)
 80005aa:	699b      	ldr	r3, [r3, #24]
 80005ac:	f003 0310 	and.w	r3, r3, #16
 80005b0:	60fb      	str	r3, [r7, #12]
 80005b2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005b4:	4b32      	ldr	r3, [pc, #200]	@ (8000680 <MX_GPIO_Init+0xf8>)
 80005b6:	699b      	ldr	r3, [r3, #24]
 80005b8:	4a31      	ldr	r2, [pc, #196]	@ (8000680 <MX_GPIO_Init+0xf8>)
 80005ba:	f043 0320 	orr.w	r3, r3, #32
 80005be:	6193      	str	r3, [r2, #24]
 80005c0:	4b2f      	ldr	r3, [pc, #188]	@ (8000680 <MX_GPIO_Init+0xf8>)
 80005c2:	699b      	ldr	r3, [r3, #24]
 80005c4:	f003 0320 	and.w	r3, r3, #32
 80005c8:	60bb      	str	r3, [r7, #8]
 80005ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005cc:	4b2c      	ldr	r3, [pc, #176]	@ (8000680 <MX_GPIO_Init+0xf8>)
 80005ce:	699b      	ldr	r3, [r3, #24]
 80005d0:	4a2b      	ldr	r2, [pc, #172]	@ (8000680 <MX_GPIO_Init+0xf8>)
 80005d2:	f043 0304 	orr.w	r3, r3, #4
 80005d6:	6193      	str	r3, [r2, #24]
 80005d8:	4b29      	ldr	r3, [pc, #164]	@ (8000680 <MX_GPIO_Init+0xf8>)
 80005da:	699b      	ldr	r3, [r3, #24]
 80005dc:	f003 0304 	and.w	r3, r3, #4
 80005e0:	607b      	str	r3, [r7, #4]
 80005e2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005e4:	4b26      	ldr	r3, [pc, #152]	@ (8000680 <MX_GPIO_Init+0xf8>)
 80005e6:	699b      	ldr	r3, [r3, #24]
 80005e8:	4a25      	ldr	r2, [pc, #148]	@ (8000680 <MX_GPIO_Init+0xf8>)
 80005ea:	f043 0308 	orr.w	r3, r3, #8
 80005ee:	6193      	str	r3, [r2, #24]
 80005f0:	4b23      	ldr	r3, [pc, #140]	@ (8000680 <MX_GPIO_Init+0xf8>)
 80005f2:	699b      	ldr	r3, [r3, #24]
 80005f4:	f003 0308 	and.w	r3, r3, #8
 80005f8:	603b      	str	r3, [r7, #0]
 80005fa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80005fc:	2200      	movs	r2, #0
 80005fe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000602:	4820      	ldr	r0, [pc, #128]	@ (8000684 <MX_GPIO_Init+0xfc>)
 8000604:	f000 fe0c 	bl	8001220 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000608:	2200      	movs	r2, #0
 800060a:	2101      	movs	r1, #1
 800060c:	481e      	ldr	r0, [pc, #120]	@ (8000688 <MX_GPIO_Init+0x100>)
 800060e:	f000 fe07 	bl	8001220 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8000612:	2200      	movs	r2, #0
 8000614:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000618:	481c      	ldr	r0, [pc, #112]	@ (800068c <MX_GPIO_Init+0x104>)
 800061a:	f000 fe01 	bl	8001220 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800061e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000622:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000624:	2301      	movs	r3, #1
 8000626:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000628:	2300      	movs	r3, #0
 800062a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800062c:	2302      	movs	r3, #2
 800062e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000630:	f107 0310 	add.w	r3, r7, #16
 8000634:	4619      	mov	r1, r3
 8000636:	4813      	ldr	r0, [pc, #76]	@ (8000684 <MX_GPIO_Init+0xfc>)
 8000638:	f000 fc6e 	bl	8000f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800063c:	2301      	movs	r3, #1
 800063e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000640:	2301      	movs	r3, #1
 8000642:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000644:	2300      	movs	r3, #0
 8000646:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000648:	2302      	movs	r3, #2
 800064a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800064c:	f107 0310 	add.w	r3, r7, #16
 8000650:	4619      	mov	r1, r3
 8000652:	480d      	ldr	r0, [pc, #52]	@ (8000688 <MX_GPIO_Init+0x100>)
 8000654:	f000 fc60 	bl	8000f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000658:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800065c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800065e:	2301      	movs	r3, #1
 8000660:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000662:	2300      	movs	r3, #0
 8000664:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000666:	2302      	movs	r3, #2
 8000668:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800066a:	f107 0310 	add.w	r3, r7, #16
 800066e:	4619      	mov	r1, r3
 8000670:	4806      	ldr	r0, [pc, #24]	@ (800068c <MX_GPIO_Init+0x104>)
 8000672:	f000 fc51 	bl	8000f18 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000676:	bf00      	nop
 8000678:	3720      	adds	r7, #32
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	40021000 	.word	0x40021000
 8000684:	40011000 	.word	0x40011000
 8000688:	40010800 	.word	0x40010800
 800068c:	40010c00 	.word	0x40010c00

08000690 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
	//run = 1;
}
 8000698:	bf00      	nop
 800069a:	370c      	adds	r7, #12
 800069c:	46bd      	mov	sp, r7
 800069e:	bc80      	pop	{r7}
 80006a0:	4770      	bx	lr

080006a2 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80006a2:	b480      	push	{r7}
 80006a4:	b083      	sub	sp, #12
 80006a6:	af00      	add	r7, sp, #0
 80006a8:	6078      	str	r0, [r7, #4]
	//HAL_UART_Receive_IT(&huart1, (char*)sentence, GPS_MAX+1);
}
 80006aa:	bf00      	nop
 80006ac:	370c      	adds	r7, #12
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bc80      	pop	{r7}
 80006b2:	4770      	bx	lr

080006b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006b8:	b672      	cpsid	i
}
 80006ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006bc:	bf00      	nop
 80006be:	e7fd      	b.n	80006bc <Error_Handler+0x8>

080006c0 <PARSER>:
#include "nmea.h"

void PARSER(char *src, GPS_DATA *GPRMC) //works when called from main but not from within SIM7070G_GPS_REQUEST
{
 80006c0:	b5b0      	push	{r4, r5, r7, lr}
 80006c2:	b08a      	sub	sp, #40	@ 0x28
 80006c4:	af04      	add	r7, sp, #16
 80006c6:	6078      	str	r0, [r7, #4]
 80006c8:	6039      	str	r1, [r7, #0]
    int cont = 0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	617b      	str	r3, [r7, #20]
    const char s[3] = ", ";
 80006ce:	4a37      	ldr	r2, [pc, #220]	@ (80007ac <PARSER+0xec>)
 80006d0:	f107 030c 	add.w	r3, r7, #12
 80006d4:	6812      	ldr	r2, [r2, #0]
 80006d6:	4611      	mov	r1, r2
 80006d8:	8019      	strh	r1, [r3, #0]
 80006da:	3302      	adds	r3, #2
 80006dc:	0c12      	lsrs	r2, r2, #16
 80006de:	701a      	strb	r2, [r3, #0]
    char *token;

    token = strtok_new(src, s);
 80006e0:	f107 030c 	add.w	r3, r7, #12
 80006e4:	4619      	mov	r1, r3
 80006e6:	6878      	ldr	r0, [r7, #4]
 80006e8:	f000 f868 	bl	80007bc <strtok_new>
 80006ec:	6138      	str	r0, [r7, #16]

    while(token != NULL)
 80006ee:	e054      	b.n	800079a <PARSER+0xda>
    {
        switch(cont)
 80006f0:	697b      	ldr	r3, [r7, #20]
 80006f2:	2b05      	cmp	r3, #5
 80006f4:	d846      	bhi.n	8000784 <PARSER+0xc4>
 80006f6:	a201      	add	r2, pc, #4	@ (adr r2, 80006fc <PARSER+0x3c>)
 80006f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006fc:	08000785 	.word	0x08000785
 8000700:	08000715 	.word	0x08000715
 8000704:	08000723 	.word	0x08000723
 8000708:	08000733 	.word	0x08000733
 800070c:	08000765 	.word	0x08000765
 8000710:	08000775 	.word	0x08000775
        {
            case 0: //AT+CGNSINF\r\n+CGNSINF: [DISCARD]
                break;

            case 1: //run
                sscanf(token, "%d", &GPRMC->run);
 8000714:	683b      	ldr	r3, [r7, #0]
 8000716:	461a      	mov	r2, r3
 8000718:	4925      	ldr	r1, [pc, #148]	@ (80007b0 <PARSER+0xf0>)
 800071a:	6938      	ldr	r0, [r7, #16]
 800071c:	f002 f886 	bl	800282c <siscanf>
                break;
 8000720:	e031      	b.n	8000786 <PARSER+0xc6>

            case 2: //fix_status
                sscanf(token, "%d", &GPRMC->fix_stat);
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	3304      	adds	r3, #4
 8000726:	461a      	mov	r2, r3
 8000728:	4921      	ldr	r1, [pc, #132]	@ (80007b0 <PARSER+0xf0>)
 800072a:	6938      	ldr	r0, [r7, #16]
 800072c:	f002 f87e 	bl	800282c <siscanf>
                break;
 8000730:	e029      	b.n	8000786 <PARSER+0xc6>

            case 3: //UTC datetime
                sscanf(token, "%4d%2d%2d%2d%2d%s", &GPRMC->year, &GPRMC->month, &GPRMC->day, &GPRMC->hour, &GPRMC->minute, GPRMC->seconds);
 8000732:	683b      	ldr	r3, [r7, #0]
 8000734:	f103 0408 	add.w	r4, r3, #8
 8000738:	683b      	ldr	r3, [r7, #0]
 800073a:	f103 050c 	add.w	r5, r3, #12
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	3310      	adds	r3, #16
 8000742:	683a      	ldr	r2, [r7, #0]
 8000744:	3214      	adds	r2, #20
 8000746:	6839      	ldr	r1, [r7, #0]
 8000748:	3118      	adds	r1, #24
 800074a:	6838      	ldr	r0, [r7, #0]
 800074c:	3020      	adds	r0, #32
 800074e:	9003      	str	r0, [sp, #12]
 8000750:	9102      	str	r1, [sp, #8]
 8000752:	9201      	str	r2, [sp, #4]
 8000754:	9300      	str	r3, [sp, #0]
 8000756:	462b      	mov	r3, r5
 8000758:	4622      	mov	r2, r4
 800075a:	4916      	ldr	r1, [pc, #88]	@ (80007b4 <PARSER+0xf4>)
 800075c:	6938      	ldr	r0, [r7, #16]
 800075e:	f002 f865 	bl	800282c <siscanf>
                break;
 8000762:	e010      	b.n	8000786 <PARSER+0xc6>

            case 4: //Latitude
                sscanf(token, "%s", GPRMC->latitude);
 8000764:	683b      	ldr	r3, [r7, #0]
 8000766:	3327      	adds	r3, #39	@ 0x27
 8000768:	461a      	mov	r2, r3
 800076a:	4913      	ldr	r1, [pc, #76]	@ (80007b8 <PARSER+0xf8>)
 800076c:	6938      	ldr	r0, [r7, #16]
 800076e:	f002 f85d 	bl	800282c <siscanf>
                break;
 8000772:	e008      	b.n	8000786 <PARSER+0xc6>

            case 5: //Longitude
                sscanf(token, "%s", GPRMC->longitude);
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	3332      	adds	r3, #50	@ 0x32
 8000778:	461a      	mov	r2, r3
 800077a:	490f      	ldr	r1, [pc, #60]	@ (80007b8 <PARSER+0xf8>)
 800077c:	6938      	ldr	r0, [r7, #16]
 800077e:	f002 f855 	bl	800282c <siscanf>
                break;
 8000782:	e000      	b.n	8000786 <PARSER+0xc6>
            case 18: //VPA+OK
                //sscanf(token, "%s", &GPRMC->VPA);
                break;
*/
            default:
                break;
 8000784:	bf00      	nop
        }

        //printf("String: \"%s\" -- Cont: %d\n\r", token, cont);
        cont++;
 8000786:	697b      	ldr	r3, [r7, #20]
 8000788:	3301      	adds	r3, #1
 800078a:	617b      	str	r3, [r7, #20]
        token = strtok_new(NULL, s);
 800078c:	f107 030c 	add.w	r3, r7, #12
 8000790:	4619      	mov	r1, r3
 8000792:	2000      	movs	r0, #0
 8000794:	f000 f812 	bl	80007bc <strtok_new>
 8000798:	6138      	str	r0, [r7, #16]
    while(token != NULL)
 800079a:	693b      	ldr	r3, [r7, #16]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d1a7      	bne.n	80006f0 <PARSER+0x30>
/*
    printf("Year: %d, Month: %d, Day: %d, Hour: %d, Minute: %d, Second: %s\n", GPRMC->year, GPRMC->month, GPRMC->day, GPRMC->hour, GPRMC->minute, GPRMC->seconds);
    printf("Latitude: %s\n", GPRMC->latitude);
    printf("Longitude: %s\n", GPRMC->longitude);
*/
}
 80007a0:	bf00      	nop
 80007a2:	bf00      	nop
 80007a4:	3718      	adds	r7, #24
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bdb0      	pop	{r4, r5, r7, pc}
 80007aa:	bf00      	nop
 80007ac:	08003cf4 	.word	0x08003cf4
 80007b0:	08003cd8 	.word	0x08003cd8
 80007b4:	08003cdc 	.word	0x08003cdc
 80007b8:	08003cf0 	.word	0x08003cf0

080007bc <strtok_new>:

//taken from https://stackoverflow.com/questions/26522583/c-strtok-skips-second-token-or-consecutive-delimiter
char *strtok_new(char *string, char const *delimiter)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b084      	sub	sp, #16
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
 80007c4:	6039      	str	r1, [r7, #0]
    static char *source = NULL;
    char *p, *riturn = 0;
 80007c6:	2300      	movs	r3, #0
 80007c8:	60fb      	str	r3, [r7, #12]
    if (string != NULL)
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d002      	beq.n	80007d6 <strtok_new+0x1a>
        source = string;
 80007d0:	4a17      	ldr	r2, [pc, #92]	@ (8000830 <strtok_new+0x74>)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	6013      	str	r3, [r2, #0]
    if (source == NULL)
 80007d6:	4b16      	ldr	r3, [pc, #88]	@ (8000830 <strtok_new+0x74>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d101      	bne.n	80007e2 <strtok_new+0x26>
        return NULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	e022      	b.n	8000828 <strtok_new+0x6c>

    if ((p = strpbrk(source, delimiter)) != NULL)
 80007e2:	4b13      	ldr	r3, [pc, #76]	@ (8000830 <strtok_new+0x74>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	6839      	ldr	r1, [r7, #0]
 80007e8:	4618      	mov	r0, r3
 80007ea:	f002 f853 	bl	8002894 <strpbrk>
 80007ee:	60b8      	str	r0, [r7, #8]
 80007f0:	68bb      	ldr	r3, [r7, #8]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d00c      	beq.n	8000810 <strtok_new+0x54>
    {
        *p = 0;
 80007f6:	68bb      	ldr	r3, [r7, #8]
 80007f8:	2200      	movs	r2, #0
 80007fa:	701a      	strb	r2, [r3, #0]
        riturn = source;
 80007fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000830 <strtok_new+0x74>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	60fb      	str	r3, [r7, #12]
        source = ++p;
 8000802:	68bb      	ldr	r3, [r7, #8]
 8000804:	3301      	adds	r3, #1
 8000806:	60bb      	str	r3, [r7, #8]
 8000808:	4a09      	ldr	r2, [pc, #36]	@ (8000830 <strtok_new+0x74>)
 800080a:	68bb      	ldr	r3, [r7, #8]
 800080c:	6013      	str	r3, [r2, #0]
 800080e:	e00a      	b.n	8000826 <strtok_new+0x6a>
    }
    else if (*source)
 8000810:	4b07      	ldr	r3, [pc, #28]	@ (8000830 <strtok_new+0x74>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d005      	beq.n	8000826 <strtok_new+0x6a>
    {
        riturn = source;
 800081a:	4b05      	ldr	r3, [pc, #20]	@ (8000830 <strtok_new+0x74>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	60fb      	str	r3, [r7, #12]
        source = NULL;
 8000820:	4b03      	ldr	r3, [pc, #12]	@ (8000830 <strtok_new+0x74>)
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
    }
    return riturn;
 8000826:	68fb      	ldr	r3, [r7, #12]
}
 8000828:	4618      	mov	r0, r3
 800082a:	3710      	adds	r7, #16
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	200002ac 	.word	0x200002ac

08000834 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000834:	b480      	push	{r7}
 8000836:	b085      	sub	sp, #20
 8000838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800083a:	4b15      	ldr	r3, [pc, #84]	@ (8000890 <HAL_MspInit+0x5c>)
 800083c:	699b      	ldr	r3, [r3, #24]
 800083e:	4a14      	ldr	r2, [pc, #80]	@ (8000890 <HAL_MspInit+0x5c>)
 8000840:	f043 0301 	orr.w	r3, r3, #1
 8000844:	6193      	str	r3, [r2, #24]
 8000846:	4b12      	ldr	r3, [pc, #72]	@ (8000890 <HAL_MspInit+0x5c>)
 8000848:	699b      	ldr	r3, [r3, #24]
 800084a:	f003 0301 	and.w	r3, r3, #1
 800084e:	60bb      	str	r3, [r7, #8]
 8000850:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000852:	4b0f      	ldr	r3, [pc, #60]	@ (8000890 <HAL_MspInit+0x5c>)
 8000854:	69db      	ldr	r3, [r3, #28]
 8000856:	4a0e      	ldr	r2, [pc, #56]	@ (8000890 <HAL_MspInit+0x5c>)
 8000858:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800085c:	61d3      	str	r3, [r2, #28]
 800085e:	4b0c      	ldr	r3, [pc, #48]	@ (8000890 <HAL_MspInit+0x5c>)
 8000860:	69db      	ldr	r3, [r3, #28]
 8000862:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800086a:	4b0a      	ldr	r3, [pc, #40]	@ (8000894 <HAL_MspInit+0x60>)
 800086c:	685b      	ldr	r3, [r3, #4]
 800086e:	60fb      	str	r3, [r7, #12]
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800087e:	60fb      	str	r3, [r7, #12]
 8000880:	4a04      	ldr	r2, [pc, #16]	@ (8000894 <HAL_MspInit+0x60>)
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000886:	bf00      	nop
 8000888:	3714      	adds	r7, #20
 800088a:	46bd      	mov	sp, r7
 800088c:	bc80      	pop	{r7}
 800088e:	4770      	bx	lr
 8000890:	40021000 	.word	0x40021000
 8000894:	40010000 	.word	0x40010000

08000898 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b08a      	sub	sp, #40	@ 0x28
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a0:	f107 0314 	add.w	r3, r7, #20
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	605a      	str	r2, [r3, #4]
 80008aa:	609a      	str	r2, [r3, #8]
 80008ac:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	4a26      	ldr	r2, [pc, #152]	@ (800094c <HAL_UART_MspInit+0xb4>)
 80008b4:	4293      	cmp	r3, r2
 80008b6:	d145      	bne.n	8000944 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008b8:	4b25      	ldr	r3, [pc, #148]	@ (8000950 <HAL_UART_MspInit+0xb8>)
 80008ba:	699b      	ldr	r3, [r3, #24]
 80008bc:	4a24      	ldr	r2, [pc, #144]	@ (8000950 <HAL_UART_MspInit+0xb8>)
 80008be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008c2:	6193      	str	r3, [r2, #24]
 80008c4:	4b22      	ldr	r3, [pc, #136]	@ (8000950 <HAL_UART_MspInit+0xb8>)
 80008c6:	699b      	ldr	r3, [r3, #24]
 80008c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008cc:	613b      	str	r3, [r7, #16]
 80008ce:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d0:	4b1f      	ldr	r3, [pc, #124]	@ (8000950 <HAL_UART_MspInit+0xb8>)
 80008d2:	699b      	ldr	r3, [r3, #24]
 80008d4:	4a1e      	ldr	r2, [pc, #120]	@ (8000950 <HAL_UART_MspInit+0xb8>)
 80008d6:	f043 0308 	orr.w	r3, r3, #8
 80008da:	6193      	str	r3, [r2, #24]
 80008dc:	4b1c      	ldr	r3, [pc, #112]	@ (8000950 <HAL_UART_MspInit+0xb8>)
 80008de:	699b      	ldr	r3, [r3, #24]
 80008e0:	f003 0308 	and.w	r3, r3, #8
 80008e4:	60fb      	str	r3, [r7, #12]
 80008e6:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80008e8:	2340      	movs	r3, #64	@ 0x40
 80008ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ec:	2302      	movs	r3, #2
 80008ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008f0:	2303      	movs	r3, #3
 80008f2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f4:	f107 0314 	add.w	r3, r7, #20
 80008f8:	4619      	mov	r1, r3
 80008fa:	4816      	ldr	r0, [pc, #88]	@ (8000954 <HAL_UART_MspInit+0xbc>)
 80008fc:	f000 fb0c 	bl	8000f18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000900:	2380      	movs	r3, #128	@ 0x80
 8000902:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000904:	2300      	movs	r3, #0
 8000906:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800090c:	f107 0314 	add.w	r3, r7, #20
 8000910:	4619      	mov	r1, r3
 8000912:	4810      	ldr	r0, [pc, #64]	@ (8000954 <HAL_UART_MspInit+0xbc>)
 8000914:	f000 fb00 	bl	8000f18 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8000918:	4b0f      	ldr	r3, [pc, #60]	@ (8000958 <HAL_UART_MspInit+0xc0>)
 800091a:	685b      	ldr	r3, [r3, #4]
 800091c:	627b      	str	r3, [r7, #36]	@ 0x24
 800091e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000920:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000924:	627b      	str	r3, [r7, #36]	@ 0x24
 8000926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000928:	f043 0304 	orr.w	r3, r3, #4
 800092c:	627b      	str	r3, [r7, #36]	@ 0x24
 800092e:	4a0a      	ldr	r2, [pc, #40]	@ (8000958 <HAL_UART_MspInit+0xc0>)
 8000930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000932:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000934:	2200      	movs	r2, #0
 8000936:	2100      	movs	r1, #0
 8000938:	2025      	movs	r0, #37	@ 0x25
 800093a:	f000 fa04 	bl	8000d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800093e:	2025      	movs	r0, #37	@ 0x25
 8000940:	f000 fa1d 	bl	8000d7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000944:	bf00      	nop
 8000946:	3728      	adds	r7, #40	@ 0x28
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	40013800 	.word	0x40013800
 8000950:	40021000 	.word	0x40021000
 8000954:	40010c00 	.word	0x40010c00
 8000958:	40010000 	.word	0x40010000

0800095c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000960:	bf00      	nop
 8000962:	e7fd      	b.n	8000960 <NMI_Handler+0x4>

08000964 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000968:	bf00      	nop
 800096a:	e7fd      	b.n	8000968 <HardFault_Handler+0x4>

0800096c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000970:	bf00      	nop
 8000972:	e7fd      	b.n	8000970 <MemManage_Handler+0x4>

08000974 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000978:	bf00      	nop
 800097a:	e7fd      	b.n	8000978 <BusFault_Handler+0x4>

0800097c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000980:	bf00      	nop
 8000982:	e7fd      	b.n	8000980 <UsageFault_Handler+0x4>

08000984 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000988:	bf00      	nop
 800098a:	46bd      	mov	sp, r7
 800098c:	bc80      	pop	{r7}
 800098e:	4770      	bx	lr

08000990 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000994:	bf00      	nop
 8000996:	46bd      	mov	sp, r7
 8000998:	bc80      	pop	{r7}
 800099a:	4770      	bx	lr

0800099c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009a0:	bf00      	nop
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bc80      	pop	{r7}
 80009a6:	4770      	bx	lr

080009a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009ac:	f000 f8b4 	bl	8000b18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009b0:	bf00      	nop
 80009b2:	bd80      	pop	{r7, pc}

080009b4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80009b8:	4802      	ldr	r0, [pc, #8]	@ (80009c4 <USART1_IRQHandler+0x10>)
 80009ba:	f001 f9d9 	bl	8001d70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	200000a8 	.word	0x200000a8

080009c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b086      	sub	sp, #24
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009d0:	4a14      	ldr	r2, [pc, #80]	@ (8000a24 <_sbrk+0x5c>)
 80009d2:	4b15      	ldr	r3, [pc, #84]	@ (8000a28 <_sbrk+0x60>)
 80009d4:	1ad3      	subs	r3, r2, r3
 80009d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009dc:	4b13      	ldr	r3, [pc, #76]	@ (8000a2c <_sbrk+0x64>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d102      	bne.n	80009ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009e4:	4b11      	ldr	r3, [pc, #68]	@ (8000a2c <_sbrk+0x64>)
 80009e6:	4a12      	ldr	r2, [pc, #72]	@ (8000a30 <_sbrk+0x68>)
 80009e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009ea:	4b10      	ldr	r3, [pc, #64]	@ (8000a2c <_sbrk+0x64>)
 80009ec:	681a      	ldr	r2, [r3, #0]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4413      	add	r3, r2
 80009f2:	693a      	ldr	r2, [r7, #16]
 80009f4:	429a      	cmp	r2, r3
 80009f6:	d207      	bcs.n	8000a08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009f8:	f001 ff7a 	bl	80028f0 <__errno>
 80009fc:	4603      	mov	r3, r0
 80009fe:	220c      	movs	r2, #12
 8000a00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a02:	f04f 33ff 	mov.w	r3, #4294967295
 8000a06:	e009      	b.n	8000a1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a08:	4b08      	ldr	r3, [pc, #32]	@ (8000a2c <_sbrk+0x64>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a0e:	4b07      	ldr	r3, [pc, #28]	@ (8000a2c <_sbrk+0x64>)
 8000a10:	681a      	ldr	r2, [r3, #0]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4413      	add	r3, r2
 8000a16:	4a05      	ldr	r2, [pc, #20]	@ (8000a2c <_sbrk+0x64>)
 8000a18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a1a:	68fb      	ldr	r3, [r7, #12]
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	3718      	adds	r7, #24
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	20005000 	.word	0x20005000
 8000a28:	00000400 	.word	0x00000400
 8000a2c:	200002b0 	.word	0x200002b0
 8000a30:	20000400 	.word	0x20000400

08000a34 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a38:	bf00      	nop
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bc80      	pop	{r7}
 8000a3e:	4770      	bx	lr

08000a40 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a40:	f7ff fff8 	bl	8000a34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a44:	480b      	ldr	r0, [pc, #44]	@ (8000a74 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000a46:	490c      	ldr	r1, [pc, #48]	@ (8000a78 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000a48:	4a0c      	ldr	r2, [pc, #48]	@ (8000a7c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000a4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a4c:	e002      	b.n	8000a54 <LoopCopyDataInit>

08000a4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a52:	3304      	adds	r3, #4

08000a54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a58:	d3f9      	bcc.n	8000a4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a5a:	4a09      	ldr	r2, [pc, #36]	@ (8000a80 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000a5c:	4c09      	ldr	r4, [pc, #36]	@ (8000a84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a60:	e001      	b.n	8000a66 <LoopFillZerobss>

08000a62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a64:	3204      	adds	r2, #4

08000a66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a68:	d3fb      	bcc.n	8000a62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a6a:	f001 ff47 	bl	80028fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a6e:	f7ff fcb7 	bl	80003e0 <main>
  bx lr
 8000a72:	4770      	bx	lr
  ldr r0, =_sdata
 8000a74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a78:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8000a7c:	08003e90 	.word	0x08003e90
  ldr r2, =_sbss
 8000a80:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8000a84:	20000400 	.word	0x20000400

08000a88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a88:	e7fe      	b.n	8000a88 <ADC1_2_IRQHandler>
	...

08000a8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a90:	4b08      	ldr	r3, [pc, #32]	@ (8000ab4 <HAL_Init+0x28>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a07      	ldr	r2, [pc, #28]	@ (8000ab4 <HAL_Init+0x28>)
 8000a96:	f043 0310 	orr.w	r3, r3, #16
 8000a9a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a9c:	2003      	movs	r0, #3
 8000a9e:	f000 f947 	bl	8000d30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aa2:	200f      	movs	r0, #15
 8000aa4:	f000 f808 	bl	8000ab8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000aa8:	f7ff fec4 	bl	8000834 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aac:	2300      	movs	r3, #0
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40022000 	.word	0x40022000

08000ab8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ac0:	4b12      	ldr	r3, [pc, #72]	@ (8000b0c <HAL_InitTick+0x54>)
 8000ac2:	681a      	ldr	r2, [r3, #0]
 8000ac4:	4b12      	ldr	r3, [pc, #72]	@ (8000b10 <HAL_InitTick+0x58>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	4619      	mov	r1, r3
 8000aca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ace:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f000 f95f 	bl	8000d9a <HAL_SYSTICK_Config>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	e00e      	b.n	8000b04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	2b0f      	cmp	r3, #15
 8000aea:	d80a      	bhi.n	8000b02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aec:	2200      	movs	r2, #0
 8000aee:	6879      	ldr	r1, [r7, #4]
 8000af0:	f04f 30ff 	mov.w	r0, #4294967295
 8000af4:	f000 f927 	bl	8000d46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000af8:	4a06      	ldr	r2, [pc, #24]	@ (8000b14 <HAL_InitTick+0x5c>)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000afe:	2300      	movs	r3, #0
 8000b00:	e000      	b.n	8000b04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b02:	2301      	movs	r3, #1
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	3708      	adds	r7, #8
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	20000030 	.word	0x20000030
 8000b10:	20000038 	.word	0x20000038
 8000b14:	20000034 	.word	0x20000034

08000b18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b1c:	4b05      	ldr	r3, [pc, #20]	@ (8000b34 <HAL_IncTick+0x1c>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	461a      	mov	r2, r3
 8000b22:	4b05      	ldr	r3, [pc, #20]	@ (8000b38 <HAL_IncTick+0x20>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4413      	add	r3, r2
 8000b28:	4a03      	ldr	r2, [pc, #12]	@ (8000b38 <HAL_IncTick+0x20>)
 8000b2a:	6013      	str	r3, [r2, #0]
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bc80      	pop	{r7}
 8000b32:	4770      	bx	lr
 8000b34:	20000038 	.word	0x20000038
 8000b38:	200002b4 	.word	0x200002b4

08000b3c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b40:	4b02      	ldr	r3, [pc, #8]	@ (8000b4c <HAL_GetTick+0x10>)
 8000b42:	681b      	ldr	r3, [r3, #0]
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bc80      	pop	{r7}
 8000b4a:	4770      	bx	lr
 8000b4c:	200002b4 	.word	0x200002b4

08000b50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b58:	f7ff fff0 	bl	8000b3c <HAL_GetTick>
 8000b5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b68:	d005      	beq.n	8000b76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b6a:	4b0a      	ldr	r3, [pc, #40]	@ (8000b94 <HAL_Delay+0x44>)
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	461a      	mov	r2, r3
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	4413      	add	r3, r2
 8000b74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b76:	bf00      	nop
 8000b78:	f7ff ffe0 	bl	8000b3c <HAL_GetTick>
 8000b7c:	4602      	mov	r2, r0
 8000b7e:	68bb      	ldr	r3, [r7, #8]
 8000b80:	1ad3      	subs	r3, r2, r3
 8000b82:	68fa      	ldr	r2, [r7, #12]
 8000b84:	429a      	cmp	r2, r3
 8000b86:	d8f7      	bhi.n	8000b78 <HAL_Delay+0x28>
  {
  }
}
 8000b88:	bf00      	nop
 8000b8a:	bf00      	nop
 8000b8c:	3710      	adds	r7, #16
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	20000038 	.word	0x20000038

08000b98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b085      	sub	sp, #20
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	f003 0307 	and.w	r3, r3, #7
 8000ba6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ba8:	4b0c      	ldr	r3, [pc, #48]	@ (8000bdc <__NVIC_SetPriorityGrouping+0x44>)
 8000baa:	68db      	ldr	r3, [r3, #12]
 8000bac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bae:	68ba      	ldr	r2, [r7, #8]
 8000bb0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bc0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000bc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bca:	4a04      	ldr	r2, [pc, #16]	@ (8000bdc <__NVIC_SetPriorityGrouping+0x44>)
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	60d3      	str	r3, [r2, #12]
}
 8000bd0:	bf00      	nop
 8000bd2:	3714      	adds	r7, #20
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bc80      	pop	{r7}
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	e000ed00 	.word	0xe000ed00

08000be0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000be4:	4b04      	ldr	r3, [pc, #16]	@ (8000bf8 <__NVIC_GetPriorityGrouping+0x18>)
 8000be6:	68db      	ldr	r3, [r3, #12]
 8000be8:	0a1b      	lsrs	r3, r3, #8
 8000bea:	f003 0307 	and.w	r3, r3, #7
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bc80      	pop	{r7}
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	e000ed00 	.word	0xe000ed00

08000bfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	4603      	mov	r3, r0
 8000c04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	db0b      	blt.n	8000c26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c0e:	79fb      	ldrb	r3, [r7, #7]
 8000c10:	f003 021f 	and.w	r2, r3, #31
 8000c14:	4906      	ldr	r1, [pc, #24]	@ (8000c30 <__NVIC_EnableIRQ+0x34>)
 8000c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1a:	095b      	lsrs	r3, r3, #5
 8000c1c:	2001      	movs	r0, #1
 8000c1e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c26:	bf00      	nop
 8000c28:	370c      	adds	r7, #12
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bc80      	pop	{r7}
 8000c2e:	4770      	bx	lr
 8000c30:	e000e100 	.word	0xe000e100

08000c34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	6039      	str	r1, [r7, #0]
 8000c3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	db0a      	blt.n	8000c5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	b2da      	uxtb	r2, r3
 8000c4c:	490c      	ldr	r1, [pc, #48]	@ (8000c80 <__NVIC_SetPriority+0x4c>)
 8000c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c52:	0112      	lsls	r2, r2, #4
 8000c54:	b2d2      	uxtb	r2, r2
 8000c56:	440b      	add	r3, r1
 8000c58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c5c:	e00a      	b.n	8000c74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	b2da      	uxtb	r2, r3
 8000c62:	4908      	ldr	r1, [pc, #32]	@ (8000c84 <__NVIC_SetPriority+0x50>)
 8000c64:	79fb      	ldrb	r3, [r7, #7]
 8000c66:	f003 030f 	and.w	r3, r3, #15
 8000c6a:	3b04      	subs	r3, #4
 8000c6c:	0112      	lsls	r2, r2, #4
 8000c6e:	b2d2      	uxtb	r2, r2
 8000c70:	440b      	add	r3, r1
 8000c72:	761a      	strb	r2, [r3, #24]
}
 8000c74:	bf00      	nop
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bc80      	pop	{r7}
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	e000e100 	.word	0xe000e100
 8000c84:	e000ed00 	.word	0xe000ed00

08000c88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b089      	sub	sp, #36	@ 0x24
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	60f8      	str	r0, [r7, #12]
 8000c90:	60b9      	str	r1, [r7, #8]
 8000c92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	f003 0307 	and.w	r3, r3, #7
 8000c9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c9c:	69fb      	ldr	r3, [r7, #28]
 8000c9e:	f1c3 0307 	rsb	r3, r3, #7
 8000ca2:	2b04      	cmp	r3, #4
 8000ca4:	bf28      	it	cs
 8000ca6:	2304      	movcs	r3, #4
 8000ca8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000caa:	69fb      	ldr	r3, [r7, #28]
 8000cac:	3304      	adds	r3, #4
 8000cae:	2b06      	cmp	r3, #6
 8000cb0:	d902      	bls.n	8000cb8 <NVIC_EncodePriority+0x30>
 8000cb2:	69fb      	ldr	r3, [r7, #28]
 8000cb4:	3b03      	subs	r3, #3
 8000cb6:	e000      	b.n	8000cba <NVIC_EncodePriority+0x32>
 8000cb8:	2300      	movs	r3, #0
 8000cba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8000cc0:	69bb      	ldr	r3, [r7, #24]
 8000cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc6:	43da      	mvns	r2, r3
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	401a      	ands	r2, r3
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cd0:	f04f 31ff 	mov.w	r1, #4294967295
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cda:	43d9      	mvns	r1, r3
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce0:	4313      	orrs	r3, r2
         );
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3724      	adds	r7, #36	@ 0x24
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bc80      	pop	{r7}
 8000cea:	4770      	bx	lr

08000cec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	3b01      	subs	r3, #1
 8000cf8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000cfc:	d301      	bcc.n	8000d02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cfe:	2301      	movs	r3, #1
 8000d00:	e00f      	b.n	8000d22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d02:	4a0a      	ldr	r2, [pc, #40]	@ (8000d2c <SysTick_Config+0x40>)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	3b01      	subs	r3, #1
 8000d08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d0a:	210f      	movs	r1, #15
 8000d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d10:	f7ff ff90 	bl	8000c34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d14:	4b05      	ldr	r3, [pc, #20]	@ (8000d2c <SysTick_Config+0x40>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d1a:	4b04      	ldr	r3, [pc, #16]	@ (8000d2c <SysTick_Config+0x40>)
 8000d1c:	2207      	movs	r2, #7
 8000d1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d20:	2300      	movs	r3, #0
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	e000e010 	.word	0xe000e010

08000d30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d38:	6878      	ldr	r0, [r7, #4]
 8000d3a:	f7ff ff2d 	bl	8000b98 <__NVIC_SetPriorityGrouping>
}
 8000d3e:	bf00      	nop
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d46:	b580      	push	{r7, lr}
 8000d48:	b086      	sub	sp, #24
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	60b9      	str	r1, [r7, #8]
 8000d50:	607a      	str	r2, [r7, #4]
 8000d52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d54:	2300      	movs	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d58:	f7ff ff42 	bl	8000be0 <__NVIC_GetPriorityGrouping>
 8000d5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d5e:	687a      	ldr	r2, [r7, #4]
 8000d60:	68b9      	ldr	r1, [r7, #8]
 8000d62:	6978      	ldr	r0, [r7, #20]
 8000d64:	f7ff ff90 	bl	8000c88 <NVIC_EncodePriority>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d6e:	4611      	mov	r1, r2
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff ff5f 	bl	8000c34 <__NVIC_SetPriority>
}
 8000d76:	bf00      	nop
 8000d78:	3718      	adds	r7, #24
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}

08000d7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	b082      	sub	sp, #8
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	4603      	mov	r3, r0
 8000d86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff ff35 	bl	8000bfc <__NVIC_EnableIRQ>
}
 8000d92:	bf00      	nop
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b082      	sub	sp, #8
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000da2:	6878      	ldr	r0, [r7, #4]
 8000da4:	f7ff ffa2 	bl	8000cec <SysTick_Config>
 8000da8:	4603      	mov	r3, r0
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}

08000db2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000db2:	b480      	push	{r7}
 8000db4:	b085      	sub	sp, #20
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	2b02      	cmp	r3, #2
 8000dc8:	d008      	beq.n	8000ddc <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2204      	movs	r2, #4
 8000dce:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	e020      	b.n	8000e1e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f022 020e 	bic.w	r2, r2, #14
 8000dea:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f022 0201 	bic.w	r2, r2, #1
 8000dfa:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e04:	2101      	movs	r1, #1
 8000e06:	fa01 f202 	lsl.w	r2, r1, r2
 8000e0a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2201      	movs	r2, #1
 8000e10:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2200      	movs	r2, #0
 8000e18:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3714      	adds	r7, #20
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bc80      	pop	{r7}
 8000e26:	4770      	bx	lr

08000e28 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e30:	2300      	movs	r3, #0
 8000e32:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	2b02      	cmp	r3, #2
 8000e3e:	d005      	beq.n	8000e4c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2204      	movs	r2, #4
 8000e44:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000e46:	2301      	movs	r3, #1
 8000e48:	73fb      	strb	r3, [r7, #15]
 8000e4a:	e051      	b.n	8000ef0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f022 020e 	bic.w	r2, r2, #14
 8000e5a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f022 0201 	bic.w	r2, r2, #1
 8000e6a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a22      	ldr	r2, [pc, #136]	@ (8000efc <HAL_DMA_Abort_IT+0xd4>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d029      	beq.n	8000eca <HAL_DMA_Abort_IT+0xa2>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4a21      	ldr	r2, [pc, #132]	@ (8000f00 <HAL_DMA_Abort_IT+0xd8>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d022      	beq.n	8000ec6 <HAL_DMA_Abort_IT+0x9e>
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a1f      	ldr	r2, [pc, #124]	@ (8000f04 <HAL_DMA_Abort_IT+0xdc>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d01a      	beq.n	8000ec0 <HAL_DMA_Abort_IT+0x98>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a1e      	ldr	r2, [pc, #120]	@ (8000f08 <HAL_DMA_Abort_IT+0xe0>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d012      	beq.n	8000eba <HAL_DMA_Abort_IT+0x92>
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a1c      	ldr	r2, [pc, #112]	@ (8000f0c <HAL_DMA_Abort_IT+0xe4>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d00a      	beq.n	8000eb4 <HAL_DMA_Abort_IT+0x8c>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4a1b      	ldr	r2, [pc, #108]	@ (8000f10 <HAL_DMA_Abort_IT+0xe8>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d102      	bne.n	8000eae <HAL_DMA_Abort_IT+0x86>
 8000ea8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000eac:	e00e      	b.n	8000ecc <HAL_DMA_Abort_IT+0xa4>
 8000eae:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000eb2:	e00b      	b.n	8000ecc <HAL_DMA_Abort_IT+0xa4>
 8000eb4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000eb8:	e008      	b.n	8000ecc <HAL_DMA_Abort_IT+0xa4>
 8000eba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ebe:	e005      	b.n	8000ecc <HAL_DMA_Abort_IT+0xa4>
 8000ec0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ec4:	e002      	b.n	8000ecc <HAL_DMA_Abort_IT+0xa4>
 8000ec6:	2310      	movs	r3, #16
 8000ec8:	e000      	b.n	8000ecc <HAL_DMA_Abort_IT+0xa4>
 8000eca:	2301      	movs	r3, #1
 8000ecc:	4a11      	ldr	r2, [pc, #68]	@ (8000f14 <HAL_DMA_Abort_IT+0xec>)
 8000ece:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2200      	movs	r2, #0
 8000edc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d003      	beq.n	8000ef0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000eec:	6878      	ldr	r0, [r7, #4]
 8000eee:	4798      	blx	r3
    } 
  }
  return status;
 8000ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3710      	adds	r7, #16
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40020008 	.word	0x40020008
 8000f00:	4002001c 	.word	0x4002001c
 8000f04:	40020030 	.word	0x40020030
 8000f08:	40020044 	.word	0x40020044
 8000f0c:	40020058 	.word	0x40020058
 8000f10:	4002006c 	.word	0x4002006c
 8000f14:	40020000 	.word	0x40020000

08000f18 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b08b      	sub	sp, #44	@ 0x2c
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f22:	2300      	movs	r3, #0
 8000f24:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f26:	2300      	movs	r3, #0
 8000f28:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f2a:	e169      	b.n	8001200 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	69fa      	ldr	r2, [r7, #28]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	f040 8158 	bne.w	80011fa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	4a9a      	ldr	r2, [pc, #616]	@ (80011b8 <HAL_GPIO_Init+0x2a0>)
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d05e      	beq.n	8001012 <HAL_GPIO_Init+0xfa>
 8000f54:	4a98      	ldr	r2, [pc, #608]	@ (80011b8 <HAL_GPIO_Init+0x2a0>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d875      	bhi.n	8001046 <HAL_GPIO_Init+0x12e>
 8000f5a:	4a98      	ldr	r2, [pc, #608]	@ (80011bc <HAL_GPIO_Init+0x2a4>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d058      	beq.n	8001012 <HAL_GPIO_Init+0xfa>
 8000f60:	4a96      	ldr	r2, [pc, #600]	@ (80011bc <HAL_GPIO_Init+0x2a4>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d86f      	bhi.n	8001046 <HAL_GPIO_Init+0x12e>
 8000f66:	4a96      	ldr	r2, [pc, #600]	@ (80011c0 <HAL_GPIO_Init+0x2a8>)
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d052      	beq.n	8001012 <HAL_GPIO_Init+0xfa>
 8000f6c:	4a94      	ldr	r2, [pc, #592]	@ (80011c0 <HAL_GPIO_Init+0x2a8>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d869      	bhi.n	8001046 <HAL_GPIO_Init+0x12e>
 8000f72:	4a94      	ldr	r2, [pc, #592]	@ (80011c4 <HAL_GPIO_Init+0x2ac>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d04c      	beq.n	8001012 <HAL_GPIO_Init+0xfa>
 8000f78:	4a92      	ldr	r2, [pc, #584]	@ (80011c4 <HAL_GPIO_Init+0x2ac>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d863      	bhi.n	8001046 <HAL_GPIO_Init+0x12e>
 8000f7e:	4a92      	ldr	r2, [pc, #584]	@ (80011c8 <HAL_GPIO_Init+0x2b0>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d046      	beq.n	8001012 <HAL_GPIO_Init+0xfa>
 8000f84:	4a90      	ldr	r2, [pc, #576]	@ (80011c8 <HAL_GPIO_Init+0x2b0>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d85d      	bhi.n	8001046 <HAL_GPIO_Init+0x12e>
 8000f8a:	2b12      	cmp	r3, #18
 8000f8c:	d82a      	bhi.n	8000fe4 <HAL_GPIO_Init+0xcc>
 8000f8e:	2b12      	cmp	r3, #18
 8000f90:	d859      	bhi.n	8001046 <HAL_GPIO_Init+0x12e>
 8000f92:	a201      	add	r2, pc, #4	@ (adr r2, 8000f98 <HAL_GPIO_Init+0x80>)
 8000f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f98:	08001013 	.word	0x08001013
 8000f9c:	08000fed 	.word	0x08000fed
 8000fa0:	08000fff 	.word	0x08000fff
 8000fa4:	08001041 	.word	0x08001041
 8000fa8:	08001047 	.word	0x08001047
 8000fac:	08001047 	.word	0x08001047
 8000fb0:	08001047 	.word	0x08001047
 8000fb4:	08001047 	.word	0x08001047
 8000fb8:	08001047 	.word	0x08001047
 8000fbc:	08001047 	.word	0x08001047
 8000fc0:	08001047 	.word	0x08001047
 8000fc4:	08001047 	.word	0x08001047
 8000fc8:	08001047 	.word	0x08001047
 8000fcc:	08001047 	.word	0x08001047
 8000fd0:	08001047 	.word	0x08001047
 8000fd4:	08001047 	.word	0x08001047
 8000fd8:	08001047 	.word	0x08001047
 8000fdc:	08000ff5 	.word	0x08000ff5
 8000fe0:	08001009 	.word	0x08001009
 8000fe4:	4a79      	ldr	r2, [pc, #484]	@ (80011cc <HAL_GPIO_Init+0x2b4>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d013      	beq.n	8001012 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000fea:	e02c      	b.n	8001046 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	623b      	str	r3, [r7, #32]
          break;
 8000ff2:	e029      	b.n	8001048 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	3304      	adds	r3, #4
 8000ffa:	623b      	str	r3, [r7, #32]
          break;
 8000ffc:	e024      	b.n	8001048 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	68db      	ldr	r3, [r3, #12]
 8001002:	3308      	adds	r3, #8
 8001004:	623b      	str	r3, [r7, #32]
          break;
 8001006:	e01f      	b.n	8001048 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	330c      	adds	r3, #12
 800100e:	623b      	str	r3, [r7, #32]
          break;
 8001010:	e01a      	b.n	8001048 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	689b      	ldr	r3, [r3, #8]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d102      	bne.n	8001020 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800101a:	2304      	movs	r3, #4
 800101c:	623b      	str	r3, [r7, #32]
          break;
 800101e:	e013      	b.n	8001048 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	689b      	ldr	r3, [r3, #8]
 8001024:	2b01      	cmp	r3, #1
 8001026:	d105      	bne.n	8001034 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001028:	2308      	movs	r3, #8
 800102a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	69fa      	ldr	r2, [r7, #28]
 8001030:	611a      	str	r2, [r3, #16]
          break;
 8001032:	e009      	b.n	8001048 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001034:	2308      	movs	r3, #8
 8001036:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	69fa      	ldr	r2, [r7, #28]
 800103c:	615a      	str	r2, [r3, #20]
          break;
 800103e:	e003      	b.n	8001048 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001040:	2300      	movs	r3, #0
 8001042:	623b      	str	r3, [r7, #32]
          break;
 8001044:	e000      	b.n	8001048 <HAL_GPIO_Init+0x130>
          break;
 8001046:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001048:	69bb      	ldr	r3, [r7, #24]
 800104a:	2bff      	cmp	r3, #255	@ 0xff
 800104c:	d801      	bhi.n	8001052 <HAL_GPIO_Init+0x13a>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	e001      	b.n	8001056 <HAL_GPIO_Init+0x13e>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	3304      	adds	r3, #4
 8001056:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001058:	69bb      	ldr	r3, [r7, #24]
 800105a:	2bff      	cmp	r3, #255	@ 0xff
 800105c:	d802      	bhi.n	8001064 <HAL_GPIO_Init+0x14c>
 800105e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	e002      	b.n	800106a <HAL_GPIO_Init+0x152>
 8001064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001066:	3b08      	subs	r3, #8
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	210f      	movs	r1, #15
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	fa01 f303 	lsl.w	r3, r1, r3
 8001078:	43db      	mvns	r3, r3
 800107a:	401a      	ands	r2, r3
 800107c:	6a39      	ldr	r1, [r7, #32]
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	fa01 f303 	lsl.w	r3, r1, r3
 8001084:	431a      	orrs	r2, r3
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001092:	2b00      	cmp	r3, #0
 8001094:	f000 80b1 	beq.w	80011fa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001098:	4b4d      	ldr	r3, [pc, #308]	@ (80011d0 <HAL_GPIO_Init+0x2b8>)
 800109a:	699b      	ldr	r3, [r3, #24]
 800109c:	4a4c      	ldr	r2, [pc, #304]	@ (80011d0 <HAL_GPIO_Init+0x2b8>)
 800109e:	f043 0301 	orr.w	r3, r3, #1
 80010a2:	6193      	str	r3, [r2, #24]
 80010a4:	4b4a      	ldr	r3, [pc, #296]	@ (80011d0 <HAL_GPIO_Init+0x2b8>)
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	f003 0301 	and.w	r3, r3, #1
 80010ac:	60bb      	str	r3, [r7, #8]
 80010ae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80010b0:	4a48      	ldr	r2, [pc, #288]	@ (80011d4 <HAL_GPIO_Init+0x2bc>)
 80010b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010b4:	089b      	lsrs	r3, r3, #2
 80010b6:	3302      	adds	r3, #2
 80010b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010bc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80010be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010c0:	f003 0303 	and.w	r3, r3, #3
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	220f      	movs	r2, #15
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	43db      	mvns	r3, r3
 80010ce:	68fa      	ldr	r2, [r7, #12]
 80010d0:	4013      	ands	r3, r2
 80010d2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	4a40      	ldr	r2, [pc, #256]	@ (80011d8 <HAL_GPIO_Init+0x2c0>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d013      	beq.n	8001104 <HAL_GPIO_Init+0x1ec>
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	4a3f      	ldr	r2, [pc, #252]	@ (80011dc <HAL_GPIO_Init+0x2c4>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d00d      	beq.n	8001100 <HAL_GPIO_Init+0x1e8>
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	4a3e      	ldr	r2, [pc, #248]	@ (80011e0 <HAL_GPIO_Init+0x2c8>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d007      	beq.n	80010fc <HAL_GPIO_Init+0x1e4>
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	4a3d      	ldr	r2, [pc, #244]	@ (80011e4 <HAL_GPIO_Init+0x2cc>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d101      	bne.n	80010f8 <HAL_GPIO_Init+0x1e0>
 80010f4:	2303      	movs	r3, #3
 80010f6:	e006      	b.n	8001106 <HAL_GPIO_Init+0x1ee>
 80010f8:	2304      	movs	r3, #4
 80010fa:	e004      	b.n	8001106 <HAL_GPIO_Init+0x1ee>
 80010fc:	2302      	movs	r3, #2
 80010fe:	e002      	b.n	8001106 <HAL_GPIO_Init+0x1ee>
 8001100:	2301      	movs	r3, #1
 8001102:	e000      	b.n	8001106 <HAL_GPIO_Init+0x1ee>
 8001104:	2300      	movs	r3, #0
 8001106:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001108:	f002 0203 	and.w	r2, r2, #3
 800110c:	0092      	lsls	r2, r2, #2
 800110e:	4093      	lsls	r3, r2
 8001110:	68fa      	ldr	r2, [r7, #12]
 8001112:	4313      	orrs	r3, r2
 8001114:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001116:	492f      	ldr	r1, [pc, #188]	@ (80011d4 <HAL_GPIO_Init+0x2bc>)
 8001118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800111a:	089b      	lsrs	r3, r3, #2
 800111c:	3302      	adds	r3, #2
 800111e:	68fa      	ldr	r2, [r7, #12]
 8001120:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800112c:	2b00      	cmp	r3, #0
 800112e:	d006      	beq.n	800113e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001130:	4b2d      	ldr	r3, [pc, #180]	@ (80011e8 <HAL_GPIO_Init+0x2d0>)
 8001132:	689a      	ldr	r2, [r3, #8]
 8001134:	492c      	ldr	r1, [pc, #176]	@ (80011e8 <HAL_GPIO_Init+0x2d0>)
 8001136:	69bb      	ldr	r3, [r7, #24]
 8001138:	4313      	orrs	r3, r2
 800113a:	608b      	str	r3, [r1, #8]
 800113c:	e006      	b.n	800114c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800113e:	4b2a      	ldr	r3, [pc, #168]	@ (80011e8 <HAL_GPIO_Init+0x2d0>)
 8001140:	689a      	ldr	r2, [r3, #8]
 8001142:	69bb      	ldr	r3, [r7, #24]
 8001144:	43db      	mvns	r3, r3
 8001146:	4928      	ldr	r1, [pc, #160]	@ (80011e8 <HAL_GPIO_Init+0x2d0>)
 8001148:	4013      	ands	r3, r2
 800114a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001154:	2b00      	cmp	r3, #0
 8001156:	d006      	beq.n	8001166 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001158:	4b23      	ldr	r3, [pc, #140]	@ (80011e8 <HAL_GPIO_Init+0x2d0>)
 800115a:	68da      	ldr	r2, [r3, #12]
 800115c:	4922      	ldr	r1, [pc, #136]	@ (80011e8 <HAL_GPIO_Init+0x2d0>)
 800115e:	69bb      	ldr	r3, [r7, #24]
 8001160:	4313      	orrs	r3, r2
 8001162:	60cb      	str	r3, [r1, #12]
 8001164:	e006      	b.n	8001174 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001166:	4b20      	ldr	r3, [pc, #128]	@ (80011e8 <HAL_GPIO_Init+0x2d0>)
 8001168:	68da      	ldr	r2, [r3, #12]
 800116a:	69bb      	ldr	r3, [r7, #24]
 800116c:	43db      	mvns	r3, r3
 800116e:	491e      	ldr	r1, [pc, #120]	@ (80011e8 <HAL_GPIO_Init+0x2d0>)
 8001170:	4013      	ands	r3, r2
 8001172:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800117c:	2b00      	cmp	r3, #0
 800117e:	d006      	beq.n	800118e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001180:	4b19      	ldr	r3, [pc, #100]	@ (80011e8 <HAL_GPIO_Init+0x2d0>)
 8001182:	685a      	ldr	r2, [r3, #4]
 8001184:	4918      	ldr	r1, [pc, #96]	@ (80011e8 <HAL_GPIO_Init+0x2d0>)
 8001186:	69bb      	ldr	r3, [r7, #24]
 8001188:	4313      	orrs	r3, r2
 800118a:	604b      	str	r3, [r1, #4]
 800118c:	e006      	b.n	800119c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800118e:	4b16      	ldr	r3, [pc, #88]	@ (80011e8 <HAL_GPIO_Init+0x2d0>)
 8001190:	685a      	ldr	r2, [r3, #4]
 8001192:	69bb      	ldr	r3, [r7, #24]
 8001194:	43db      	mvns	r3, r3
 8001196:	4914      	ldr	r1, [pc, #80]	@ (80011e8 <HAL_GPIO_Init+0x2d0>)
 8001198:	4013      	ands	r3, r2
 800119a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d021      	beq.n	80011ec <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80011a8:	4b0f      	ldr	r3, [pc, #60]	@ (80011e8 <HAL_GPIO_Init+0x2d0>)
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	490e      	ldr	r1, [pc, #56]	@ (80011e8 <HAL_GPIO_Init+0x2d0>)
 80011ae:	69bb      	ldr	r3, [r7, #24]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	600b      	str	r3, [r1, #0]
 80011b4:	e021      	b.n	80011fa <HAL_GPIO_Init+0x2e2>
 80011b6:	bf00      	nop
 80011b8:	10320000 	.word	0x10320000
 80011bc:	10310000 	.word	0x10310000
 80011c0:	10220000 	.word	0x10220000
 80011c4:	10210000 	.word	0x10210000
 80011c8:	10120000 	.word	0x10120000
 80011cc:	10110000 	.word	0x10110000
 80011d0:	40021000 	.word	0x40021000
 80011d4:	40010000 	.word	0x40010000
 80011d8:	40010800 	.word	0x40010800
 80011dc:	40010c00 	.word	0x40010c00
 80011e0:	40011000 	.word	0x40011000
 80011e4:	40011400 	.word	0x40011400
 80011e8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80011ec:	4b0b      	ldr	r3, [pc, #44]	@ (800121c <HAL_GPIO_Init+0x304>)
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	43db      	mvns	r3, r3
 80011f4:	4909      	ldr	r1, [pc, #36]	@ (800121c <HAL_GPIO_Init+0x304>)
 80011f6:	4013      	ands	r3, r2
 80011f8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80011fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011fc:	3301      	adds	r3, #1
 80011fe:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001206:	fa22 f303 	lsr.w	r3, r2, r3
 800120a:	2b00      	cmp	r3, #0
 800120c:	f47f ae8e 	bne.w	8000f2c <HAL_GPIO_Init+0x14>
  }
}
 8001210:	bf00      	nop
 8001212:	bf00      	nop
 8001214:	372c      	adds	r7, #44	@ 0x2c
 8001216:	46bd      	mov	sp, r7
 8001218:	bc80      	pop	{r7}
 800121a:	4770      	bx	lr
 800121c:	40010400 	.word	0x40010400

08001220 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	460b      	mov	r3, r1
 800122a:	807b      	strh	r3, [r7, #2]
 800122c:	4613      	mov	r3, r2
 800122e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001230:	787b      	ldrb	r3, [r7, #1]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d003      	beq.n	800123e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001236:	887a      	ldrh	r2, [r7, #2]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800123c:	e003      	b.n	8001246 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800123e:	887b      	ldrh	r3, [r7, #2]
 8001240:	041a      	lsls	r2, r3, #16
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	611a      	str	r2, [r3, #16]
}
 8001246:	bf00      	nop
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	bc80      	pop	{r7}
 800124e:	4770      	bx	lr

08001250 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001250:	b480      	push	{r7}
 8001252:	b085      	sub	sp, #20
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	460b      	mov	r3, r1
 800125a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001262:	887a      	ldrh	r2, [r7, #2]
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	4013      	ands	r3, r2
 8001268:	041a      	lsls	r2, r3, #16
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	43d9      	mvns	r1, r3
 800126e:	887b      	ldrh	r3, [r7, #2]
 8001270:	400b      	ands	r3, r1
 8001272:	431a      	orrs	r2, r3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	611a      	str	r2, [r3, #16]
}
 8001278:	bf00      	nop
 800127a:	3714      	adds	r7, #20
 800127c:	46bd      	mov	sp, r7
 800127e:	bc80      	pop	{r7}
 8001280:	4770      	bx	lr
	...

08001284 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d101      	bne.n	8001296 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e272      	b.n	800177c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	2b00      	cmp	r3, #0
 80012a0:	f000 8087 	beq.w	80013b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80012a4:	4b92      	ldr	r3, [pc, #584]	@ (80014f0 <HAL_RCC_OscConfig+0x26c>)
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f003 030c 	and.w	r3, r3, #12
 80012ac:	2b04      	cmp	r3, #4
 80012ae:	d00c      	beq.n	80012ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80012b0:	4b8f      	ldr	r3, [pc, #572]	@ (80014f0 <HAL_RCC_OscConfig+0x26c>)
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f003 030c 	and.w	r3, r3, #12
 80012b8:	2b08      	cmp	r3, #8
 80012ba:	d112      	bne.n	80012e2 <HAL_RCC_OscConfig+0x5e>
 80012bc:	4b8c      	ldr	r3, [pc, #560]	@ (80014f0 <HAL_RCC_OscConfig+0x26c>)
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012c8:	d10b      	bne.n	80012e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012ca:	4b89      	ldr	r3, [pc, #548]	@ (80014f0 <HAL_RCC_OscConfig+0x26c>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d06c      	beq.n	80013b0 <HAL_RCC_OscConfig+0x12c>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d168      	bne.n	80013b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e24c      	b.n	800177c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012ea:	d106      	bne.n	80012fa <HAL_RCC_OscConfig+0x76>
 80012ec:	4b80      	ldr	r3, [pc, #512]	@ (80014f0 <HAL_RCC_OscConfig+0x26c>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a7f      	ldr	r2, [pc, #508]	@ (80014f0 <HAL_RCC_OscConfig+0x26c>)
 80012f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012f6:	6013      	str	r3, [r2, #0]
 80012f8:	e02e      	b.n	8001358 <HAL_RCC_OscConfig+0xd4>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d10c      	bne.n	800131c <HAL_RCC_OscConfig+0x98>
 8001302:	4b7b      	ldr	r3, [pc, #492]	@ (80014f0 <HAL_RCC_OscConfig+0x26c>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a7a      	ldr	r2, [pc, #488]	@ (80014f0 <HAL_RCC_OscConfig+0x26c>)
 8001308:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800130c:	6013      	str	r3, [r2, #0]
 800130e:	4b78      	ldr	r3, [pc, #480]	@ (80014f0 <HAL_RCC_OscConfig+0x26c>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a77      	ldr	r2, [pc, #476]	@ (80014f0 <HAL_RCC_OscConfig+0x26c>)
 8001314:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001318:	6013      	str	r3, [r2, #0]
 800131a:	e01d      	b.n	8001358 <HAL_RCC_OscConfig+0xd4>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001324:	d10c      	bne.n	8001340 <HAL_RCC_OscConfig+0xbc>
 8001326:	4b72      	ldr	r3, [pc, #456]	@ (80014f0 <HAL_RCC_OscConfig+0x26c>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a71      	ldr	r2, [pc, #452]	@ (80014f0 <HAL_RCC_OscConfig+0x26c>)
 800132c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001330:	6013      	str	r3, [r2, #0]
 8001332:	4b6f      	ldr	r3, [pc, #444]	@ (80014f0 <HAL_RCC_OscConfig+0x26c>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a6e      	ldr	r2, [pc, #440]	@ (80014f0 <HAL_RCC_OscConfig+0x26c>)
 8001338:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800133c:	6013      	str	r3, [r2, #0]
 800133e:	e00b      	b.n	8001358 <HAL_RCC_OscConfig+0xd4>
 8001340:	4b6b      	ldr	r3, [pc, #428]	@ (80014f0 <HAL_RCC_OscConfig+0x26c>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a6a      	ldr	r2, [pc, #424]	@ (80014f0 <HAL_RCC_OscConfig+0x26c>)
 8001346:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800134a:	6013      	str	r3, [r2, #0]
 800134c:	4b68      	ldr	r3, [pc, #416]	@ (80014f0 <HAL_RCC_OscConfig+0x26c>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a67      	ldr	r2, [pc, #412]	@ (80014f0 <HAL_RCC_OscConfig+0x26c>)
 8001352:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001356:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d013      	beq.n	8001388 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001360:	f7ff fbec 	bl	8000b3c <HAL_GetTick>
 8001364:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001366:	e008      	b.n	800137a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001368:	f7ff fbe8 	bl	8000b3c <HAL_GetTick>
 800136c:	4602      	mov	r2, r0
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	2b64      	cmp	r3, #100	@ 0x64
 8001374:	d901      	bls.n	800137a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001376:	2303      	movs	r3, #3
 8001378:	e200      	b.n	800177c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800137a:	4b5d      	ldr	r3, [pc, #372]	@ (80014f0 <HAL_RCC_OscConfig+0x26c>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d0f0      	beq.n	8001368 <HAL_RCC_OscConfig+0xe4>
 8001386:	e014      	b.n	80013b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001388:	f7ff fbd8 	bl	8000b3c <HAL_GetTick>
 800138c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800138e:	e008      	b.n	80013a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001390:	f7ff fbd4 	bl	8000b3c <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	2b64      	cmp	r3, #100	@ 0x64
 800139c:	d901      	bls.n	80013a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800139e:	2303      	movs	r3, #3
 80013a0:	e1ec      	b.n	800177c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013a2:	4b53      	ldr	r3, [pc, #332]	@ (80014f0 <HAL_RCC_OscConfig+0x26c>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d1f0      	bne.n	8001390 <HAL_RCC_OscConfig+0x10c>
 80013ae:	e000      	b.n	80013b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 0302 	and.w	r3, r3, #2
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d063      	beq.n	8001486 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013be:	4b4c      	ldr	r3, [pc, #304]	@ (80014f0 <HAL_RCC_OscConfig+0x26c>)
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f003 030c 	and.w	r3, r3, #12
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d00b      	beq.n	80013e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80013ca:	4b49      	ldr	r3, [pc, #292]	@ (80014f0 <HAL_RCC_OscConfig+0x26c>)
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f003 030c 	and.w	r3, r3, #12
 80013d2:	2b08      	cmp	r3, #8
 80013d4:	d11c      	bne.n	8001410 <HAL_RCC_OscConfig+0x18c>
 80013d6:	4b46      	ldr	r3, [pc, #280]	@ (80014f0 <HAL_RCC_OscConfig+0x26c>)
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d116      	bne.n	8001410 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013e2:	4b43      	ldr	r3, [pc, #268]	@ (80014f0 <HAL_RCC_OscConfig+0x26c>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d005      	beq.n	80013fa <HAL_RCC_OscConfig+0x176>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	691b      	ldr	r3, [r3, #16]
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d001      	beq.n	80013fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e1c0      	b.n	800177c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013fa:	4b3d      	ldr	r3, [pc, #244]	@ (80014f0 <HAL_RCC_OscConfig+0x26c>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	695b      	ldr	r3, [r3, #20]
 8001406:	00db      	lsls	r3, r3, #3
 8001408:	4939      	ldr	r1, [pc, #228]	@ (80014f0 <HAL_RCC_OscConfig+0x26c>)
 800140a:	4313      	orrs	r3, r2
 800140c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800140e:	e03a      	b.n	8001486 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	691b      	ldr	r3, [r3, #16]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d020      	beq.n	800145a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001418:	4b36      	ldr	r3, [pc, #216]	@ (80014f4 <HAL_RCC_OscConfig+0x270>)
 800141a:	2201      	movs	r2, #1
 800141c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800141e:	f7ff fb8d 	bl	8000b3c <HAL_GetTick>
 8001422:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001424:	e008      	b.n	8001438 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001426:	f7ff fb89 	bl	8000b3c <HAL_GetTick>
 800142a:	4602      	mov	r2, r0
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	1ad3      	subs	r3, r2, r3
 8001430:	2b02      	cmp	r3, #2
 8001432:	d901      	bls.n	8001438 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001434:	2303      	movs	r3, #3
 8001436:	e1a1      	b.n	800177c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001438:	4b2d      	ldr	r3, [pc, #180]	@ (80014f0 <HAL_RCC_OscConfig+0x26c>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f003 0302 	and.w	r3, r3, #2
 8001440:	2b00      	cmp	r3, #0
 8001442:	d0f0      	beq.n	8001426 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001444:	4b2a      	ldr	r3, [pc, #168]	@ (80014f0 <HAL_RCC_OscConfig+0x26c>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	695b      	ldr	r3, [r3, #20]
 8001450:	00db      	lsls	r3, r3, #3
 8001452:	4927      	ldr	r1, [pc, #156]	@ (80014f0 <HAL_RCC_OscConfig+0x26c>)
 8001454:	4313      	orrs	r3, r2
 8001456:	600b      	str	r3, [r1, #0]
 8001458:	e015      	b.n	8001486 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800145a:	4b26      	ldr	r3, [pc, #152]	@ (80014f4 <HAL_RCC_OscConfig+0x270>)
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001460:	f7ff fb6c 	bl	8000b3c <HAL_GetTick>
 8001464:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001466:	e008      	b.n	800147a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001468:	f7ff fb68 	bl	8000b3c <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b02      	cmp	r3, #2
 8001474:	d901      	bls.n	800147a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e180      	b.n	800177c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800147a:	4b1d      	ldr	r3, [pc, #116]	@ (80014f0 <HAL_RCC_OscConfig+0x26c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f003 0302 	and.w	r3, r3, #2
 8001482:	2b00      	cmp	r3, #0
 8001484:	d1f0      	bne.n	8001468 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0308 	and.w	r3, r3, #8
 800148e:	2b00      	cmp	r3, #0
 8001490:	d03a      	beq.n	8001508 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	699b      	ldr	r3, [r3, #24]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d019      	beq.n	80014ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800149a:	4b17      	ldr	r3, [pc, #92]	@ (80014f8 <HAL_RCC_OscConfig+0x274>)
 800149c:	2201      	movs	r2, #1
 800149e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014a0:	f7ff fb4c 	bl	8000b3c <HAL_GetTick>
 80014a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014a6:	e008      	b.n	80014ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014a8:	f7ff fb48 	bl	8000b3c <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d901      	bls.n	80014ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80014b6:	2303      	movs	r3, #3
 80014b8:	e160      	b.n	800177c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014ba:	4b0d      	ldr	r3, [pc, #52]	@ (80014f0 <HAL_RCC_OscConfig+0x26c>)
 80014bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014be:	f003 0302 	and.w	r3, r3, #2
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d0f0      	beq.n	80014a8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80014c6:	2001      	movs	r0, #1
 80014c8:	f000 face 	bl	8001a68 <RCC_Delay>
 80014cc:	e01c      	b.n	8001508 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014ce:	4b0a      	ldr	r3, [pc, #40]	@ (80014f8 <HAL_RCC_OscConfig+0x274>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014d4:	f7ff fb32 	bl	8000b3c <HAL_GetTick>
 80014d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014da:	e00f      	b.n	80014fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014dc:	f7ff fb2e 	bl	8000b3c <HAL_GetTick>
 80014e0:	4602      	mov	r2, r0
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d908      	bls.n	80014fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e146      	b.n	800177c <HAL_RCC_OscConfig+0x4f8>
 80014ee:	bf00      	nop
 80014f0:	40021000 	.word	0x40021000
 80014f4:	42420000 	.word	0x42420000
 80014f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014fc:	4b92      	ldr	r3, [pc, #584]	@ (8001748 <HAL_RCC_OscConfig+0x4c4>)
 80014fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001500:	f003 0302 	and.w	r3, r3, #2
 8001504:	2b00      	cmp	r3, #0
 8001506:	d1e9      	bne.n	80014dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f003 0304 	and.w	r3, r3, #4
 8001510:	2b00      	cmp	r3, #0
 8001512:	f000 80a6 	beq.w	8001662 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001516:	2300      	movs	r3, #0
 8001518:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800151a:	4b8b      	ldr	r3, [pc, #556]	@ (8001748 <HAL_RCC_OscConfig+0x4c4>)
 800151c:	69db      	ldr	r3, [r3, #28]
 800151e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d10d      	bne.n	8001542 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001526:	4b88      	ldr	r3, [pc, #544]	@ (8001748 <HAL_RCC_OscConfig+0x4c4>)
 8001528:	69db      	ldr	r3, [r3, #28]
 800152a:	4a87      	ldr	r2, [pc, #540]	@ (8001748 <HAL_RCC_OscConfig+0x4c4>)
 800152c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001530:	61d3      	str	r3, [r2, #28]
 8001532:	4b85      	ldr	r3, [pc, #532]	@ (8001748 <HAL_RCC_OscConfig+0x4c4>)
 8001534:	69db      	ldr	r3, [r3, #28]
 8001536:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800153a:	60bb      	str	r3, [r7, #8]
 800153c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800153e:	2301      	movs	r3, #1
 8001540:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001542:	4b82      	ldr	r3, [pc, #520]	@ (800174c <HAL_RCC_OscConfig+0x4c8>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800154a:	2b00      	cmp	r3, #0
 800154c:	d118      	bne.n	8001580 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800154e:	4b7f      	ldr	r3, [pc, #508]	@ (800174c <HAL_RCC_OscConfig+0x4c8>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a7e      	ldr	r2, [pc, #504]	@ (800174c <HAL_RCC_OscConfig+0x4c8>)
 8001554:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001558:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800155a:	f7ff faef 	bl	8000b3c <HAL_GetTick>
 800155e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001560:	e008      	b.n	8001574 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001562:	f7ff faeb 	bl	8000b3c <HAL_GetTick>
 8001566:	4602      	mov	r2, r0
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	1ad3      	subs	r3, r2, r3
 800156c:	2b64      	cmp	r3, #100	@ 0x64
 800156e:	d901      	bls.n	8001574 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001570:	2303      	movs	r3, #3
 8001572:	e103      	b.n	800177c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001574:	4b75      	ldr	r3, [pc, #468]	@ (800174c <HAL_RCC_OscConfig+0x4c8>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800157c:	2b00      	cmp	r3, #0
 800157e:	d0f0      	beq.n	8001562 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	2b01      	cmp	r3, #1
 8001586:	d106      	bne.n	8001596 <HAL_RCC_OscConfig+0x312>
 8001588:	4b6f      	ldr	r3, [pc, #444]	@ (8001748 <HAL_RCC_OscConfig+0x4c4>)
 800158a:	6a1b      	ldr	r3, [r3, #32]
 800158c:	4a6e      	ldr	r2, [pc, #440]	@ (8001748 <HAL_RCC_OscConfig+0x4c4>)
 800158e:	f043 0301 	orr.w	r3, r3, #1
 8001592:	6213      	str	r3, [r2, #32]
 8001594:	e02d      	b.n	80015f2 <HAL_RCC_OscConfig+0x36e>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	68db      	ldr	r3, [r3, #12]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d10c      	bne.n	80015b8 <HAL_RCC_OscConfig+0x334>
 800159e:	4b6a      	ldr	r3, [pc, #424]	@ (8001748 <HAL_RCC_OscConfig+0x4c4>)
 80015a0:	6a1b      	ldr	r3, [r3, #32]
 80015a2:	4a69      	ldr	r2, [pc, #420]	@ (8001748 <HAL_RCC_OscConfig+0x4c4>)
 80015a4:	f023 0301 	bic.w	r3, r3, #1
 80015a8:	6213      	str	r3, [r2, #32]
 80015aa:	4b67      	ldr	r3, [pc, #412]	@ (8001748 <HAL_RCC_OscConfig+0x4c4>)
 80015ac:	6a1b      	ldr	r3, [r3, #32]
 80015ae:	4a66      	ldr	r2, [pc, #408]	@ (8001748 <HAL_RCC_OscConfig+0x4c4>)
 80015b0:	f023 0304 	bic.w	r3, r3, #4
 80015b4:	6213      	str	r3, [r2, #32]
 80015b6:	e01c      	b.n	80015f2 <HAL_RCC_OscConfig+0x36e>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	2b05      	cmp	r3, #5
 80015be:	d10c      	bne.n	80015da <HAL_RCC_OscConfig+0x356>
 80015c0:	4b61      	ldr	r3, [pc, #388]	@ (8001748 <HAL_RCC_OscConfig+0x4c4>)
 80015c2:	6a1b      	ldr	r3, [r3, #32]
 80015c4:	4a60      	ldr	r2, [pc, #384]	@ (8001748 <HAL_RCC_OscConfig+0x4c4>)
 80015c6:	f043 0304 	orr.w	r3, r3, #4
 80015ca:	6213      	str	r3, [r2, #32]
 80015cc:	4b5e      	ldr	r3, [pc, #376]	@ (8001748 <HAL_RCC_OscConfig+0x4c4>)
 80015ce:	6a1b      	ldr	r3, [r3, #32]
 80015d0:	4a5d      	ldr	r2, [pc, #372]	@ (8001748 <HAL_RCC_OscConfig+0x4c4>)
 80015d2:	f043 0301 	orr.w	r3, r3, #1
 80015d6:	6213      	str	r3, [r2, #32]
 80015d8:	e00b      	b.n	80015f2 <HAL_RCC_OscConfig+0x36e>
 80015da:	4b5b      	ldr	r3, [pc, #364]	@ (8001748 <HAL_RCC_OscConfig+0x4c4>)
 80015dc:	6a1b      	ldr	r3, [r3, #32]
 80015de:	4a5a      	ldr	r2, [pc, #360]	@ (8001748 <HAL_RCC_OscConfig+0x4c4>)
 80015e0:	f023 0301 	bic.w	r3, r3, #1
 80015e4:	6213      	str	r3, [r2, #32]
 80015e6:	4b58      	ldr	r3, [pc, #352]	@ (8001748 <HAL_RCC_OscConfig+0x4c4>)
 80015e8:	6a1b      	ldr	r3, [r3, #32]
 80015ea:	4a57      	ldr	r2, [pc, #348]	@ (8001748 <HAL_RCC_OscConfig+0x4c4>)
 80015ec:	f023 0304 	bic.w	r3, r3, #4
 80015f0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	68db      	ldr	r3, [r3, #12]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d015      	beq.n	8001626 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015fa:	f7ff fa9f 	bl	8000b3c <HAL_GetTick>
 80015fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001600:	e00a      	b.n	8001618 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001602:	f7ff fa9b 	bl	8000b3c <HAL_GetTick>
 8001606:	4602      	mov	r2, r0
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001610:	4293      	cmp	r3, r2
 8001612:	d901      	bls.n	8001618 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001614:	2303      	movs	r3, #3
 8001616:	e0b1      	b.n	800177c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001618:	4b4b      	ldr	r3, [pc, #300]	@ (8001748 <HAL_RCC_OscConfig+0x4c4>)
 800161a:	6a1b      	ldr	r3, [r3, #32]
 800161c:	f003 0302 	and.w	r3, r3, #2
 8001620:	2b00      	cmp	r3, #0
 8001622:	d0ee      	beq.n	8001602 <HAL_RCC_OscConfig+0x37e>
 8001624:	e014      	b.n	8001650 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001626:	f7ff fa89 	bl	8000b3c <HAL_GetTick>
 800162a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800162c:	e00a      	b.n	8001644 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800162e:	f7ff fa85 	bl	8000b3c <HAL_GetTick>
 8001632:	4602      	mov	r2, r0
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	f241 3288 	movw	r2, #5000	@ 0x1388
 800163c:	4293      	cmp	r3, r2
 800163e:	d901      	bls.n	8001644 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001640:	2303      	movs	r3, #3
 8001642:	e09b      	b.n	800177c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001644:	4b40      	ldr	r3, [pc, #256]	@ (8001748 <HAL_RCC_OscConfig+0x4c4>)
 8001646:	6a1b      	ldr	r3, [r3, #32]
 8001648:	f003 0302 	and.w	r3, r3, #2
 800164c:	2b00      	cmp	r3, #0
 800164e:	d1ee      	bne.n	800162e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001650:	7dfb      	ldrb	r3, [r7, #23]
 8001652:	2b01      	cmp	r3, #1
 8001654:	d105      	bne.n	8001662 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001656:	4b3c      	ldr	r3, [pc, #240]	@ (8001748 <HAL_RCC_OscConfig+0x4c4>)
 8001658:	69db      	ldr	r3, [r3, #28]
 800165a:	4a3b      	ldr	r2, [pc, #236]	@ (8001748 <HAL_RCC_OscConfig+0x4c4>)
 800165c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001660:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	69db      	ldr	r3, [r3, #28]
 8001666:	2b00      	cmp	r3, #0
 8001668:	f000 8087 	beq.w	800177a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800166c:	4b36      	ldr	r3, [pc, #216]	@ (8001748 <HAL_RCC_OscConfig+0x4c4>)
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f003 030c 	and.w	r3, r3, #12
 8001674:	2b08      	cmp	r3, #8
 8001676:	d061      	beq.n	800173c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	69db      	ldr	r3, [r3, #28]
 800167c:	2b02      	cmp	r3, #2
 800167e:	d146      	bne.n	800170e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001680:	4b33      	ldr	r3, [pc, #204]	@ (8001750 <HAL_RCC_OscConfig+0x4cc>)
 8001682:	2200      	movs	r2, #0
 8001684:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001686:	f7ff fa59 	bl	8000b3c <HAL_GetTick>
 800168a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800168c:	e008      	b.n	80016a0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800168e:	f7ff fa55 	bl	8000b3c <HAL_GetTick>
 8001692:	4602      	mov	r2, r0
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	2b02      	cmp	r3, #2
 800169a:	d901      	bls.n	80016a0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800169c:	2303      	movs	r3, #3
 800169e:	e06d      	b.n	800177c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016a0:	4b29      	ldr	r3, [pc, #164]	@ (8001748 <HAL_RCC_OscConfig+0x4c4>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d1f0      	bne.n	800168e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6a1b      	ldr	r3, [r3, #32]
 80016b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016b4:	d108      	bne.n	80016c8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80016b6:	4b24      	ldr	r3, [pc, #144]	@ (8001748 <HAL_RCC_OscConfig+0x4c4>)
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	4921      	ldr	r1, [pc, #132]	@ (8001748 <HAL_RCC_OscConfig+0x4c4>)
 80016c4:	4313      	orrs	r3, r2
 80016c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016c8:	4b1f      	ldr	r3, [pc, #124]	@ (8001748 <HAL_RCC_OscConfig+0x4c4>)
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6a19      	ldr	r1, [r3, #32]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016d8:	430b      	orrs	r3, r1
 80016da:	491b      	ldr	r1, [pc, #108]	@ (8001748 <HAL_RCC_OscConfig+0x4c4>)
 80016dc:	4313      	orrs	r3, r2
 80016de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001750 <HAL_RCC_OscConfig+0x4cc>)
 80016e2:	2201      	movs	r2, #1
 80016e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e6:	f7ff fa29 	bl	8000b3c <HAL_GetTick>
 80016ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016ec:	e008      	b.n	8001700 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016ee:	f7ff fa25 	bl	8000b3c <HAL_GetTick>
 80016f2:	4602      	mov	r2, r0
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d901      	bls.n	8001700 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80016fc:	2303      	movs	r3, #3
 80016fe:	e03d      	b.n	800177c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001700:	4b11      	ldr	r3, [pc, #68]	@ (8001748 <HAL_RCC_OscConfig+0x4c4>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001708:	2b00      	cmp	r3, #0
 800170a:	d0f0      	beq.n	80016ee <HAL_RCC_OscConfig+0x46a>
 800170c:	e035      	b.n	800177a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800170e:	4b10      	ldr	r3, [pc, #64]	@ (8001750 <HAL_RCC_OscConfig+0x4cc>)
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001714:	f7ff fa12 	bl	8000b3c <HAL_GetTick>
 8001718:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800171a:	e008      	b.n	800172e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800171c:	f7ff fa0e 	bl	8000b3c <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	2b02      	cmp	r3, #2
 8001728:	d901      	bls.n	800172e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e026      	b.n	800177c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800172e:	4b06      	ldr	r3, [pc, #24]	@ (8001748 <HAL_RCC_OscConfig+0x4c4>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d1f0      	bne.n	800171c <HAL_RCC_OscConfig+0x498>
 800173a:	e01e      	b.n	800177a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	69db      	ldr	r3, [r3, #28]
 8001740:	2b01      	cmp	r3, #1
 8001742:	d107      	bne.n	8001754 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e019      	b.n	800177c <HAL_RCC_OscConfig+0x4f8>
 8001748:	40021000 	.word	0x40021000
 800174c:	40007000 	.word	0x40007000
 8001750:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001754:	4b0b      	ldr	r3, [pc, #44]	@ (8001784 <HAL_RCC_OscConfig+0x500>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6a1b      	ldr	r3, [r3, #32]
 8001764:	429a      	cmp	r2, r3
 8001766:	d106      	bne.n	8001776 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001772:	429a      	cmp	r2, r3
 8001774:	d001      	beq.n	800177a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e000      	b.n	800177c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800177a:	2300      	movs	r3, #0
}
 800177c:	4618      	mov	r0, r3
 800177e:	3718      	adds	r7, #24
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	40021000 	.word	0x40021000

08001788 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d101      	bne.n	800179c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e0d0      	b.n	800193e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800179c:	4b6a      	ldr	r3, [pc, #424]	@ (8001948 <HAL_RCC_ClockConfig+0x1c0>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0307 	and.w	r3, r3, #7
 80017a4:	683a      	ldr	r2, [r7, #0]
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d910      	bls.n	80017cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017aa:	4b67      	ldr	r3, [pc, #412]	@ (8001948 <HAL_RCC_ClockConfig+0x1c0>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f023 0207 	bic.w	r2, r3, #7
 80017b2:	4965      	ldr	r1, [pc, #404]	@ (8001948 <HAL_RCC_ClockConfig+0x1c0>)
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	4313      	orrs	r3, r2
 80017b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ba:	4b63      	ldr	r3, [pc, #396]	@ (8001948 <HAL_RCC_ClockConfig+0x1c0>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0307 	and.w	r3, r3, #7
 80017c2:	683a      	ldr	r2, [r7, #0]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d001      	beq.n	80017cc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e0b8      	b.n	800193e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 0302 	and.w	r3, r3, #2
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d020      	beq.n	800181a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 0304 	and.w	r3, r3, #4
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d005      	beq.n	80017f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017e4:	4b59      	ldr	r3, [pc, #356]	@ (800194c <HAL_RCC_ClockConfig+0x1c4>)
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	4a58      	ldr	r2, [pc, #352]	@ (800194c <HAL_RCC_ClockConfig+0x1c4>)
 80017ea:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80017ee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 0308 	and.w	r3, r3, #8
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d005      	beq.n	8001808 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017fc:	4b53      	ldr	r3, [pc, #332]	@ (800194c <HAL_RCC_ClockConfig+0x1c4>)
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	4a52      	ldr	r2, [pc, #328]	@ (800194c <HAL_RCC_ClockConfig+0x1c4>)
 8001802:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001806:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001808:	4b50      	ldr	r3, [pc, #320]	@ (800194c <HAL_RCC_ClockConfig+0x1c4>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	494d      	ldr	r1, [pc, #308]	@ (800194c <HAL_RCC_ClockConfig+0x1c4>)
 8001816:	4313      	orrs	r3, r2
 8001818:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	2b00      	cmp	r3, #0
 8001824:	d040      	beq.n	80018a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	2b01      	cmp	r3, #1
 800182c:	d107      	bne.n	800183e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800182e:	4b47      	ldr	r3, [pc, #284]	@ (800194c <HAL_RCC_ClockConfig+0x1c4>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d115      	bne.n	8001866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e07f      	b.n	800193e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	2b02      	cmp	r3, #2
 8001844:	d107      	bne.n	8001856 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001846:	4b41      	ldr	r3, [pc, #260]	@ (800194c <HAL_RCC_ClockConfig+0x1c4>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d109      	bne.n	8001866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e073      	b.n	800193e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001856:	4b3d      	ldr	r3, [pc, #244]	@ (800194c <HAL_RCC_ClockConfig+0x1c4>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0302 	and.w	r3, r3, #2
 800185e:	2b00      	cmp	r3, #0
 8001860:	d101      	bne.n	8001866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e06b      	b.n	800193e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001866:	4b39      	ldr	r3, [pc, #228]	@ (800194c <HAL_RCC_ClockConfig+0x1c4>)
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f023 0203 	bic.w	r2, r3, #3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	4936      	ldr	r1, [pc, #216]	@ (800194c <HAL_RCC_ClockConfig+0x1c4>)
 8001874:	4313      	orrs	r3, r2
 8001876:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001878:	f7ff f960 	bl	8000b3c <HAL_GetTick>
 800187c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800187e:	e00a      	b.n	8001896 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001880:	f7ff f95c 	bl	8000b3c <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800188e:	4293      	cmp	r3, r2
 8001890:	d901      	bls.n	8001896 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e053      	b.n	800193e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001896:	4b2d      	ldr	r3, [pc, #180]	@ (800194c <HAL_RCC_ClockConfig+0x1c4>)
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f003 020c 	and.w	r2, r3, #12
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d1eb      	bne.n	8001880 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018a8:	4b27      	ldr	r3, [pc, #156]	@ (8001948 <HAL_RCC_ClockConfig+0x1c0>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 0307 	and.w	r3, r3, #7
 80018b0:	683a      	ldr	r2, [r7, #0]
 80018b2:	429a      	cmp	r2, r3
 80018b4:	d210      	bcs.n	80018d8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018b6:	4b24      	ldr	r3, [pc, #144]	@ (8001948 <HAL_RCC_ClockConfig+0x1c0>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f023 0207 	bic.w	r2, r3, #7
 80018be:	4922      	ldr	r1, [pc, #136]	@ (8001948 <HAL_RCC_ClockConfig+0x1c0>)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018c6:	4b20      	ldr	r3, [pc, #128]	@ (8001948 <HAL_RCC_ClockConfig+0x1c0>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0307 	and.w	r3, r3, #7
 80018ce:	683a      	ldr	r2, [r7, #0]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d001      	beq.n	80018d8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e032      	b.n	800193e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0304 	and.w	r3, r3, #4
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d008      	beq.n	80018f6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018e4:	4b19      	ldr	r3, [pc, #100]	@ (800194c <HAL_RCC_ClockConfig+0x1c4>)
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	4916      	ldr	r1, [pc, #88]	@ (800194c <HAL_RCC_ClockConfig+0x1c4>)
 80018f2:	4313      	orrs	r3, r2
 80018f4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0308 	and.w	r3, r3, #8
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d009      	beq.n	8001916 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001902:	4b12      	ldr	r3, [pc, #72]	@ (800194c <HAL_RCC_ClockConfig+0x1c4>)
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	691b      	ldr	r3, [r3, #16]
 800190e:	00db      	lsls	r3, r3, #3
 8001910:	490e      	ldr	r1, [pc, #56]	@ (800194c <HAL_RCC_ClockConfig+0x1c4>)
 8001912:	4313      	orrs	r3, r2
 8001914:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001916:	f000 f821 	bl	800195c <HAL_RCC_GetSysClockFreq>
 800191a:	4602      	mov	r2, r0
 800191c:	4b0b      	ldr	r3, [pc, #44]	@ (800194c <HAL_RCC_ClockConfig+0x1c4>)
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	091b      	lsrs	r3, r3, #4
 8001922:	f003 030f 	and.w	r3, r3, #15
 8001926:	490a      	ldr	r1, [pc, #40]	@ (8001950 <HAL_RCC_ClockConfig+0x1c8>)
 8001928:	5ccb      	ldrb	r3, [r1, r3]
 800192a:	fa22 f303 	lsr.w	r3, r2, r3
 800192e:	4a09      	ldr	r2, [pc, #36]	@ (8001954 <HAL_RCC_ClockConfig+0x1cc>)
 8001930:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001932:	4b09      	ldr	r3, [pc, #36]	@ (8001958 <HAL_RCC_ClockConfig+0x1d0>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4618      	mov	r0, r3
 8001938:	f7ff f8be 	bl	8000ab8 <HAL_InitTick>

  return HAL_OK;
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	3710      	adds	r7, #16
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	40022000 	.word	0x40022000
 800194c:	40021000 	.word	0x40021000
 8001950:	08003d04 	.word	0x08003d04
 8001954:	20000030 	.word	0x20000030
 8001958:	20000034 	.word	0x20000034

0800195c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800195c:	b480      	push	{r7}
 800195e:	b087      	sub	sp, #28
 8001960:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001962:	2300      	movs	r3, #0
 8001964:	60fb      	str	r3, [r7, #12]
 8001966:	2300      	movs	r3, #0
 8001968:	60bb      	str	r3, [r7, #8]
 800196a:	2300      	movs	r3, #0
 800196c:	617b      	str	r3, [r7, #20]
 800196e:	2300      	movs	r3, #0
 8001970:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001972:	2300      	movs	r3, #0
 8001974:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001976:	4b1e      	ldr	r3, [pc, #120]	@ (80019f0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	f003 030c 	and.w	r3, r3, #12
 8001982:	2b04      	cmp	r3, #4
 8001984:	d002      	beq.n	800198c <HAL_RCC_GetSysClockFreq+0x30>
 8001986:	2b08      	cmp	r3, #8
 8001988:	d003      	beq.n	8001992 <HAL_RCC_GetSysClockFreq+0x36>
 800198a:	e027      	b.n	80019dc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800198c:	4b19      	ldr	r3, [pc, #100]	@ (80019f4 <HAL_RCC_GetSysClockFreq+0x98>)
 800198e:	613b      	str	r3, [r7, #16]
      break;
 8001990:	e027      	b.n	80019e2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	0c9b      	lsrs	r3, r3, #18
 8001996:	f003 030f 	and.w	r3, r3, #15
 800199a:	4a17      	ldr	r2, [pc, #92]	@ (80019f8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800199c:	5cd3      	ldrb	r3, [r2, r3]
 800199e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d010      	beq.n	80019cc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80019aa:	4b11      	ldr	r3, [pc, #68]	@ (80019f0 <HAL_RCC_GetSysClockFreq+0x94>)
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	0c5b      	lsrs	r3, r3, #17
 80019b0:	f003 0301 	and.w	r3, r3, #1
 80019b4:	4a11      	ldr	r2, [pc, #68]	@ (80019fc <HAL_RCC_GetSysClockFreq+0xa0>)
 80019b6:	5cd3      	ldrb	r3, [r2, r3]
 80019b8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4a0d      	ldr	r2, [pc, #52]	@ (80019f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80019be:	fb03 f202 	mul.w	r2, r3, r2
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80019c8:	617b      	str	r3, [r7, #20]
 80019ca:	e004      	b.n	80019d6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	4a0c      	ldr	r2, [pc, #48]	@ (8001a00 <HAL_RCC_GetSysClockFreq+0xa4>)
 80019d0:	fb02 f303 	mul.w	r3, r2, r3
 80019d4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	613b      	str	r3, [r7, #16]
      break;
 80019da:	e002      	b.n	80019e2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80019dc:	4b05      	ldr	r3, [pc, #20]	@ (80019f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80019de:	613b      	str	r3, [r7, #16]
      break;
 80019e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019e2:	693b      	ldr	r3, [r7, #16]
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	371c      	adds	r7, #28
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bc80      	pop	{r7}
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	40021000 	.word	0x40021000
 80019f4:	007a1200 	.word	0x007a1200
 80019f8:	08003d1c 	.word	0x08003d1c
 80019fc:	08003d2c 	.word	0x08003d2c
 8001a00:	003d0900 	.word	0x003d0900

08001a04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a08:	4b02      	ldr	r3, [pc, #8]	@ (8001a14 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bc80      	pop	{r7}
 8001a12:	4770      	bx	lr
 8001a14:	20000030 	.word	0x20000030

08001a18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a1c:	f7ff fff2 	bl	8001a04 <HAL_RCC_GetHCLKFreq>
 8001a20:	4602      	mov	r2, r0
 8001a22:	4b05      	ldr	r3, [pc, #20]	@ (8001a38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	0a1b      	lsrs	r3, r3, #8
 8001a28:	f003 0307 	and.w	r3, r3, #7
 8001a2c:	4903      	ldr	r1, [pc, #12]	@ (8001a3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a2e:	5ccb      	ldrb	r3, [r1, r3]
 8001a30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	08003d14 	.word	0x08003d14

08001a40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a44:	f7ff ffde 	bl	8001a04 <HAL_RCC_GetHCLKFreq>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	4b05      	ldr	r3, [pc, #20]	@ (8001a60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	0adb      	lsrs	r3, r3, #11
 8001a50:	f003 0307 	and.w	r3, r3, #7
 8001a54:	4903      	ldr	r1, [pc, #12]	@ (8001a64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a56:	5ccb      	ldrb	r3, [r1, r3]
 8001a58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	40021000 	.word	0x40021000
 8001a64:	08003d14 	.word	0x08003d14

08001a68 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b085      	sub	sp, #20
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a70:	4b0a      	ldr	r3, [pc, #40]	@ (8001a9c <RCC_Delay+0x34>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a0a      	ldr	r2, [pc, #40]	@ (8001aa0 <RCC_Delay+0x38>)
 8001a76:	fba2 2303 	umull	r2, r3, r2, r3
 8001a7a:	0a5b      	lsrs	r3, r3, #9
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	fb02 f303 	mul.w	r3, r2, r3
 8001a82:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001a84:	bf00      	nop
  }
  while (Delay --);
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	1e5a      	subs	r2, r3, #1
 8001a8a:	60fa      	str	r2, [r7, #12]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d1f9      	bne.n	8001a84 <RCC_Delay+0x1c>
}
 8001a90:	bf00      	nop
 8001a92:	bf00      	nop
 8001a94:	3714      	adds	r7, #20
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bc80      	pop	{r7}
 8001a9a:	4770      	bx	lr
 8001a9c:	20000030 	.word	0x20000030
 8001aa0:	10624dd3 	.word	0x10624dd3

08001aa4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d101      	bne.n	8001ab6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e042      	b.n	8001b3c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d106      	bne.n	8001ad0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f7fe fee4 	bl	8000898 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2224      	movs	r2, #36	@ 0x24
 8001ad4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	68da      	ldr	r2, [r3, #12]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001ae6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f000 fdf1 	bl	80026d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	691a      	ldr	r2, [r3, #16]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001afc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	695a      	ldr	r2, [r3, #20]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001b0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	68da      	ldr	r2, [r3, #12]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001b1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2200      	movs	r2, #0
 8001b22:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2220      	movs	r2, #32
 8001b28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2220      	movs	r2, #32
 8001b30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2200      	movs	r2, #0
 8001b38:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001b3a:	2300      	movs	r3, #0
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3708      	adds	r7, #8
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b08a      	sub	sp, #40	@ 0x28
 8001b48:	af02      	add	r7, sp, #8
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	603b      	str	r3, [r7, #0]
 8001b50:	4613      	mov	r3, r2
 8001b52:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001b54:	2300      	movs	r3, #0
 8001b56:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	2b20      	cmp	r3, #32
 8001b62:	d16d      	bne.n	8001c40 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d002      	beq.n	8001b70 <HAL_UART_Transmit+0x2c>
 8001b6a:	88fb      	ldrh	r3, [r7, #6]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d101      	bne.n	8001b74 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e066      	b.n	8001c42 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	2200      	movs	r2, #0
 8001b78:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	2221      	movs	r2, #33	@ 0x21
 8001b7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001b82:	f7fe ffdb 	bl	8000b3c <HAL_GetTick>
 8001b86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	88fa      	ldrh	r2, [r7, #6]
 8001b8c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	88fa      	ldrh	r2, [r7, #6]
 8001b92:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001b9c:	d108      	bne.n	8001bb0 <HAL_UART_Transmit+0x6c>
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	691b      	ldr	r3, [r3, #16]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d104      	bne.n	8001bb0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	61bb      	str	r3, [r7, #24]
 8001bae:	e003      	b.n	8001bb8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001bb8:	e02a      	b.n	8001c10 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	9300      	str	r3, [sp, #0]
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	2180      	movs	r1, #128	@ 0x80
 8001bc4:	68f8      	ldr	r0, [r7, #12]
 8001bc6:	f000 fb79 	bl	80022bc <UART_WaitOnFlagUntilTimeout>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	e036      	b.n	8001c42 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d10b      	bne.n	8001bf2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	881b      	ldrh	r3, [r3, #0]
 8001bde:	461a      	mov	r2, r3
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001be8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	3302      	adds	r3, #2
 8001bee:	61bb      	str	r3, [r7, #24]
 8001bf0:	e007      	b.n	8001c02 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	781a      	ldrb	r2, [r3, #0]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	3301      	adds	r3, #1
 8001c00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001c06:	b29b      	uxth	r3, r3
 8001c08:	3b01      	subs	r3, #1
 8001c0a:	b29a      	uxth	r2, r3
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001c14:	b29b      	uxth	r3, r3
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d1cf      	bne.n	8001bba <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	9300      	str	r3, [sp, #0]
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	2200      	movs	r2, #0
 8001c22:	2140      	movs	r1, #64	@ 0x40
 8001c24:	68f8      	ldr	r0, [r7, #12]
 8001c26:	f000 fb49 	bl	80022bc <UART_WaitOnFlagUntilTimeout>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001c30:	2303      	movs	r3, #3
 8001c32:	e006      	b.n	8001c42 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2220      	movs	r2, #32
 8001c38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	e000      	b.n	8001c42 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001c40:	2302      	movs	r3, #2
  }
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3720      	adds	r7, #32
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b08a      	sub	sp, #40	@ 0x28
 8001c4e:	af02      	add	r7, sp, #8
 8001c50:	60f8      	str	r0, [r7, #12]
 8001c52:	60b9      	str	r1, [r7, #8]
 8001c54:	603b      	str	r3, [r7, #0]
 8001c56:	4613      	mov	r3, r2
 8001c58:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	2b20      	cmp	r3, #32
 8001c68:	d17c      	bne.n	8001d64 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d002      	beq.n	8001c76 <HAL_UART_Receive+0x2c>
 8001c70:	88fb      	ldrh	r3, [r7, #6]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d101      	bne.n	8001c7a <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e075      	b.n	8001d66 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2222      	movs	r2, #34	@ 0x22
 8001c84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001c8e:	f7fe ff55 	bl	8000b3c <HAL_GetTick>
 8001c92:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	88fa      	ldrh	r2, [r7, #6]
 8001c98:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	88fa      	ldrh	r2, [r7, #6]
 8001c9e:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001ca8:	d108      	bne.n	8001cbc <HAL_UART_Receive+0x72>
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	691b      	ldr	r3, [r3, #16]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d104      	bne.n	8001cbc <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	61bb      	str	r3, [r7, #24]
 8001cba:	e003      	b.n	8001cc4 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001cc4:	e043      	b.n	8001d4e <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	9300      	str	r3, [sp, #0]
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	2120      	movs	r1, #32
 8001cd0:	68f8      	ldr	r0, [r7, #12]
 8001cd2:	f000 faf3 	bl	80022bc <UART_WaitOnFlagUntilTimeout>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	e042      	b.n	8001d66 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d10c      	bne.n	8001d00 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cf2:	b29a      	uxth	r2, r3
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	3302      	adds	r3, #2
 8001cfc:	61bb      	str	r3, [r7, #24]
 8001cfe:	e01f      	b.n	8001d40 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d08:	d007      	beq.n	8001d1a <HAL_UART_Receive+0xd0>
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d10a      	bne.n	8001d28 <HAL_UART_Receive+0xde>
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	691b      	ldr	r3, [r3, #16]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d106      	bne.n	8001d28 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	b2da      	uxtb	r2, r3
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	701a      	strb	r2, [r3, #0]
 8001d26:	e008      	b.n	8001d3a <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001d34:	b2da      	uxtb	r2, r3
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	3b01      	subs	r3, #1
 8001d48:	b29a      	uxth	r2, r3
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d1b6      	bne.n	8001cc6 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2220      	movs	r2, #32
 8001d5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8001d60:	2300      	movs	r3, #0
 8001d62:	e000      	b.n	8001d66 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001d64:	2302      	movs	r3, #2
  }
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3720      	adds	r7, #32
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
	...

08001d70 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b0ba      	sub	sp, #232	@ 0xe8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	695b      	ldr	r3, [r3, #20]
 8001d92:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8001d96:	2300      	movs	r3, #0
 8001d98:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001da2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001da6:	f003 030f 	and.w	r3, r3, #15
 8001daa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8001dae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d10f      	bne.n	8001dd6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001db6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001dba:	f003 0320 	and.w	r3, r3, #32
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d009      	beq.n	8001dd6 <HAL_UART_IRQHandler+0x66>
 8001dc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001dc6:	f003 0320 	and.w	r3, r3, #32
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d003      	beq.n	8001dd6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f000 fbbf 	bl	8002552 <UART_Receive_IT>
      return;
 8001dd4:	e25b      	b.n	800228e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001dd6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	f000 80de 	beq.w	8001f9c <HAL_UART_IRQHandler+0x22c>
 8001de0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001de4:	f003 0301 	and.w	r3, r3, #1
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d106      	bne.n	8001dfa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001dec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001df0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	f000 80d1 	beq.w	8001f9c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001dfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001dfe:	f003 0301 	and.w	r3, r3, #1
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d00b      	beq.n	8001e1e <HAL_UART_IRQHandler+0xae>
 8001e06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001e0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d005      	beq.n	8001e1e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e16:	f043 0201 	orr.w	r2, r3, #1
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001e1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001e22:	f003 0304 	and.w	r3, r3, #4
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d00b      	beq.n	8001e42 <HAL_UART_IRQHandler+0xd2>
 8001e2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001e2e:	f003 0301 	and.w	r3, r3, #1
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d005      	beq.n	8001e42 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e3a:	f043 0202 	orr.w	r2, r3, #2
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001e42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001e46:	f003 0302 	and.w	r3, r3, #2
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d00b      	beq.n	8001e66 <HAL_UART_IRQHandler+0xf6>
 8001e4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d005      	beq.n	8001e66 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e5e:	f043 0204 	orr.w	r2, r3, #4
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001e66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001e6a:	f003 0308 	and.w	r3, r3, #8
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d011      	beq.n	8001e96 <HAL_UART_IRQHandler+0x126>
 8001e72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001e76:	f003 0320 	and.w	r3, r3, #32
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d105      	bne.n	8001e8a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001e7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001e82:	f003 0301 	and.w	r3, r3, #1
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d005      	beq.n	8001e96 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e8e:	f043 0208 	orr.w	r2, r3, #8
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	f000 81f2 	beq.w	8002284 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001ea0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001ea4:	f003 0320 	and.w	r3, r3, #32
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d008      	beq.n	8001ebe <HAL_UART_IRQHandler+0x14e>
 8001eac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001eb0:	f003 0320 	and.w	r3, r3, #32
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d002      	beq.n	8001ebe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f000 fb4a 	bl	8002552 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	695b      	ldr	r3, [r3, #20]
 8001ec4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	bf14      	ite	ne
 8001ecc:	2301      	movne	r3, #1
 8001ece:	2300      	moveq	r3, #0
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eda:	f003 0308 	and.w	r3, r3, #8
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d103      	bne.n	8001eea <HAL_UART_IRQHandler+0x17a>
 8001ee2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d04f      	beq.n	8001f8a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f000 fa54 	bl	8002398 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	695b      	ldr	r3, [r3, #20]
 8001ef6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d041      	beq.n	8001f82 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	3314      	adds	r3, #20
 8001f04:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f08:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001f0c:	e853 3f00 	ldrex	r3, [r3]
 8001f10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8001f14:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001f18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001f1c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	3314      	adds	r3, #20
 8001f26:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8001f2a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8001f2e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f32:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8001f36:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8001f3a:	e841 2300 	strex	r3, r2, [r1]
 8001f3e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8001f42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d1d9      	bne.n	8001efe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d013      	beq.n	8001f7a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f56:	4a7e      	ldr	r2, [pc, #504]	@ (8002150 <HAL_UART_IRQHandler+0x3e0>)
 8001f58:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7fe ff62 	bl	8000e28 <HAL_DMA_Abort_IT>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d016      	beq.n	8001f98 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f70:	687a      	ldr	r2, [r7, #4]
 8001f72:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001f74:	4610      	mov	r0, r2
 8001f76:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f78:	e00e      	b.n	8001f98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f000 f98a 	bl	8002294 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f80:	e00a      	b.n	8001f98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f000 f986 	bl	8002294 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f88:	e006      	b.n	8001f98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f000 f982 	bl	8002294 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8001f96:	e175      	b.n	8002284 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f98:	bf00      	nop
    return;
 8001f9a:	e173      	b.n	8002284 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	f040 814f 	bne.w	8002244 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8001fa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001faa:	f003 0310 	and.w	r3, r3, #16
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	f000 8148 	beq.w	8002244 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8001fb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001fb8:	f003 0310 	and.w	r3, r3, #16
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	f000 8141 	beq.w	8002244 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	60bb      	str	r3, [r7, #8]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	60bb      	str	r3, [r7, #8]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	60bb      	str	r3, [r7, #8]
 8001fd6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	695b      	ldr	r3, [r3, #20]
 8001fde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	f000 80b6 	beq.w	8002154 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8001ff4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	f000 8145 	beq.w	8002288 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002002:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002006:	429a      	cmp	r2, r3
 8002008:	f080 813e 	bcs.w	8002288 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002012:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002018:	699b      	ldr	r3, [r3, #24]
 800201a:	2b20      	cmp	r3, #32
 800201c:	f000 8088 	beq.w	8002130 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	330c      	adds	r3, #12
 8002026:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800202a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800202e:	e853 3f00 	ldrex	r3, [r3]
 8002032:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002036:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800203a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800203e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	330c      	adds	r3, #12
 8002048:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800204c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002050:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002054:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002058:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800205c:	e841 2300 	strex	r3, r2, [r1]
 8002060:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002064:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002068:	2b00      	cmp	r3, #0
 800206a:	d1d9      	bne.n	8002020 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	3314      	adds	r3, #20
 8002072:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002074:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002076:	e853 3f00 	ldrex	r3, [r3]
 800207a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800207c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800207e:	f023 0301 	bic.w	r3, r3, #1
 8002082:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	3314      	adds	r3, #20
 800208c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002090:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002094:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002096:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002098:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800209c:	e841 2300 	strex	r3, r2, [r1]
 80020a0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80020a2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d1e1      	bne.n	800206c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	3314      	adds	r3, #20
 80020ae:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020b0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80020b2:	e853 3f00 	ldrex	r3, [r3]
 80020b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80020b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80020ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80020be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	3314      	adds	r3, #20
 80020c8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80020cc:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80020ce:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020d0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80020d2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80020d4:	e841 2300 	strex	r3, r2, [r1]
 80020d8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80020da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d1e3      	bne.n	80020a8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2220      	movs	r2, #32
 80020e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2200      	movs	r2, #0
 80020ec:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	330c      	adds	r3, #12
 80020f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80020f8:	e853 3f00 	ldrex	r3, [r3]
 80020fc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80020fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002100:	f023 0310 	bic.w	r3, r3, #16
 8002104:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	330c      	adds	r3, #12
 800210e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002112:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002114:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002116:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002118:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800211a:	e841 2300 	strex	r3, r2, [r1]
 800211e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002120:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002122:	2b00      	cmp	r3, #0
 8002124:	d1e3      	bne.n	80020ee <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800212a:	4618      	mov	r0, r3
 800212c:	f7fe fe41 	bl	8000db2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2202      	movs	r2, #2
 8002134:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800213e:	b29b      	uxth	r3, r3
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	b29b      	uxth	r3, r3
 8002144:	4619      	mov	r1, r3
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f000 f8ad 	bl	80022a6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800214c:	e09c      	b.n	8002288 <HAL_UART_IRQHandler+0x518>
 800214e:	bf00      	nop
 8002150:	0800245d 	.word	0x0800245d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800215c:	b29b      	uxth	r3, r3
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002168:	b29b      	uxth	r3, r3
 800216a:	2b00      	cmp	r3, #0
 800216c:	f000 808e 	beq.w	800228c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002170:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002174:	2b00      	cmp	r3, #0
 8002176:	f000 8089 	beq.w	800228c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	330c      	adds	r3, #12
 8002180:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002182:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002184:	e853 3f00 	ldrex	r3, [r3]
 8002188:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800218a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800218c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002190:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	330c      	adds	r3, #12
 800219a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800219e:	647a      	str	r2, [r7, #68]	@ 0x44
 80021a0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021a2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80021a4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80021a6:	e841 2300 	strex	r3, r2, [r1]
 80021aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80021ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d1e3      	bne.n	800217a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	3314      	adds	r3, #20
 80021b8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021bc:	e853 3f00 	ldrex	r3, [r3]
 80021c0:	623b      	str	r3, [r7, #32]
   return(result);
 80021c2:	6a3b      	ldr	r3, [r7, #32]
 80021c4:	f023 0301 	bic.w	r3, r3, #1
 80021c8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	3314      	adds	r3, #20
 80021d2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80021d6:	633a      	str	r2, [r7, #48]	@ 0x30
 80021d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80021dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80021de:	e841 2300 	strex	r3, r2, [r1]
 80021e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80021e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d1e3      	bne.n	80021b2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2220      	movs	r2, #32
 80021ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2200      	movs	r2, #0
 80021f6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	330c      	adds	r3, #12
 80021fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	e853 3f00 	ldrex	r3, [r3]
 8002206:	60fb      	str	r3, [r7, #12]
   return(result);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	f023 0310 	bic.w	r3, r3, #16
 800220e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	330c      	adds	r3, #12
 8002218:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800221c:	61fa      	str	r2, [r7, #28]
 800221e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002220:	69b9      	ldr	r1, [r7, #24]
 8002222:	69fa      	ldr	r2, [r7, #28]
 8002224:	e841 2300 	strex	r3, r2, [r1]
 8002228:	617b      	str	r3, [r7, #20]
   return(result);
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d1e3      	bne.n	80021f8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2202      	movs	r2, #2
 8002234:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002236:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800223a:	4619      	mov	r1, r3
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f000 f832 	bl	80022a6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002242:	e023      	b.n	800228c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002244:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002248:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800224c:	2b00      	cmp	r3, #0
 800224e:	d009      	beq.n	8002264 <HAL_UART_IRQHandler+0x4f4>
 8002250:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002254:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002258:	2b00      	cmp	r3, #0
 800225a:	d003      	beq.n	8002264 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f000 f911 	bl	8002484 <UART_Transmit_IT>
    return;
 8002262:	e014      	b.n	800228e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002264:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002268:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800226c:	2b00      	cmp	r3, #0
 800226e:	d00e      	beq.n	800228e <HAL_UART_IRQHandler+0x51e>
 8002270:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002274:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002278:	2b00      	cmp	r3, #0
 800227a:	d008      	beq.n	800228e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f000 f950 	bl	8002522 <UART_EndTransmit_IT>
    return;
 8002282:	e004      	b.n	800228e <HAL_UART_IRQHandler+0x51e>
    return;
 8002284:	bf00      	nop
 8002286:	e002      	b.n	800228e <HAL_UART_IRQHandler+0x51e>
      return;
 8002288:	bf00      	nop
 800228a:	e000      	b.n	800228e <HAL_UART_IRQHandler+0x51e>
      return;
 800228c:	bf00      	nop
  }
}
 800228e:	37e8      	adds	r7, #232	@ 0xe8
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}

08002294 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800229c:	bf00      	nop
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bc80      	pop	{r7}
 80022a4:	4770      	bx	lr

080022a6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80022a6:	b480      	push	{r7}
 80022a8:	b083      	sub	sp, #12
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
 80022ae:	460b      	mov	r3, r1
 80022b0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80022b2:	bf00      	nop
 80022b4:	370c      	adds	r7, #12
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bc80      	pop	{r7}
 80022ba:	4770      	bx	lr

080022bc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b090      	sub	sp, #64	@ 0x40
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	60f8      	str	r0, [r7, #12]
 80022c4:	60b9      	str	r1, [r7, #8]
 80022c6:	603b      	str	r3, [r7, #0]
 80022c8:	4613      	mov	r3, r2
 80022ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022cc:	e050      	b.n	8002370 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80022d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022d4:	d04c      	beq.n	8002370 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80022d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d007      	beq.n	80022ec <UART_WaitOnFlagUntilTimeout+0x30>
 80022dc:	f7fe fc2e 	bl	8000b3c <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d241      	bcs.n	8002370 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	330c      	adds	r3, #12
 80022f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022f6:	e853 3f00 	ldrex	r3, [r3]
 80022fa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80022fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022fe:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8002302:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	330c      	adds	r3, #12
 800230a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800230c:	637a      	str	r2, [r7, #52]	@ 0x34
 800230e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002310:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002312:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002314:	e841 2300 	strex	r3, r2, [r1]
 8002318:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800231a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800231c:	2b00      	cmp	r3, #0
 800231e:	d1e5      	bne.n	80022ec <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	3314      	adds	r3, #20
 8002326:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	e853 3f00 	ldrex	r3, [r3]
 800232e:	613b      	str	r3, [r7, #16]
   return(result);
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	f023 0301 	bic.w	r3, r3, #1
 8002336:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	3314      	adds	r3, #20
 800233e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002340:	623a      	str	r2, [r7, #32]
 8002342:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002344:	69f9      	ldr	r1, [r7, #28]
 8002346:	6a3a      	ldr	r2, [r7, #32]
 8002348:	e841 2300 	strex	r3, r2, [r1]
 800234c:	61bb      	str	r3, [r7, #24]
   return(result);
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d1e5      	bne.n	8002320 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2220      	movs	r2, #32
 8002358:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2220      	movs	r2, #32
 8002360:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e00f      	b.n	8002390 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	4013      	ands	r3, r2
 800237a:	68ba      	ldr	r2, [r7, #8]
 800237c:	429a      	cmp	r2, r3
 800237e:	bf0c      	ite	eq
 8002380:	2301      	moveq	r3, #1
 8002382:	2300      	movne	r3, #0
 8002384:	b2db      	uxtb	r3, r3
 8002386:	461a      	mov	r2, r3
 8002388:	79fb      	ldrb	r3, [r7, #7]
 800238a:	429a      	cmp	r2, r3
 800238c:	d09f      	beq.n	80022ce <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800238e:	2300      	movs	r3, #0
}
 8002390:	4618      	mov	r0, r3
 8002392:	3740      	adds	r7, #64	@ 0x40
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}

08002398 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002398:	b480      	push	{r7}
 800239a:	b095      	sub	sp, #84	@ 0x54
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	330c      	adds	r3, #12
 80023a6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023aa:	e853 3f00 	ldrex	r3, [r3]
 80023ae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80023b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023b2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80023b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	330c      	adds	r3, #12
 80023be:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80023c0:	643a      	str	r2, [r7, #64]	@ 0x40
 80023c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023c4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80023c6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80023c8:	e841 2300 	strex	r3, r2, [r1]
 80023cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80023ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d1e5      	bne.n	80023a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	3314      	adds	r3, #20
 80023da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023dc:	6a3b      	ldr	r3, [r7, #32]
 80023de:	e853 3f00 	ldrex	r3, [r3]
 80023e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	f023 0301 	bic.w	r3, r3, #1
 80023ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	3314      	adds	r3, #20
 80023f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80023f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80023f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80023fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80023fc:	e841 2300 	strex	r3, r2, [r1]
 8002400:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002404:	2b00      	cmp	r3, #0
 8002406:	d1e5      	bne.n	80023d4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800240c:	2b01      	cmp	r3, #1
 800240e:	d119      	bne.n	8002444 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	330c      	adds	r3, #12
 8002416:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	e853 3f00 	ldrex	r3, [r3]
 800241e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	f023 0310 	bic.w	r3, r3, #16
 8002426:	647b      	str	r3, [r7, #68]	@ 0x44
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	330c      	adds	r3, #12
 800242e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002430:	61ba      	str	r2, [r7, #24]
 8002432:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002434:	6979      	ldr	r1, [r7, #20]
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	e841 2300 	strex	r3, r2, [r1]
 800243c:	613b      	str	r3, [r7, #16]
   return(result);
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d1e5      	bne.n	8002410 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2220      	movs	r2, #32
 8002448:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002452:	bf00      	nop
 8002454:	3754      	adds	r7, #84	@ 0x54
 8002456:	46bd      	mov	sp, r7
 8002458:	bc80      	pop	{r7}
 800245a:	4770      	bx	lr

0800245c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002468:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2200      	movs	r2, #0
 800246e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2200      	movs	r2, #0
 8002474:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002476:	68f8      	ldr	r0, [r7, #12]
 8002478:	f7ff ff0c 	bl	8002294 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800247c:	bf00      	nop
 800247e:	3710      	adds	r7, #16
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002484:	b480      	push	{r7}
 8002486:	b085      	sub	sp, #20
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002492:	b2db      	uxtb	r3, r3
 8002494:	2b21      	cmp	r3, #33	@ 0x21
 8002496:	d13e      	bne.n	8002516 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80024a0:	d114      	bne.n	80024cc <UART_Transmit_IT+0x48>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	691b      	ldr	r3, [r3, #16]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d110      	bne.n	80024cc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6a1b      	ldr	r3, [r3, #32]
 80024ae:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	881b      	ldrh	r3, [r3, #0]
 80024b4:	461a      	mov	r2, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024be:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6a1b      	ldr	r3, [r3, #32]
 80024c4:	1c9a      	adds	r2, r3, #2
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	621a      	str	r2, [r3, #32]
 80024ca:	e008      	b.n	80024de <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a1b      	ldr	r3, [r3, #32]
 80024d0:	1c59      	adds	r1, r3, #1
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	6211      	str	r1, [r2, #32]
 80024d6:	781a      	ldrb	r2, [r3, #0]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	3b01      	subs	r3, #1
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	4619      	mov	r1, r3
 80024ec:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d10f      	bne.n	8002512 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	68da      	ldr	r2, [r3, #12]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002500:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	68da      	ldr	r2, [r3, #12]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002510:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002512:	2300      	movs	r3, #0
 8002514:	e000      	b.n	8002518 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002516:	2302      	movs	r3, #2
  }
}
 8002518:	4618      	mov	r0, r3
 800251a:	3714      	adds	r7, #20
 800251c:	46bd      	mov	sp, r7
 800251e:	bc80      	pop	{r7}
 8002520:	4770      	bx	lr

08002522 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002522:	b580      	push	{r7, lr}
 8002524:	b082      	sub	sp, #8
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	68da      	ldr	r2, [r3, #12]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002538:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2220      	movs	r2, #32
 800253e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f7fe f8ad 	bl	80006a2 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002548:	2300      	movs	r3, #0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3708      	adds	r7, #8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002552:	b580      	push	{r7, lr}
 8002554:	b08c      	sub	sp, #48	@ 0x30
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b22      	cmp	r3, #34	@ 0x22
 8002564:	f040 80ae 	bne.w	80026c4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002570:	d117      	bne.n	80025a2 <UART_Receive_IT+0x50>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	691b      	ldr	r3, [r3, #16]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d113      	bne.n	80025a2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800257a:	2300      	movs	r3, #0
 800257c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002582:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	b29b      	uxth	r3, r3
 800258c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002590:	b29a      	uxth	r2, r3
 8002592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002594:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800259a:	1c9a      	adds	r2, r3, #2
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	629a      	str	r2, [r3, #40]	@ 0x28
 80025a0:	e026      	b.n	80025f0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80025a8:	2300      	movs	r3, #0
 80025aa:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80025b4:	d007      	beq.n	80025c6 <UART_Receive_IT+0x74>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d10a      	bne.n	80025d4 <UART_Receive_IT+0x82>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	691b      	ldr	r3, [r3, #16]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d106      	bne.n	80025d4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	b2da      	uxtb	r2, r3
 80025ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025d0:	701a      	strb	r2, [r3, #0]
 80025d2:	e008      	b.n	80025e6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80025e0:	b2da      	uxtb	r2, r3
 80025e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025e4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025ea:	1c5a      	adds	r2, r3, #1
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	3b01      	subs	r3, #1
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	4619      	mov	r1, r3
 80025fe:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002600:	2b00      	cmp	r3, #0
 8002602:	d15d      	bne.n	80026c0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	68da      	ldr	r2, [r3, #12]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f022 0220 	bic.w	r2, r2, #32
 8002612:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	68da      	ldr	r2, [r3, #12]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002622:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	695a      	ldr	r2, [r3, #20]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f022 0201 	bic.w	r2, r2, #1
 8002632:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2220      	movs	r2, #32
 8002638:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002646:	2b01      	cmp	r3, #1
 8002648:	d135      	bne.n	80026b6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	330c      	adds	r3, #12
 8002656:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	e853 3f00 	ldrex	r3, [r3]
 800265e:	613b      	str	r3, [r7, #16]
   return(result);
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	f023 0310 	bic.w	r3, r3, #16
 8002666:	627b      	str	r3, [r7, #36]	@ 0x24
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	330c      	adds	r3, #12
 800266e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002670:	623a      	str	r2, [r7, #32]
 8002672:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002674:	69f9      	ldr	r1, [r7, #28]
 8002676:	6a3a      	ldr	r2, [r7, #32]
 8002678:	e841 2300 	strex	r3, r2, [r1]
 800267c:	61bb      	str	r3, [r7, #24]
   return(result);
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d1e5      	bne.n	8002650 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0310 	and.w	r3, r3, #16
 800268e:	2b10      	cmp	r3, #16
 8002690:	d10a      	bne.n	80026a8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002692:	2300      	movs	r3, #0
 8002694:	60fb      	str	r3, [r7, #12]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	60fb      	str	r3, [r7, #12]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	60fb      	str	r3, [r7, #12]
 80026a6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80026ac:	4619      	mov	r1, r3
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f7ff fdf9 	bl	80022a6 <HAL_UARTEx_RxEventCallback>
 80026b4:	e002      	b.n	80026bc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f7fd ffea 	bl	8000690 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80026bc:	2300      	movs	r3, #0
 80026be:	e002      	b.n	80026c6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80026c0:	2300      	movs	r3, #0
 80026c2:	e000      	b.n	80026c6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80026c4:	2302      	movs	r3, #2
  }
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3730      	adds	r7, #48	@ 0x30
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
	...

080026d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	691b      	ldr	r3, [r3, #16]
 80026de:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	68da      	ldr	r2, [r3, #12]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	430a      	orrs	r2, r1
 80026ec:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	689a      	ldr	r2, [r3, #8]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	691b      	ldr	r3, [r3, #16]
 80026f6:	431a      	orrs	r2, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	695b      	ldr	r3, [r3, #20]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800270a:	f023 030c 	bic.w	r3, r3, #12
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	6812      	ldr	r2, [r2, #0]
 8002712:	68b9      	ldr	r1, [r7, #8]
 8002714:	430b      	orrs	r3, r1
 8002716:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	695b      	ldr	r3, [r3, #20]
 800271e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	699a      	ldr	r2, [r3, #24]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	430a      	orrs	r2, r1
 800272c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a2c      	ldr	r2, [pc, #176]	@ (80027e4 <UART_SetConfig+0x114>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d103      	bne.n	8002740 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002738:	f7ff f982 	bl	8001a40 <HAL_RCC_GetPCLK2Freq>
 800273c:	60f8      	str	r0, [r7, #12]
 800273e:	e002      	b.n	8002746 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002740:	f7ff f96a 	bl	8001a18 <HAL_RCC_GetPCLK1Freq>
 8002744:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002746:	68fa      	ldr	r2, [r7, #12]
 8002748:	4613      	mov	r3, r2
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	4413      	add	r3, r2
 800274e:	009a      	lsls	r2, r3, #2
 8002750:	441a      	add	r2, r3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	fbb2 f3f3 	udiv	r3, r2, r3
 800275c:	4a22      	ldr	r2, [pc, #136]	@ (80027e8 <UART_SetConfig+0x118>)
 800275e:	fba2 2303 	umull	r2, r3, r2, r3
 8002762:	095b      	lsrs	r3, r3, #5
 8002764:	0119      	lsls	r1, r3, #4
 8002766:	68fa      	ldr	r2, [r7, #12]
 8002768:	4613      	mov	r3, r2
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	4413      	add	r3, r2
 800276e:	009a      	lsls	r2, r3, #2
 8002770:	441a      	add	r2, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	fbb2 f2f3 	udiv	r2, r2, r3
 800277c:	4b1a      	ldr	r3, [pc, #104]	@ (80027e8 <UART_SetConfig+0x118>)
 800277e:	fba3 0302 	umull	r0, r3, r3, r2
 8002782:	095b      	lsrs	r3, r3, #5
 8002784:	2064      	movs	r0, #100	@ 0x64
 8002786:	fb00 f303 	mul.w	r3, r0, r3
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	011b      	lsls	r3, r3, #4
 800278e:	3332      	adds	r3, #50	@ 0x32
 8002790:	4a15      	ldr	r2, [pc, #84]	@ (80027e8 <UART_SetConfig+0x118>)
 8002792:	fba2 2303 	umull	r2, r3, r2, r3
 8002796:	095b      	lsrs	r3, r3, #5
 8002798:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800279c:	4419      	add	r1, r3
 800279e:	68fa      	ldr	r2, [r7, #12]
 80027a0:	4613      	mov	r3, r2
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	4413      	add	r3, r2
 80027a6:	009a      	lsls	r2, r3, #2
 80027a8:	441a      	add	r2, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80027b4:	4b0c      	ldr	r3, [pc, #48]	@ (80027e8 <UART_SetConfig+0x118>)
 80027b6:	fba3 0302 	umull	r0, r3, r3, r2
 80027ba:	095b      	lsrs	r3, r3, #5
 80027bc:	2064      	movs	r0, #100	@ 0x64
 80027be:	fb00 f303 	mul.w	r3, r0, r3
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	011b      	lsls	r3, r3, #4
 80027c6:	3332      	adds	r3, #50	@ 0x32
 80027c8:	4a07      	ldr	r2, [pc, #28]	@ (80027e8 <UART_SetConfig+0x118>)
 80027ca:	fba2 2303 	umull	r2, r3, r2, r3
 80027ce:	095b      	lsrs	r3, r3, #5
 80027d0:	f003 020f 	and.w	r2, r3, #15
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	440a      	add	r2, r1
 80027da:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80027dc:	bf00      	nop
 80027de:	3710      	adds	r7, #16
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	40013800 	.word	0x40013800
 80027e8:	51eb851f 	.word	0x51eb851f

080027ec <siprintf>:
 80027ec:	b40e      	push	{r1, r2, r3}
 80027ee:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80027f2:	b500      	push	{lr}
 80027f4:	b09c      	sub	sp, #112	@ 0x70
 80027f6:	ab1d      	add	r3, sp, #116	@ 0x74
 80027f8:	9002      	str	r0, [sp, #8]
 80027fa:	9006      	str	r0, [sp, #24]
 80027fc:	9107      	str	r1, [sp, #28]
 80027fe:	9104      	str	r1, [sp, #16]
 8002800:	4808      	ldr	r0, [pc, #32]	@ (8002824 <siprintf+0x38>)
 8002802:	4909      	ldr	r1, [pc, #36]	@ (8002828 <siprintf+0x3c>)
 8002804:	f853 2b04 	ldr.w	r2, [r3], #4
 8002808:	9105      	str	r1, [sp, #20]
 800280a:	6800      	ldr	r0, [r0, #0]
 800280c:	a902      	add	r1, sp, #8
 800280e:	9301      	str	r3, [sp, #4]
 8002810:	f000 f9ec 	bl	8002bec <_svfiprintf_r>
 8002814:	2200      	movs	r2, #0
 8002816:	9b02      	ldr	r3, [sp, #8]
 8002818:	701a      	strb	r2, [r3, #0]
 800281a:	b01c      	add	sp, #112	@ 0x70
 800281c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002820:	b003      	add	sp, #12
 8002822:	4770      	bx	lr
 8002824:	2000003c 	.word	0x2000003c
 8002828:	ffff0208 	.word	0xffff0208

0800282c <siscanf>:
 800282c:	b40e      	push	{r1, r2, r3}
 800282e:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8002832:	b530      	push	{r4, r5, lr}
 8002834:	b09c      	sub	sp, #112	@ 0x70
 8002836:	ac1f      	add	r4, sp, #124	@ 0x7c
 8002838:	f854 5b04 	ldr.w	r5, [r4], #4
 800283c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8002840:	9002      	str	r0, [sp, #8]
 8002842:	9006      	str	r0, [sp, #24]
 8002844:	f7fd fc82 	bl	800014c <strlen>
 8002848:	4b0b      	ldr	r3, [pc, #44]	@ (8002878 <siscanf+0x4c>)
 800284a:	9003      	str	r0, [sp, #12]
 800284c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800284e:	2300      	movs	r3, #0
 8002850:	930f      	str	r3, [sp, #60]	@ 0x3c
 8002852:	9314      	str	r3, [sp, #80]	@ 0x50
 8002854:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002858:	9007      	str	r0, [sp, #28]
 800285a:	4808      	ldr	r0, [pc, #32]	@ (800287c <siscanf+0x50>)
 800285c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002860:	462a      	mov	r2, r5
 8002862:	4623      	mov	r3, r4
 8002864:	a902      	add	r1, sp, #8
 8002866:	6800      	ldr	r0, [r0, #0]
 8002868:	9401      	str	r4, [sp, #4]
 800286a:	f000 fb13 	bl	8002e94 <__ssvfiscanf_r>
 800286e:	b01c      	add	sp, #112	@ 0x70
 8002870:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002874:	b003      	add	sp, #12
 8002876:	4770      	bx	lr
 8002878:	08002881 	.word	0x08002881
 800287c:	2000003c 	.word	0x2000003c

08002880 <__seofread>:
 8002880:	2000      	movs	r0, #0
 8002882:	4770      	bx	lr

08002884 <memset>:
 8002884:	4603      	mov	r3, r0
 8002886:	4402      	add	r2, r0
 8002888:	4293      	cmp	r3, r2
 800288a:	d100      	bne.n	800288e <memset+0xa>
 800288c:	4770      	bx	lr
 800288e:	f803 1b01 	strb.w	r1, [r3], #1
 8002892:	e7f9      	b.n	8002888 <memset+0x4>

08002894 <strpbrk>:
 8002894:	b570      	push	{r4, r5, r6, lr}
 8002896:	4603      	mov	r3, r0
 8002898:	7800      	ldrb	r0, [r0, #0]
 800289a:	b190      	cbz	r0, 80028c2 <strpbrk+0x2e>
 800289c:	460c      	mov	r4, r1
 800289e:	4618      	mov	r0, r3
 80028a0:	f813 5b01 	ldrb.w	r5, [r3], #1
 80028a4:	b14d      	cbz	r5, 80028ba <strpbrk+0x26>
 80028a6:	460a      	mov	r2, r1
 80028a8:	e001      	b.n	80028ae <strpbrk+0x1a>
 80028aa:	42ae      	cmp	r6, r5
 80028ac:	d005      	beq.n	80028ba <strpbrk+0x26>
 80028ae:	4614      	mov	r4, r2
 80028b0:	f812 6b01 	ldrb.w	r6, [r2], #1
 80028b4:	2e00      	cmp	r6, #0
 80028b6:	d1f8      	bne.n	80028aa <strpbrk+0x16>
 80028b8:	e7f1      	b.n	800289e <strpbrk+0xa>
 80028ba:	7823      	ldrb	r3, [r4, #0]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	bf08      	it	eq
 80028c0:	2000      	moveq	r0, #0
 80028c2:	bd70      	pop	{r4, r5, r6, pc}

080028c4 <strstr>:
 80028c4:	780a      	ldrb	r2, [r1, #0]
 80028c6:	b570      	push	{r4, r5, r6, lr}
 80028c8:	b96a      	cbnz	r2, 80028e6 <strstr+0x22>
 80028ca:	bd70      	pop	{r4, r5, r6, pc}
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d109      	bne.n	80028e4 <strstr+0x20>
 80028d0:	460c      	mov	r4, r1
 80028d2:	4605      	mov	r5, r0
 80028d4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d0f6      	beq.n	80028ca <strstr+0x6>
 80028dc:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80028e0:	429e      	cmp	r6, r3
 80028e2:	d0f7      	beq.n	80028d4 <strstr+0x10>
 80028e4:	3001      	adds	r0, #1
 80028e6:	7803      	ldrb	r3, [r0, #0]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d1ef      	bne.n	80028cc <strstr+0x8>
 80028ec:	4618      	mov	r0, r3
 80028ee:	e7ec      	b.n	80028ca <strstr+0x6>

080028f0 <__errno>:
 80028f0:	4b01      	ldr	r3, [pc, #4]	@ (80028f8 <__errno+0x8>)
 80028f2:	6818      	ldr	r0, [r3, #0]
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	2000003c 	.word	0x2000003c

080028fc <__libc_init_array>:
 80028fc:	b570      	push	{r4, r5, r6, lr}
 80028fe:	2600      	movs	r6, #0
 8002900:	4d0c      	ldr	r5, [pc, #48]	@ (8002934 <__libc_init_array+0x38>)
 8002902:	4c0d      	ldr	r4, [pc, #52]	@ (8002938 <__libc_init_array+0x3c>)
 8002904:	1b64      	subs	r4, r4, r5
 8002906:	10a4      	asrs	r4, r4, #2
 8002908:	42a6      	cmp	r6, r4
 800290a:	d109      	bne.n	8002920 <__libc_init_array+0x24>
 800290c:	f001 f8ec 	bl	8003ae8 <_init>
 8002910:	2600      	movs	r6, #0
 8002912:	4d0a      	ldr	r5, [pc, #40]	@ (800293c <__libc_init_array+0x40>)
 8002914:	4c0a      	ldr	r4, [pc, #40]	@ (8002940 <__libc_init_array+0x44>)
 8002916:	1b64      	subs	r4, r4, r5
 8002918:	10a4      	asrs	r4, r4, #2
 800291a:	42a6      	cmp	r6, r4
 800291c:	d105      	bne.n	800292a <__libc_init_array+0x2e>
 800291e:	bd70      	pop	{r4, r5, r6, pc}
 8002920:	f855 3b04 	ldr.w	r3, [r5], #4
 8002924:	4798      	blx	r3
 8002926:	3601      	adds	r6, #1
 8002928:	e7ee      	b.n	8002908 <__libc_init_array+0xc>
 800292a:	f855 3b04 	ldr.w	r3, [r5], #4
 800292e:	4798      	blx	r3
 8002930:	3601      	adds	r6, #1
 8002932:	e7f2      	b.n	800291a <__libc_init_array+0x1e>
 8002934:	08003e88 	.word	0x08003e88
 8002938:	08003e88 	.word	0x08003e88
 800293c:	08003e88 	.word	0x08003e88
 8002940:	08003e8c 	.word	0x08003e8c

08002944 <__retarget_lock_acquire_recursive>:
 8002944:	4770      	bx	lr

08002946 <__retarget_lock_release_recursive>:
 8002946:	4770      	bx	lr

08002948 <_free_r>:
 8002948:	b538      	push	{r3, r4, r5, lr}
 800294a:	4605      	mov	r5, r0
 800294c:	2900      	cmp	r1, #0
 800294e:	d040      	beq.n	80029d2 <_free_r+0x8a>
 8002950:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002954:	1f0c      	subs	r4, r1, #4
 8002956:	2b00      	cmp	r3, #0
 8002958:	bfb8      	it	lt
 800295a:	18e4      	addlt	r4, r4, r3
 800295c:	f000 f8de 	bl	8002b1c <__malloc_lock>
 8002960:	4a1c      	ldr	r2, [pc, #112]	@ (80029d4 <_free_r+0x8c>)
 8002962:	6813      	ldr	r3, [r2, #0]
 8002964:	b933      	cbnz	r3, 8002974 <_free_r+0x2c>
 8002966:	6063      	str	r3, [r4, #4]
 8002968:	6014      	str	r4, [r2, #0]
 800296a:	4628      	mov	r0, r5
 800296c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002970:	f000 b8da 	b.w	8002b28 <__malloc_unlock>
 8002974:	42a3      	cmp	r3, r4
 8002976:	d908      	bls.n	800298a <_free_r+0x42>
 8002978:	6820      	ldr	r0, [r4, #0]
 800297a:	1821      	adds	r1, r4, r0
 800297c:	428b      	cmp	r3, r1
 800297e:	bf01      	itttt	eq
 8002980:	6819      	ldreq	r1, [r3, #0]
 8002982:	685b      	ldreq	r3, [r3, #4]
 8002984:	1809      	addeq	r1, r1, r0
 8002986:	6021      	streq	r1, [r4, #0]
 8002988:	e7ed      	b.n	8002966 <_free_r+0x1e>
 800298a:	461a      	mov	r2, r3
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	b10b      	cbz	r3, 8002994 <_free_r+0x4c>
 8002990:	42a3      	cmp	r3, r4
 8002992:	d9fa      	bls.n	800298a <_free_r+0x42>
 8002994:	6811      	ldr	r1, [r2, #0]
 8002996:	1850      	adds	r0, r2, r1
 8002998:	42a0      	cmp	r0, r4
 800299a:	d10b      	bne.n	80029b4 <_free_r+0x6c>
 800299c:	6820      	ldr	r0, [r4, #0]
 800299e:	4401      	add	r1, r0
 80029a0:	1850      	adds	r0, r2, r1
 80029a2:	4283      	cmp	r3, r0
 80029a4:	6011      	str	r1, [r2, #0]
 80029a6:	d1e0      	bne.n	800296a <_free_r+0x22>
 80029a8:	6818      	ldr	r0, [r3, #0]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	4408      	add	r0, r1
 80029ae:	6010      	str	r0, [r2, #0]
 80029b0:	6053      	str	r3, [r2, #4]
 80029b2:	e7da      	b.n	800296a <_free_r+0x22>
 80029b4:	d902      	bls.n	80029bc <_free_r+0x74>
 80029b6:	230c      	movs	r3, #12
 80029b8:	602b      	str	r3, [r5, #0]
 80029ba:	e7d6      	b.n	800296a <_free_r+0x22>
 80029bc:	6820      	ldr	r0, [r4, #0]
 80029be:	1821      	adds	r1, r4, r0
 80029c0:	428b      	cmp	r3, r1
 80029c2:	bf01      	itttt	eq
 80029c4:	6819      	ldreq	r1, [r3, #0]
 80029c6:	685b      	ldreq	r3, [r3, #4]
 80029c8:	1809      	addeq	r1, r1, r0
 80029ca:	6021      	streq	r1, [r4, #0]
 80029cc:	6063      	str	r3, [r4, #4]
 80029ce:	6054      	str	r4, [r2, #4]
 80029d0:	e7cb      	b.n	800296a <_free_r+0x22>
 80029d2:	bd38      	pop	{r3, r4, r5, pc}
 80029d4:	200003fc 	.word	0x200003fc

080029d8 <sbrk_aligned>:
 80029d8:	b570      	push	{r4, r5, r6, lr}
 80029da:	4e0f      	ldr	r6, [pc, #60]	@ (8002a18 <sbrk_aligned+0x40>)
 80029dc:	460c      	mov	r4, r1
 80029de:	6831      	ldr	r1, [r6, #0]
 80029e0:	4605      	mov	r5, r0
 80029e2:	b911      	cbnz	r1, 80029ea <sbrk_aligned+0x12>
 80029e4:	f000 ff32 	bl	800384c <_sbrk_r>
 80029e8:	6030      	str	r0, [r6, #0]
 80029ea:	4621      	mov	r1, r4
 80029ec:	4628      	mov	r0, r5
 80029ee:	f000 ff2d 	bl	800384c <_sbrk_r>
 80029f2:	1c43      	adds	r3, r0, #1
 80029f4:	d103      	bne.n	80029fe <sbrk_aligned+0x26>
 80029f6:	f04f 34ff 	mov.w	r4, #4294967295
 80029fa:	4620      	mov	r0, r4
 80029fc:	bd70      	pop	{r4, r5, r6, pc}
 80029fe:	1cc4      	adds	r4, r0, #3
 8002a00:	f024 0403 	bic.w	r4, r4, #3
 8002a04:	42a0      	cmp	r0, r4
 8002a06:	d0f8      	beq.n	80029fa <sbrk_aligned+0x22>
 8002a08:	1a21      	subs	r1, r4, r0
 8002a0a:	4628      	mov	r0, r5
 8002a0c:	f000 ff1e 	bl	800384c <_sbrk_r>
 8002a10:	3001      	adds	r0, #1
 8002a12:	d1f2      	bne.n	80029fa <sbrk_aligned+0x22>
 8002a14:	e7ef      	b.n	80029f6 <sbrk_aligned+0x1e>
 8002a16:	bf00      	nop
 8002a18:	200003f8 	.word	0x200003f8

08002a1c <_malloc_r>:
 8002a1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002a20:	1ccd      	adds	r5, r1, #3
 8002a22:	f025 0503 	bic.w	r5, r5, #3
 8002a26:	3508      	adds	r5, #8
 8002a28:	2d0c      	cmp	r5, #12
 8002a2a:	bf38      	it	cc
 8002a2c:	250c      	movcc	r5, #12
 8002a2e:	2d00      	cmp	r5, #0
 8002a30:	4606      	mov	r6, r0
 8002a32:	db01      	blt.n	8002a38 <_malloc_r+0x1c>
 8002a34:	42a9      	cmp	r1, r5
 8002a36:	d904      	bls.n	8002a42 <_malloc_r+0x26>
 8002a38:	230c      	movs	r3, #12
 8002a3a:	6033      	str	r3, [r6, #0]
 8002a3c:	2000      	movs	r0, #0
 8002a3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002a42:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002b18 <_malloc_r+0xfc>
 8002a46:	f000 f869 	bl	8002b1c <__malloc_lock>
 8002a4a:	f8d8 3000 	ldr.w	r3, [r8]
 8002a4e:	461c      	mov	r4, r3
 8002a50:	bb44      	cbnz	r4, 8002aa4 <_malloc_r+0x88>
 8002a52:	4629      	mov	r1, r5
 8002a54:	4630      	mov	r0, r6
 8002a56:	f7ff ffbf 	bl	80029d8 <sbrk_aligned>
 8002a5a:	1c43      	adds	r3, r0, #1
 8002a5c:	4604      	mov	r4, r0
 8002a5e:	d158      	bne.n	8002b12 <_malloc_r+0xf6>
 8002a60:	f8d8 4000 	ldr.w	r4, [r8]
 8002a64:	4627      	mov	r7, r4
 8002a66:	2f00      	cmp	r7, #0
 8002a68:	d143      	bne.n	8002af2 <_malloc_r+0xd6>
 8002a6a:	2c00      	cmp	r4, #0
 8002a6c:	d04b      	beq.n	8002b06 <_malloc_r+0xea>
 8002a6e:	6823      	ldr	r3, [r4, #0]
 8002a70:	4639      	mov	r1, r7
 8002a72:	4630      	mov	r0, r6
 8002a74:	eb04 0903 	add.w	r9, r4, r3
 8002a78:	f000 fee8 	bl	800384c <_sbrk_r>
 8002a7c:	4581      	cmp	r9, r0
 8002a7e:	d142      	bne.n	8002b06 <_malloc_r+0xea>
 8002a80:	6821      	ldr	r1, [r4, #0]
 8002a82:	4630      	mov	r0, r6
 8002a84:	1a6d      	subs	r5, r5, r1
 8002a86:	4629      	mov	r1, r5
 8002a88:	f7ff ffa6 	bl	80029d8 <sbrk_aligned>
 8002a8c:	3001      	adds	r0, #1
 8002a8e:	d03a      	beq.n	8002b06 <_malloc_r+0xea>
 8002a90:	6823      	ldr	r3, [r4, #0]
 8002a92:	442b      	add	r3, r5
 8002a94:	6023      	str	r3, [r4, #0]
 8002a96:	f8d8 3000 	ldr.w	r3, [r8]
 8002a9a:	685a      	ldr	r2, [r3, #4]
 8002a9c:	bb62      	cbnz	r2, 8002af8 <_malloc_r+0xdc>
 8002a9e:	f8c8 7000 	str.w	r7, [r8]
 8002aa2:	e00f      	b.n	8002ac4 <_malloc_r+0xa8>
 8002aa4:	6822      	ldr	r2, [r4, #0]
 8002aa6:	1b52      	subs	r2, r2, r5
 8002aa8:	d420      	bmi.n	8002aec <_malloc_r+0xd0>
 8002aaa:	2a0b      	cmp	r2, #11
 8002aac:	d917      	bls.n	8002ade <_malloc_r+0xc2>
 8002aae:	1961      	adds	r1, r4, r5
 8002ab0:	42a3      	cmp	r3, r4
 8002ab2:	6025      	str	r5, [r4, #0]
 8002ab4:	bf18      	it	ne
 8002ab6:	6059      	strne	r1, [r3, #4]
 8002ab8:	6863      	ldr	r3, [r4, #4]
 8002aba:	bf08      	it	eq
 8002abc:	f8c8 1000 	streq.w	r1, [r8]
 8002ac0:	5162      	str	r2, [r4, r5]
 8002ac2:	604b      	str	r3, [r1, #4]
 8002ac4:	4630      	mov	r0, r6
 8002ac6:	f000 f82f 	bl	8002b28 <__malloc_unlock>
 8002aca:	f104 000b 	add.w	r0, r4, #11
 8002ace:	1d23      	adds	r3, r4, #4
 8002ad0:	f020 0007 	bic.w	r0, r0, #7
 8002ad4:	1ac2      	subs	r2, r0, r3
 8002ad6:	bf1c      	itt	ne
 8002ad8:	1a1b      	subne	r3, r3, r0
 8002ada:	50a3      	strne	r3, [r4, r2]
 8002adc:	e7af      	b.n	8002a3e <_malloc_r+0x22>
 8002ade:	6862      	ldr	r2, [r4, #4]
 8002ae0:	42a3      	cmp	r3, r4
 8002ae2:	bf0c      	ite	eq
 8002ae4:	f8c8 2000 	streq.w	r2, [r8]
 8002ae8:	605a      	strne	r2, [r3, #4]
 8002aea:	e7eb      	b.n	8002ac4 <_malloc_r+0xa8>
 8002aec:	4623      	mov	r3, r4
 8002aee:	6864      	ldr	r4, [r4, #4]
 8002af0:	e7ae      	b.n	8002a50 <_malloc_r+0x34>
 8002af2:	463c      	mov	r4, r7
 8002af4:	687f      	ldr	r7, [r7, #4]
 8002af6:	e7b6      	b.n	8002a66 <_malloc_r+0x4a>
 8002af8:	461a      	mov	r2, r3
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	42a3      	cmp	r3, r4
 8002afe:	d1fb      	bne.n	8002af8 <_malloc_r+0xdc>
 8002b00:	2300      	movs	r3, #0
 8002b02:	6053      	str	r3, [r2, #4]
 8002b04:	e7de      	b.n	8002ac4 <_malloc_r+0xa8>
 8002b06:	230c      	movs	r3, #12
 8002b08:	4630      	mov	r0, r6
 8002b0a:	6033      	str	r3, [r6, #0]
 8002b0c:	f000 f80c 	bl	8002b28 <__malloc_unlock>
 8002b10:	e794      	b.n	8002a3c <_malloc_r+0x20>
 8002b12:	6005      	str	r5, [r0, #0]
 8002b14:	e7d6      	b.n	8002ac4 <_malloc_r+0xa8>
 8002b16:	bf00      	nop
 8002b18:	200003fc 	.word	0x200003fc

08002b1c <__malloc_lock>:
 8002b1c:	4801      	ldr	r0, [pc, #4]	@ (8002b24 <__malloc_lock+0x8>)
 8002b1e:	f7ff bf11 	b.w	8002944 <__retarget_lock_acquire_recursive>
 8002b22:	bf00      	nop
 8002b24:	200003f4 	.word	0x200003f4

08002b28 <__malloc_unlock>:
 8002b28:	4801      	ldr	r0, [pc, #4]	@ (8002b30 <__malloc_unlock+0x8>)
 8002b2a:	f7ff bf0c 	b.w	8002946 <__retarget_lock_release_recursive>
 8002b2e:	bf00      	nop
 8002b30:	200003f4 	.word	0x200003f4

08002b34 <__ssputs_r>:
 8002b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b38:	461f      	mov	r7, r3
 8002b3a:	688e      	ldr	r6, [r1, #8]
 8002b3c:	4682      	mov	sl, r0
 8002b3e:	42be      	cmp	r6, r7
 8002b40:	460c      	mov	r4, r1
 8002b42:	4690      	mov	r8, r2
 8002b44:	680b      	ldr	r3, [r1, #0]
 8002b46:	d82d      	bhi.n	8002ba4 <__ssputs_r+0x70>
 8002b48:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002b4c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002b50:	d026      	beq.n	8002ba0 <__ssputs_r+0x6c>
 8002b52:	6965      	ldr	r5, [r4, #20]
 8002b54:	6909      	ldr	r1, [r1, #16]
 8002b56:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002b5a:	eba3 0901 	sub.w	r9, r3, r1
 8002b5e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002b62:	1c7b      	adds	r3, r7, #1
 8002b64:	444b      	add	r3, r9
 8002b66:	106d      	asrs	r5, r5, #1
 8002b68:	429d      	cmp	r5, r3
 8002b6a:	bf38      	it	cc
 8002b6c:	461d      	movcc	r5, r3
 8002b6e:	0553      	lsls	r3, r2, #21
 8002b70:	d527      	bpl.n	8002bc2 <__ssputs_r+0x8e>
 8002b72:	4629      	mov	r1, r5
 8002b74:	f7ff ff52 	bl	8002a1c <_malloc_r>
 8002b78:	4606      	mov	r6, r0
 8002b7a:	b360      	cbz	r0, 8002bd6 <__ssputs_r+0xa2>
 8002b7c:	464a      	mov	r2, r9
 8002b7e:	6921      	ldr	r1, [r4, #16]
 8002b80:	f000 fe82 	bl	8003888 <memcpy>
 8002b84:	89a3      	ldrh	r3, [r4, #12]
 8002b86:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002b8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b8e:	81a3      	strh	r3, [r4, #12]
 8002b90:	6126      	str	r6, [r4, #16]
 8002b92:	444e      	add	r6, r9
 8002b94:	6026      	str	r6, [r4, #0]
 8002b96:	463e      	mov	r6, r7
 8002b98:	6165      	str	r5, [r4, #20]
 8002b9a:	eba5 0509 	sub.w	r5, r5, r9
 8002b9e:	60a5      	str	r5, [r4, #8]
 8002ba0:	42be      	cmp	r6, r7
 8002ba2:	d900      	bls.n	8002ba6 <__ssputs_r+0x72>
 8002ba4:	463e      	mov	r6, r7
 8002ba6:	4632      	mov	r2, r6
 8002ba8:	4641      	mov	r1, r8
 8002baa:	6820      	ldr	r0, [r4, #0]
 8002bac:	f000 fe33 	bl	8003816 <memmove>
 8002bb0:	2000      	movs	r0, #0
 8002bb2:	68a3      	ldr	r3, [r4, #8]
 8002bb4:	1b9b      	subs	r3, r3, r6
 8002bb6:	60a3      	str	r3, [r4, #8]
 8002bb8:	6823      	ldr	r3, [r4, #0]
 8002bba:	4433      	add	r3, r6
 8002bbc:	6023      	str	r3, [r4, #0]
 8002bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002bc2:	462a      	mov	r2, r5
 8002bc4:	f000 fe6e 	bl	80038a4 <_realloc_r>
 8002bc8:	4606      	mov	r6, r0
 8002bca:	2800      	cmp	r0, #0
 8002bcc:	d1e0      	bne.n	8002b90 <__ssputs_r+0x5c>
 8002bce:	4650      	mov	r0, sl
 8002bd0:	6921      	ldr	r1, [r4, #16]
 8002bd2:	f7ff feb9 	bl	8002948 <_free_r>
 8002bd6:	230c      	movs	r3, #12
 8002bd8:	f8ca 3000 	str.w	r3, [sl]
 8002bdc:	89a3      	ldrh	r3, [r4, #12]
 8002bde:	f04f 30ff 	mov.w	r0, #4294967295
 8002be2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002be6:	81a3      	strh	r3, [r4, #12]
 8002be8:	e7e9      	b.n	8002bbe <__ssputs_r+0x8a>
	...

08002bec <_svfiprintf_r>:
 8002bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bf0:	4698      	mov	r8, r3
 8002bf2:	898b      	ldrh	r3, [r1, #12]
 8002bf4:	4607      	mov	r7, r0
 8002bf6:	061b      	lsls	r3, r3, #24
 8002bf8:	460d      	mov	r5, r1
 8002bfa:	4614      	mov	r4, r2
 8002bfc:	b09d      	sub	sp, #116	@ 0x74
 8002bfe:	d510      	bpl.n	8002c22 <_svfiprintf_r+0x36>
 8002c00:	690b      	ldr	r3, [r1, #16]
 8002c02:	b973      	cbnz	r3, 8002c22 <_svfiprintf_r+0x36>
 8002c04:	2140      	movs	r1, #64	@ 0x40
 8002c06:	f7ff ff09 	bl	8002a1c <_malloc_r>
 8002c0a:	6028      	str	r0, [r5, #0]
 8002c0c:	6128      	str	r0, [r5, #16]
 8002c0e:	b930      	cbnz	r0, 8002c1e <_svfiprintf_r+0x32>
 8002c10:	230c      	movs	r3, #12
 8002c12:	603b      	str	r3, [r7, #0]
 8002c14:	f04f 30ff 	mov.w	r0, #4294967295
 8002c18:	b01d      	add	sp, #116	@ 0x74
 8002c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c1e:	2340      	movs	r3, #64	@ 0x40
 8002c20:	616b      	str	r3, [r5, #20]
 8002c22:	2300      	movs	r3, #0
 8002c24:	9309      	str	r3, [sp, #36]	@ 0x24
 8002c26:	2320      	movs	r3, #32
 8002c28:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002c2c:	2330      	movs	r3, #48	@ 0x30
 8002c2e:	f04f 0901 	mov.w	r9, #1
 8002c32:	f8cd 800c 	str.w	r8, [sp, #12]
 8002c36:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8002dd0 <_svfiprintf_r+0x1e4>
 8002c3a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002c3e:	4623      	mov	r3, r4
 8002c40:	469a      	mov	sl, r3
 8002c42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002c46:	b10a      	cbz	r2, 8002c4c <_svfiprintf_r+0x60>
 8002c48:	2a25      	cmp	r2, #37	@ 0x25
 8002c4a:	d1f9      	bne.n	8002c40 <_svfiprintf_r+0x54>
 8002c4c:	ebba 0b04 	subs.w	fp, sl, r4
 8002c50:	d00b      	beq.n	8002c6a <_svfiprintf_r+0x7e>
 8002c52:	465b      	mov	r3, fp
 8002c54:	4622      	mov	r2, r4
 8002c56:	4629      	mov	r1, r5
 8002c58:	4638      	mov	r0, r7
 8002c5a:	f7ff ff6b 	bl	8002b34 <__ssputs_r>
 8002c5e:	3001      	adds	r0, #1
 8002c60:	f000 80a7 	beq.w	8002db2 <_svfiprintf_r+0x1c6>
 8002c64:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002c66:	445a      	add	r2, fp
 8002c68:	9209      	str	r2, [sp, #36]	@ 0x24
 8002c6a:	f89a 3000 	ldrb.w	r3, [sl]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	f000 809f 	beq.w	8002db2 <_svfiprintf_r+0x1c6>
 8002c74:	2300      	movs	r3, #0
 8002c76:	f04f 32ff 	mov.w	r2, #4294967295
 8002c7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002c7e:	f10a 0a01 	add.w	sl, sl, #1
 8002c82:	9304      	str	r3, [sp, #16]
 8002c84:	9307      	str	r3, [sp, #28]
 8002c86:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002c8a:	931a      	str	r3, [sp, #104]	@ 0x68
 8002c8c:	4654      	mov	r4, sl
 8002c8e:	2205      	movs	r2, #5
 8002c90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c94:	484e      	ldr	r0, [pc, #312]	@ (8002dd0 <_svfiprintf_r+0x1e4>)
 8002c96:	f000 fde9 	bl	800386c <memchr>
 8002c9a:	9a04      	ldr	r2, [sp, #16]
 8002c9c:	b9d8      	cbnz	r0, 8002cd6 <_svfiprintf_r+0xea>
 8002c9e:	06d0      	lsls	r0, r2, #27
 8002ca0:	bf44      	itt	mi
 8002ca2:	2320      	movmi	r3, #32
 8002ca4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002ca8:	0711      	lsls	r1, r2, #28
 8002caa:	bf44      	itt	mi
 8002cac:	232b      	movmi	r3, #43	@ 0x2b
 8002cae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002cb2:	f89a 3000 	ldrb.w	r3, [sl]
 8002cb6:	2b2a      	cmp	r3, #42	@ 0x2a
 8002cb8:	d015      	beq.n	8002ce6 <_svfiprintf_r+0xfa>
 8002cba:	4654      	mov	r4, sl
 8002cbc:	2000      	movs	r0, #0
 8002cbe:	f04f 0c0a 	mov.w	ip, #10
 8002cc2:	9a07      	ldr	r2, [sp, #28]
 8002cc4:	4621      	mov	r1, r4
 8002cc6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002cca:	3b30      	subs	r3, #48	@ 0x30
 8002ccc:	2b09      	cmp	r3, #9
 8002cce:	d94b      	bls.n	8002d68 <_svfiprintf_r+0x17c>
 8002cd0:	b1b0      	cbz	r0, 8002d00 <_svfiprintf_r+0x114>
 8002cd2:	9207      	str	r2, [sp, #28]
 8002cd4:	e014      	b.n	8002d00 <_svfiprintf_r+0x114>
 8002cd6:	eba0 0308 	sub.w	r3, r0, r8
 8002cda:	fa09 f303 	lsl.w	r3, r9, r3
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	46a2      	mov	sl, r4
 8002ce2:	9304      	str	r3, [sp, #16]
 8002ce4:	e7d2      	b.n	8002c8c <_svfiprintf_r+0xa0>
 8002ce6:	9b03      	ldr	r3, [sp, #12]
 8002ce8:	1d19      	adds	r1, r3, #4
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	9103      	str	r1, [sp, #12]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	bfbb      	ittet	lt
 8002cf2:	425b      	neglt	r3, r3
 8002cf4:	f042 0202 	orrlt.w	r2, r2, #2
 8002cf8:	9307      	strge	r3, [sp, #28]
 8002cfa:	9307      	strlt	r3, [sp, #28]
 8002cfc:	bfb8      	it	lt
 8002cfe:	9204      	strlt	r2, [sp, #16]
 8002d00:	7823      	ldrb	r3, [r4, #0]
 8002d02:	2b2e      	cmp	r3, #46	@ 0x2e
 8002d04:	d10a      	bne.n	8002d1c <_svfiprintf_r+0x130>
 8002d06:	7863      	ldrb	r3, [r4, #1]
 8002d08:	2b2a      	cmp	r3, #42	@ 0x2a
 8002d0a:	d132      	bne.n	8002d72 <_svfiprintf_r+0x186>
 8002d0c:	9b03      	ldr	r3, [sp, #12]
 8002d0e:	3402      	adds	r4, #2
 8002d10:	1d1a      	adds	r2, r3, #4
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	9203      	str	r2, [sp, #12]
 8002d16:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002d1a:	9305      	str	r3, [sp, #20]
 8002d1c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8002dd4 <_svfiprintf_r+0x1e8>
 8002d20:	2203      	movs	r2, #3
 8002d22:	4650      	mov	r0, sl
 8002d24:	7821      	ldrb	r1, [r4, #0]
 8002d26:	f000 fda1 	bl	800386c <memchr>
 8002d2a:	b138      	cbz	r0, 8002d3c <_svfiprintf_r+0x150>
 8002d2c:	2240      	movs	r2, #64	@ 0x40
 8002d2e:	9b04      	ldr	r3, [sp, #16]
 8002d30:	eba0 000a 	sub.w	r0, r0, sl
 8002d34:	4082      	lsls	r2, r0
 8002d36:	4313      	orrs	r3, r2
 8002d38:	3401      	adds	r4, #1
 8002d3a:	9304      	str	r3, [sp, #16]
 8002d3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d40:	2206      	movs	r2, #6
 8002d42:	4825      	ldr	r0, [pc, #148]	@ (8002dd8 <_svfiprintf_r+0x1ec>)
 8002d44:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002d48:	f000 fd90 	bl	800386c <memchr>
 8002d4c:	2800      	cmp	r0, #0
 8002d4e:	d036      	beq.n	8002dbe <_svfiprintf_r+0x1d2>
 8002d50:	4b22      	ldr	r3, [pc, #136]	@ (8002ddc <_svfiprintf_r+0x1f0>)
 8002d52:	bb1b      	cbnz	r3, 8002d9c <_svfiprintf_r+0x1b0>
 8002d54:	9b03      	ldr	r3, [sp, #12]
 8002d56:	3307      	adds	r3, #7
 8002d58:	f023 0307 	bic.w	r3, r3, #7
 8002d5c:	3308      	adds	r3, #8
 8002d5e:	9303      	str	r3, [sp, #12]
 8002d60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002d62:	4433      	add	r3, r6
 8002d64:	9309      	str	r3, [sp, #36]	@ 0x24
 8002d66:	e76a      	b.n	8002c3e <_svfiprintf_r+0x52>
 8002d68:	460c      	mov	r4, r1
 8002d6a:	2001      	movs	r0, #1
 8002d6c:	fb0c 3202 	mla	r2, ip, r2, r3
 8002d70:	e7a8      	b.n	8002cc4 <_svfiprintf_r+0xd8>
 8002d72:	2300      	movs	r3, #0
 8002d74:	f04f 0c0a 	mov.w	ip, #10
 8002d78:	4619      	mov	r1, r3
 8002d7a:	3401      	adds	r4, #1
 8002d7c:	9305      	str	r3, [sp, #20]
 8002d7e:	4620      	mov	r0, r4
 8002d80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002d84:	3a30      	subs	r2, #48	@ 0x30
 8002d86:	2a09      	cmp	r2, #9
 8002d88:	d903      	bls.n	8002d92 <_svfiprintf_r+0x1a6>
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d0c6      	beq.n	8002d1c <_svfiprintf_r+0x130>
 8002d8e:	9105      	str	r1, [sp, #20]
 8002d90:	e7c4      	b.n	8002d1c <_svfiprintf_r+0x130>
 8002d92:	4604      	mov	r4, r0
 8002d94:	2301      	movs	r3, #1
 8002d96:	fb0c 2101 	mla	r1, ip, r1, r2
 8002d9a:	e7f0      	b.n	8002d7e <_svfiprintf_r+0x192>
 8002d9c:	ab03      	add	r3, sp, #12
 8002d9e:	9300      	str	r3, [sp, #0]
 8002da0:	462a      	mov	r2, r5
 8002da2:	4638      	mov	r0, r7
 8002da4:	4b0e      	ldr	r3, [pc, #56]	@ (8002de0 <_svfiprintf_r+0x1f4>)
 8002da6:	a904      	add	r1, sp, #16
 8002da8:	f3af 8000 	nop.w
 8002dac:	1c42      	adds	r2, r0, #1
 8002dae:	4606      	mov	r6, r0
 8002db0:	d1d6      	bne.n	8002d60 <_svfiprintf_r+0x174>
 8002db2:	89ab      	ldrh	r3, [r5, #12]
 8002db4:	065b      	lsls	r3, r3, #25
 8002db6:	f53f af2d 	bmi.w	8002c14 <_svfiprintf_r+0x28>
 8002dba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002dbc:	e72c      	b.n	8002c18 <_svfiprintf_r+0x2c>
 8002dbe:	ab03      	add	r3, sp, #12
 8002dc0:	9300      	str	r3, [sp, #0]
 8002dc2:	462a      	mov	r2, r5
 8002dc4:	4638      	mov	r0, r7
 8002dc6:	4b06      	ldr	r3, [pc, #24]	@ (8002de0 <_svfiprintf_r+0x1f4>)
 8002dc8:	a904      	add	r1, sp, #16
 8002dca:	f000 fa47 	bl	800325c <_printf_i>
 8002dce:	e7ed      	b.n	8002dac <_svfiprintf_r+0x1c0>
 8002dd0:	08003d2e 	.word	0x08003d2e
 8002dd4:	08003d34 	.word	0x08003d34
 8002dd8:	08003d38 	.word	0x08003d38
 8002ddc:	00000000 	.word	0x00000000
 8002de0:	08002b35 	.word	0x08002b35

08002de4 <_sungetc_r>:
 8002de4:	b538      	push	{r3, r4, r5, lr}
 8002de6:	1c4b      	adds	r3, r1, #1
 8002de8:	4614      	mov	r4, r2
 8002dea:	d103      	bne.n	8002df4 <_sungetc_r+0x10>
 8002dec:	f04f 35ff 	mov.w	r5, #4294967295
 8002df0:	4628      	mov	r0, r5
 8002df2:	bd38      	pop	{r3, r4, r5, pc}
 8002df4:	8993      	ldrh	r3, [r2, #12]
 8002df6:	b2cd      	uxtb	r5, r1
 8002df8:	f023 0320 	bic.w	r3, r3, #32
 8002dfc:	8193      	strh	r3, [r2, #12]
 8002dfe:	6853      	ldr	r3, [r2, #4]
 8002e00:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002e02:	b18a      	cbz	r2, 8002e28 <_sungetc_r+0x44>
 8002e04:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8002e06:	429a      	cmp	r2, r3
 8002e08:	dd08      	ble.n	8002e1c <_sungetc_r+0x38>
 8002e0a:	6823      	ldr	r3, [r4, #0]
 8002e0c:	1e5a      	subs	r2, r3, #1
 8002e0e:	6022      	str	r2, [r4, #0]
 8002e10:	f803 5c01 	strb.w	r5, [r3, #-1]
 8002e14:	6863      	ldr	r3, [r4, #4]
 8002e16:	3301      	adds	r3, #1
 8002e18:	6063      	str	r3, [r4, #4]
 8002e1a:	e7e9      	b.n	8002df0 <_sungetc_r+0xc>
 8002e1c:	4621      	mov	r1, r4
 8002e1e:	f000 fcc2 	bl	80037a6 <__submore>
 8002e22:	2800      	cmp	r0, #0
 8002e24:	d0f1      	beq.n	8002e0a <_sungetc_r+0x26>
 8002e26:	e7e1      	b.n	8002dec <_sungetc_r+0x8>
 8002e28:	6921      	ldr	r1, [r4, #16]
 8002e2a:	6822      	ldr	r2, [r4, #0]
 8002e2c:	b141      	cbz	r1, 8002e40 <_sungetc_r+0x5c>
 8002e2e:	4291      	cmp	r1, r2
 8002e30:	d206      	bcs.n	8002e40 <_sungetc_r+0x5c>
 8002e32:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8002e36:	42a9      	cmp	r1, r5
 8002e38:	d102      	bne.n	8002e40 <_sungetc_r+0x5c>
 8002e3a:	3a01      	subs	r2, #1
 8002e3c:	6022      	str	r2, [r4, #0]
 8002e3e:	e7ea      	b.n	8002e16 <_sungetc_r+0x32>
 8002e40:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8002e44:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002e48:	6363      	str	r3, [r4, #52]	@ 0x34
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	63a3      	str	r3, [r4, #56]	@ 0x38
 8002e4e:	4623      	mov	r3, r4
 8002e50:	f803 5f46 	strb.w	r5, [r3, #70]!
 8002e54:	6023      	str	r3, [r4, #0]
 8002e56:	2301      	movs	r3, #1
 8002e58:	e7de      	b.n	8002e18 <_sungetc_r+0x34>

08002e5a <__ssrefill_r>:
 8002e5a:	b510      	push	{r4, lr}
 8002e5c:	460c      	mov	r4, r1
 8002e5e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8002e60:	b169      	cbz	r1, 8002e7e <__ssrefill_r+0x24>
 8002e62:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002e66:	4299      	cmp	r1, r3
 8002e68:	d001      	beq.n	8002e6e <__ssrefill_r+0x14>
 8002e6a:	f7ff fd6d 	bl	8002948 <_free_r>
 8002e6e:	2000      	movs	r0, #0
 8002e70:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002e72:	6360      	str	r0, [r4, #52]	@ 0x34
 8002e74:	6063      	str	r3, [r4, #4]
 8002e76:	b113      	cbz	r3, 8002e7e <__ssrefill_r+0x24>
 8002e78:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002e7a:	6023      	str	r3, [r4, #0]
 8002e7c:	bd10      	pop	{r4, pc}
 8002e7e:	6923      	ldr	r3, [r4, #16]
 8002e80:	f04f 30ff 	mov.w	r0, #4294967295
 8002e84:	6023      	str	r3, [r4, #0]
 8002e86:	2300      	movs	r3, #0
 8002e88:	6063      	str	r3, [r4, #4]
 8002e8a:	89a3      	ldrh	r3, [r4, #12]
 8002e8c:	f043 0320 	orr.w	r3, r3, #32
 8002e90:	81a3      	strh	r3, [r4, #12]
 8002e92:	e7f3      	b.n	8002e7c <__ssrefill_r+0x22>

08002e94 <__ssvfiscanf_r>:
 8002e94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e98:	460c      	mov	r4, r1
 8002e9a:	2100      	movs	r1, #0
 8002e9c:	4606      	mov	r6, r0
 8002e9e:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8002ea2:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8002ea6:	49aa      	ldr	r1, [pc, #680]	@ (8003150 <__ssvfiscanf_r+0x2bc>)
 8002ea8:	f10d 0804 	add.w	r8, sp, #4
 8002eac:	91a0      	str	r1, [sp, #640]	@ 0x280
 8002eae:	49a9      	ldr	r1, [pc, #676]	@ (8003154 <__ssvfiscanf_r+0x2c0>)
 8002eb0:	4fa9      	ldr	r7, [pc, #676]	@ (8003158 <__ssvfiscanf_r+0x2c4>)
 8002eb2:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8002eb6:	91a1      	str	r1, [sp, #644]	@ 0x284
 8002eb8:	9300      	str	r3, [sp, #0]
 8002eba:	7813      	ldrb	r3, [r2, #0]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	f000 8159 	beq.w	8003174 <__ssvfiscanf_r+0x2e0>
 8002ec2:	5cf9      	ldrb	r1, [r7, r3]
 8002ec4:	1c55      	adds	r5, r2, #1
 8002ec6:	f011 0108 	ands.w	r1, r1, #8
 8002eca:	d019      	beq.n	8002f00 <__ssvfiscanf_r+0x6c>
 8002ecc:	6863      	ldr	r3, [r4, #4]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	dd0f      	ble.n	8002ef2 <__ssvfiscanf_r+0x5e>
 8002ed2:	6823      	ldr	r3, [r4, #0]
 8002ed4:	781a      	ldrb	r2, [r3, #0]
 8002ed6:	5cba      	ldrb	r2, [r7, r2]
 8002ed8:	0712      	lsls	r2, r2, #28
 8002eda:	d401      	bmi.n	8002ee0 <__ssvfiscanf_r+0x4c>
 8002edc:	462a      	mov	r2, r5
 8002ede:	e7ec      	b.n	8002eba <__ssvfiscanf_r+0x26>
 8002ee0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	3201      	adds	r2, #1
 8002ee6:	9245      	str	r2, [sp, #276]	@ 0x114
 8002ee8:	6862      	ldr	r2, [r4, #4]
 8002eea:	6023      	str	r3, [r4, #0]
 8002eec:	3a01      	subs	r2, #1
 8002eee:	6062      	str	r2, [r4, #4]
 8002ef0:	e7ec      	b.n	8002ecc <__ssvfiscanf_r+0x38>
 8002ef2:	4621      	mov	r1, r4
 8002ef4:	4630      	mov	r0, r6
 8002ef6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8002ef8:	4798      	blx	r3
 8002efa:	2800      	cmp	r0, #0
 8002efc:	d0e9      	beq.n	8002ed2 <__ssvfiscanf_r+0x3e>
 8002efe:	e7ed      	b.n	8002edc <__ssvfiscanf_r+0x48>
 8002f00:	2b25      	cmp	r3, #37	@ 0x25
 8002f02:	d012      	beq.n	8002f2a <__ssvfiscanf_r+0x96>
 8002f04:	4699      	mov	r9, r3
 8002f06:	6863      	ldr	r3, [r4, #4]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	f340 8094 	ble.w	8003036 <__ssvfiscanf_r+0x1a2>
 8002f0e:	6822      	ldr	r2, [r4, #0]
 8002f10:	7813      	ldrb	r3, [r2, #0]
 8002f12:	454b      	cmp	r3, r9
 8002f14:	f040 812e 	bne.w	8003174 <__ssvfiscanf_r+0x2e0>
 8002f18:	6863      	ldr	r3, [r4, #4]
 8002f1a:	3201      	adds	r2, #1
 8002f1c:	3b01      	subs	r3, #1
 8002f1e:	6063      	str	r3, [r4, #4]
 8002f20:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8002f22:	6022      	str	r2, [r4, #0]
 8002f24:	3301      	adds	r3, #1
 8002f26:	9345      	str	r3, [sp, #276]	@ 0x114
 8002f28:	e7d8      	b.n	8002edc <__ssvfiscanf_r+0x48>
 8002f2a:	9141      	str	r1, [sp, #260]	@ 0x104
 8002f2c:	9143      	str	r1, [sp, #268]	@ 0x10c
 8002f2e:	7853      	ldrb	r3, [r2, #1]
 8002f30:	2b2a      	cmp	r3, #42	@ 0x2a
 8002f32:	bf04      	itt	eq
 8002f34:	2310      	moveq	r3, #16
 8002f36:	1c95      	addeq	r5, r2, #2
 8002f38:	f04f 020a 	mov.w	r2, #10
 8002f3c:	bf08      	it	eq
 8002f3e:	9341      	streq	r3, [sp, #260]	@ 0x104
 8002f40:	46a9      	mov	r9, r5
 8002f42:	f819 1b01 	ldrb.w	r1, [r9], #1
 8002f46:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8002f4a:	2b09      	cmp	r3, #9
 8002f4c:	d91e      	bls.n	8002f8c <__ssvfiscanf_r+0xf8>
 8002f4e:	f8df a20c 	ldr.w	sl, [pc, #524]	@ 800315c <__ssvfiscanf_r+0x2c8>
 8002f52:	2203      	movs	r2, #3
 8002f54:	4650      	mov	r0, sl
 8002f56:	f000 fc89 	bl	800386c <memchr>
 8002f5a:	b138      	cbz	r0, 8002f6c <__ssvfiscanf_r+0xd8>
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	464d      	mov	r5, r9
 8002f60:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8002f62:	eba0 000a 	sub.w	r0, r0, sl
 8002f66:	4083      	lsls	r3, r0
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	9341      	str	r3, [sp, #260]	@ 0x104
 8002f6c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002f70:	2b78      	cmp	r3, #120	@ 0x78
 8002f72:	d806      	bhi.n	8002f82 <__ssvfiscanf_r+0xee>
 8002f74:	2b57      	cmp	r3, #87	@ 0x57
 8002f76:	d810      	bhi.n	8002f9a <__ssvfiscanf_r+0x106>
 8002f78:	2b25      	cmp	r3, #37	@ 0x25
 8002f7a:	d0c3      	beq.n	8002f04 <__ssvfiscanf_r+0x70>
 8002f7c:	d856      	bhi.n	800302c <__ssvfiscanf_r+0x198>
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d064      	beq.n	800304c <__ssvfiscanf_r+0x1b8>
 8002f82:	2303      	movs	r3, #3
 8002f84:	9347      	str	r3, [sp, #284]	@ 0x11c
 8002f86:	230a      	movs	r3, #10
 8002f88:	9342      	str	r3, [sp, #264]	@ 0x108
 8002f8a:	e077      	b.n	800307c <__ssvfiscanf_r+0x1e8>
 8002f8c:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8002f8e:	464d      	mov	r5, r9
 8002f90:	fb02 1103 	mla	r1, r2, r3, r1
 8002f94:	3930      	subs	r1, #48	@ 0x30
 8002f96:	9143      	str	r1, [sp, #268]	@ 0x10c
 8002f98:	e7d2      	b.n	8002f40 <__ssvfiscanf_r+0xac>
 8002f9a:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8002f9e:	2a20      	cmp	r2, #32
 8002fa0:	d8ef      	bhi.n	8002f82 <__ssvfiscanf_r+0xee>
 8002fa2:	a101      	add	r1, pc, #4	@ (adr r1, 8002fa8 <__ssvfiscanf_r+0x114>)
 8002fa4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8002fa8:	0800305b 	.word	0x0800305b
 8002fac:	08002f83 	.word	0x08002f83
 8002fb0:	08002f83 	.word	0x08002f83
 8002fb4:	080030b5 	.word	0x080030b5
 8002fb8:	08002f83 	.word	0x08002f83
 8002fbc:	08002f83 	.word	0x08002f83
 8002fc0:	08002f83 	.word	0x08002f83
 8002fc4:	08002f83 	.word	0x08002f83
 8002fc8:	08002f83 	.word	0x08002f83
 8002fcc:	08002f83 	.word	0x08002f83
 8002fd0:	08002f83 	.word	0x08002f83
 8002fd4:	080030cb 	.word	0x080030cb
 8002fd8:	080030b1 	.word	0x080030b1
 8002fdc:	08003033 	.word	0x08003033
 8002fe0:	08003033 	.word	0x08003033
 8002fe4:	08003033 	.word	0x08003033
 8002fe8:	08002f83 	.word	0x08002f83
 8002fec:	0800306d 	.word	0x0800306d
 8002ff0:	08002f83 	.word	0x08002f83
 8002ff4:	08002f83 	.word	0x08002f83
 8002ff8:	08002f83 	.word	0x08002f83
 8002ffc:	08002f83 	.word	0x08002f83
 8003000:	080030db 	.word	0x080030db
 8003004:	08003075 	.word	0x08003075
 8003008:	08003053 	.word	0x08003053
 800300c:	08002f83 	.word	0x08002f83
 8003010:	08002f83 	.word	0x08002f83
 8003014:	080030d7 	.word	0x080030d7
 8003018:	08002f83 	.word	0x08002f83
 800301c:	080030b1 	.word	0x080030b1
 8003020:	08002f83 	.word	0x08002f83
 8003024:	08002f83 	.word	0x08002f83
 8003028:	0800305b 	.word	0x0800305b
 800302c:	3b45      	subs	r3, #69	@ 0x45
 800302e:	2b02      	cmp	r3, #2
 8003030:	d8a7      	bhi.n	8002f82 <__ssvfiscanf_r+0xee>
 8003032:	2305      	movs	r3, #5
 8003034:	e021      	b.n	800307a <__ssvfiscanf_r+0x1e6>
 8003036:	4621      	mov	r1, r4
 8003038:	4630      	mov	r0, r6
 800303a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800303c:	4798      	blx	r3
 800303e:	2800      	cmp	r0, #0
 8003040:	f43f af65 	beq.w	8002f0e <__ssvfiscanf_r+0x7a>
 8003044:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8003046:	2800      	cmp	r0, #0
 8003048:	f040 808c 	bne.w	8003164 <__ssvfiscanf_r+0x2d0>
 800304c:	f04f 30ff 	mov.w	r0, #4294967295
 8003050:	e08c      	b.n	800316c <__ssvfiscanf_r+0x2d8>
 8003052:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8003054:	f042 0220 	orr.w	r2, r2, #32
 8003058:	9241      	str	r2, [sp, #260]	@ 0x104
 800305a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800305c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003060:	9241      	str	r2, [sp, #260]	@ 0x104
 8003062:	2210      	movs	r2, #16
 8003064:	2b6e      	cmp	r3, #110	@ 0x6e
 8003066:	9242      	str	r2, [sp, #264]	@ 0x108
 8003068:	d902      	bls.n	8003070 <__ssvfiscanf_r+0x1dc>
 800306a:	e005      	b.n	8003078 <__ssvfiscanf_r+0x1e4>
 800306c:	2300      	movs	r3, #0
 800306e:	9342      	str	r3, [sp, #264]	@ 0x108
 8003070:	2303      	movs	r3, #3
 8003072:	e002      	b.n	800307a <__ssvfiscanf_r+0x1e6>
 8003074:	2308      	movs	r3, #8
 8003076:	9342      	str	r3, [sp, #264]	@ 0x108
 8003078:	2304      	movs	r3, #4
 800307a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800307c:	6863      	ldr	r3, [r4, #4]
 800307e:	2b00      	cmp	r3, #0
 8003080:	dd39      	ble.n	80030f6 <__ssvfiscanf_r+0x262>
 8003082:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8003084:	0659      	lsls	r1, r3, #25
 8003086:	d404      	bmi.n	8003092 <__ssvfiscanf_r+0x1fe>
 8003088:	6823      	ldr	r3, [r4, #0]
 800308a:	781a      	ldrb	r2, [r3, #0]
 800308c:	5cba      	ldrb	r2, [r7, r2]
 800308e:	0712      	lsls	r2, r2, #28
 8003090:	d438      	bmi.n	8003104 <__ssvfiscanf_r+0x270>
 8003092:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8003094:	2b02      	cmp	r3, #2
 8003096:	dc47      	bgt.n	8003128 <__ssvfiscanf_r+0x294>
 8003098:	466b      	mov	r3, sp
 800309a:	4622      	mov	r2, r4
 800309c:	4630      	mov	r0, r6
 800309e:	a941      	add	r1, sp, #260	@ 0x104
 80030a0:	f000 f9fc 	bl	800349c <_scanf_chars>
 80030a4:	2801      	cmp	r0, #1
 80030a6:	d065      	beq.n	8003174 <__ssvfiscanf_r+0x2e0>
 80030a8:	2802      	cmp	r0, #2
 80030aa:	f47f af17 	bne.w	8002edc <__ssvfiscanf_r+0x48>
 80030ae:	e7c9      	b.n	8003044 <__ssvfiscanf_r+0x1b0>
 80030b0:	220a      	movs	r2, #10
 80030b2:	e7d7      	b.n	8003064 <__ssvfiscanf_r+0x1d0>
 80030b4:	4629      	mov	r1, r5
 80030b6:	4640      	mov	r0, r8
 80030b8:	f000 fb3c 	bl	8003734 <__sccl>
 80030bc:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80030be:	4605      	mov	r5, r0
 80030c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80030c4:	9341      	str	r3, [sp, #260]	@ 0x104
 80030c6:	2301      	movs	r3, #1
 80030c8:	e7d7      	b.n	800307a <__ssvfiscanf_r+0x1e6>
 80030ca:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80030cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80030d0:	9341      	str	r3, [sp, #260]	@ 0x104
 80030d2:	2300      	movs	r3, #0
 80030d4:	e7d1      	b.n	800307a <__ssvfiscanf_r+0x1e6>
 80030d6:	2302      	movs	r3, #2
 80030d8:	e7cf      	b.n	800307a <__ssvfiscanf_r+0x1e6>
 80030da:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80030dc:	06c3      	lsls	r3, r0, #27
 80030de:	f53f aefd 	bmi.w	8002edc <__ssvfiscanf_r+0x48>
 80030e2:	9b00      	ldr	r3, [sp, #0]
 80030e4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80030e6:	1d19      	adds	r1, r3, #4
 80030e8:	9100      	str	r1, [sp, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	07c0      	lsls	r0, r0, #31
 80030ee:	bf4c      	ite	mi
 80030f0:	801a      	strhmi	r2, [r3, #0]
 80030f2:	601a      	strpl	r2, [r3, #0]
 80030f4:	e6f2      	b.n	8002edc <__ssvfiscanf_r+0x48>
 80030f6:	4621      	mov	r1, r4
 80030f8:	4630      	mov	r0, r6
 80030fa:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80030fc:	4798      	blx	r3
 80030fe:	2800      	cmp	r0, #0
 8003100:	d0bf      	beq.n	8003082 <__ssvfiscanf_r+0x1ee>
 8003102:	e79f      	b.n	8003044 <__ssvfiscanf_r+0x1b0>
 8003104:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8003106:	3201      	adds	r2, #1
 8003108:	9245      	str	r2, [sp, #276]	@ 0x114
 800310a:	6862      	ldr	r2, [r4, #4]
 800310c:	3a01      	subs	r2, #1
 800310e:	2a00      	cmp	r2, #0
 8003110:	6062      	str	r2, [r4, #4]
 8003112:	dd02      	ble.n	800311a <__ssvfiscanf_r+0x286>
 8003114:	3301      	adds	r3, #1
 8003116:	6023      	str	r3, [r4, #0]
 8003118:	e7b6      	b.n	8003088 <__ssvfiscanf_r+0x1f4>
 800311a:	4621      	mov	r1, r4
 800311c:	4630      	mov	r0, r6
 800311e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8003120:	4798      	blx	r3
 8003122:	2800      	cmp	r0, #0
 8003124:	d0b0      	beq.n	8003088 <__ssvfiscanf_r+0x1f4>
 8003126:	e78d      	b.n	8003044 <__ssvfiscanf_r+0x1b0>
 8003128:	2b04      	cmp	r3, #4
 800312a:	dc06      	bgt.n	800313a <__ssvfiscanf_r+0x2a6>
 800312c:	466b      	mov	r3, sp
 800312e:	4622      	mov	r2, r4
 8003130:	4630      	mov	r0, r6
 8003132:	a941      	add	r1, sp, #260	@ 0x104
 8003134:	f000 fa0c 	bl	8003550 <_scanf_i>
 8003138:	e7b4      	b.n	80030a4 <__ssvfiscanf_r+0x210>
 800313a:	4b09      	ldr	r3, [pc, #36]	@ (8003160 <__ssvfiscanf_r+0x2cc>)
 800313c:	2b00      	cmp	r3, #0
 800313e:	f43f aecd 	beq.w	8002edc <__ssvfiscanf_r+0x48>
 8003142:	466b      	mov	r3, sp
 8003144:	4622      	mov	r2, r4
 8003146:	4630      	mov	r0, r6
 8003148:	a941      	add	r1, sp, #260	@ 0x104
 800314a:	f3af 8000 	nop.w
 800314e:	e7a9      	b.n	80030a4 <__ssvfiscanf_r+0x210>
 8003150:	08002de5 	.word	0x08002de5
 8003154:	08002e5b 	.word	0x08002e5b
 8003158:	08003d7d 	.word	0x08003d7d
 800315c:	08003d34 	.word	0x08003d34
 8003160:	00000000 	.word	0x00000000
 8003164:	89a3      	ldrh	r3, [r4, #12]
 8003166:	065b      	lsls	r3, r3, #25
 8003168:	f53f af70 	bmi.w	800304c <__ssvfiscanf_r+0x1b8>
 800316c:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8003170:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003174:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8003176:	e7f9      	b.n	800316c <__ssvfiscanf_r+0x2d8>

08003178 <_printf_common>:
 8003178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800317c:	4616      	mov	r6, r2
 800317e:	4698      	mov	r8, r3
 8003180:	688a      	ldr	r2, [r1, #8]
 8003182:	690b      	ldr	r3, [r1, #16]
 8003184:	4607      	mov	r7, r0
 8003186:	4293      	cmp	r3, r2
 8003188:	bfb8      	it	lt
 800318a:	4613      	movlt	r3, r2
 800318c:	6033      	str	r3, [r6, #0]
 800318e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003192:	460c      	mov	r4, r1
 8003194:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003198:	b10a      	cbz	r2, 800319e <_printf_common+0x26>
 800319a:	3301      	adds	r3, #1
 800319c:	6033      	str	r3, [r6, #0]
 800319e:	6823      	ldr	r3, [r4, #0]
 80031a0:	0699      	lsls	r1, r3, #26
 80031a2:	bf42      	ittt	mi
 80031a4:	6833      	ldrmi	r3, [r6, #0]
 80031a6:	3302      	addmi	r3, #2
 80031a8:	6033      	strmi	r3, [r6, #0]
 80031aa:	6825      	ldr	r5, [r4, #0]
 80031ac:	f015 0506 	ands.w	r5, r5, #6
 80031b0:	d106      	bne.n	80031c0 <_printf_common+0x48>
 80031b2:	f104 0a19 	add.w	sl, r4, #25
 80031b6:	68e3      	ldr	r3, [r4, #12]
 80031b8:	6832      	ldr	r2, [r6, #0]
 80031ba:	1a9b      	subs	r3, r3, r2
 80031bc:	42ab      	cmp	r3, r5
 80031be:	dc2b      	bgt.n	8003218 <_printf_common+0xa0>
 80031c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80031c4:	6822      	ldr	r2, [r4, #0]
 80031c6:	3b00      	subs	r3, #0
 80031c8:	bf18      	it	ne
 80031ca:	2301      	movne	r3, #1
 80031cc:	0692      	lsls	r2, r2, #26
 80031ce:	d430      	bmi.n	8003232 <_printf_common+0xba>
 80031d0:	4641      	mov	r1, r8
 80031d2:	4638      	mov	r0, r7
 80031d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80031d8:	47c8      	blx	r9
 80031da:	3001      	adds	r0, #1
 80031dc:	d023      	beq.n	8003226 <_printf_common+0xae>
 80031de:	6823      	ldr	r3, [r4, #0]
 80031e0:	6922      	ldr	r2, [r4, #16]
 80031e2:	f003 0306 	and.w	r3, r3, #6
 80031e6:	2b04      	cmp	r3, #4
 80031e8:	bf14      	ite	ne
 80031ea:	2500      	movne	r5, #0
 80031ec:	6833      	ldreq	r3, [r6, #0]
 80031ee:	f04f 0600 	mov.w	r6, #0
 80031f2:	bf08      	it	eq
 80031f4:	68e5      	ldreq	r5, [r4, #12]
 80031f6:	f104 041a 	add.w	r4, r4, #26
 80031fa:	bf08      	it	eq
 80031fc:	1aed      	subeq	r5, r5, r3
 80031fe:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003202:	bf08      	it	eq
 8003204:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003208:	4293      	cmp	r3, r2
 800320a:	bfc4      	itt	gt
 800320c:	1a9b      	subgt	r3, r3, r2
 800320e:	18ed      	addgt	r5, r5, r3
 8003210:	42b5      	cmp	r5, r6
 8003212:	d11a      	bne.n	800324a <_printf_common+0xd2>
 8003214:	2000      	movs	r0, #0
 8003216:	e008      	b.n	800322a <_printf_common+0xb2>
 8003218:	2301      	movs	r3, #1
 800321a:	4652      	mov	r2, sl
 800321c:	4641      	mov	r1, r8
 800321e:	4638      	mov	r0, r7
 8003220:	47c8      	blx	r9
 8003222:	3001      	adds	r0, #1
 8003224:	d103      	bne.n	800322e <_printf_common+0xb6>
 8003226:	f04f 30ff 	mov.w	r0, #4294967295
 800322a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800322e:	3501      	adds	r5, #1
 8003230:	e7c1      	b.n	80031b6 <_printf_common+0x3e>
 8003232:	2030      	movs	r0, #48	@ 0x30
 8003234:	18e1      	adds	r1, r4, r3
 8003236:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800323a:	1c5a      	adds	r2, r3, #1
 800323c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003240:	4422      	add	r2, r4
 8003242:	3302      	adds	r3, #2
 8003244:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003248:	e7c2      	b.n	80031d0 <_printf_common+0x58>
 800324a:	2301      	movs	r3, #1
 800324c:	4622      	mov	r2, r4
 800324e:	4641      	mov	r1, r8
 8003250:	4638      	mov	r0, r7
 8003252:	47c8      	blx	r9
 8003254:	3001      	adds	r0, #1
 8003256:	d0e6      	beq.n	8003226 <_printf_common+0xae>
 8003258:	3601      	adds	r6, #1
 800325a:	e7d9      	b.n	8003210 <_printf_common+0x98>

0800325c <_printf_i>:
 800325c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003260:	7e0f      	ldrb	r7, [r1, #24]
 8003262:	4691      	mov	r9, r2
 8003264:	2f78      	cmp	r7, #120	@ 0x78
 8003266:	4680      	mov	r8, r0
 8003268:	460c      	mov	r4, r1
 800326a:	469a      	mov	sl, r3
 800326c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800326e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003272:	d807      	bhi.n	8003284 <_printf_i+0x28>
 8003274:	2f62      	cmp	r7, #98	@ 0x62
 8003276:	d80a      	bhi.n	800328e <_printf_i+0x32>
 8003278:	2f00      	cmp	r7, #0
 800327a:	f000 80d3 	beq.w	8003424 <_printf_i+0x1c8>
 800327e:	2f58      	cmp	r7, #88	@ 0x58
 8003280:	f000 80ba 	beq.w	80033f8 <_printf_i+0x19c>
 8003284:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003288:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800328c:	e03a      	b.n	8003304 <_printf_i+0xa8>
 800328e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003292:	2b15      	cmp	r3, #21
 8003294:	d8f6      	bhi.n	8003284 <_printf_i+0x28>
 8003296:	a101      	add	r1, pc, #4	@ (adr r1, 800329c <_printf_i+0x40>)
 8003298:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800329c:	080032f5 	.word	0x080032f5
 80032a0:	08003309 	.word	0x08003309
 80032a4:	08003285 	.word	0x08003285
 80032a8:	08003285 	.word	0x08003285
 80032ac:	08003285 	.word	0x08003285
 80032b0:	08003285 	.word	0x08003285
 80032b4:	08003309 	.word	0x08003309
 80032b8:	08003285 	.word	0x08003285
 80032bc:	08003285 	.word	0x08003285
 80032c0:	08003285 	.word	0x08003285
 80032c4:	08003285 	.word	0x08003285
 80032c8:	0800340b 	.word	0x0800340b
 80032cc:	08003333 	.word	0x08003333
 80032d0:	080033c5 	.word	0x080033c5
 80032d4:	08003285 	.word	0x08003285
 80032d8:	08003285 	.word	0x08003285
 80032dc:	0800342d 	.word	0x0800342d
 80032e0:	08003285 	.word	0x08003285
 80032e4:	08003333 	.word	0x08003333
 80032e8:	08003285 	.word	0x08003285
 80032ec:	08003285 	.word	0x08003285
 80032f0:	080033cd 	.word	0x080033cd
 80032f4:	6833      	ldr	r3, [r6, #0]
 80032f6:	1d1a      	adds	r2, r3, #4
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	6032      	str	r2, [r6, #0]
 80032fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003300:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003304:	2301      	movs	r3, #1
 8003306:	e09e      	b.n	8003446 <_printf_i+0x1ea>
 8003308:	6833      	ldr	r3, [r6, #0]
 800330a:	6820      	ldr	r0, [r4, #0]
 800330c:	1d19      	adds	r1, r3, #4
 800330e:	6031      	str	r1, [r6, #0]
 8003310:	0606      	lsls	r6, r0, #24
 8003312:	d501      	bpl.n	8003318 <_printf_i+0xbc>
 8003314:	681d      	ldr	r5, [r3, #0]
 8003316:	e003      	b.n	8003320 <_printf_i+0xc4>
 8003318:	0645      	lsls	r5, r0, #25
 800331a:	d5fb      	bpl.n	8003314 <_printf_i+0xb8>
 800331c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003320:	2d00      	cmp	r5, #0
 8003322:	da03      	bge.n	800332c <_printf_i+0xd0>
 8003324:	232d      	movs	r3, #45	@ 0x2d
 8003326:	426d      	negs	r5, r5
 8003328:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800332c:	230a      	movs	r3, #10
 800332e:	4859      	ldr	r0, [pc, #356]	@ (8003494 <_printf_i+0x238>)
 8003330:	e011      	b.n	8003356 <_printf_i+0xfa>
 8003332:	6821      	ldr	r1, [r4, #0]
 8003334:	6833      	ldr	r3, [r6, #0]
 8003336:	0608      	lsls	r0, r1, #24
 8003338:	f853 5b04 	ldr.w	r5, [r3], #4
 800333c:	d402      	bmi.n	8003344 <_printf_i+0xe8>
 800333e:	0649      	lsls	r1, r1, #25
 8003340:	bf48      	it	mi
 8003342:	b2ad      	uxthmi	r5, r5
 8003344:	2f6f      	cmp	r7, #111	@ 0x6f
 8003346:	6033      	str	r3, [r6, #0]
 8003348:	bf14      	ite	ne
 800334a:	230a      	movne	r3, #10
 800334c:	2308      	moveq	r3, #8
 800334e:	4851      	ldr	r0, [pc, #324]	@ (8003494 <_printf_i+0x238>)
 8003350:	2100      	movs	r1, #0
 8003352:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003356:	6866      	ldr	r6, [r4, #4]
 8003358:	2e00      	cmp	r6, #0
 800335a:	bfa8      	it	ge
 800335c:	6821      	ldrge	r1, [r4, #0]
 800335e:	60a6      	str	r6, [r4, #8]
 8003360:	bfa4      	itt	ge
 8003362:	f021 0104 	bicge.w	r1, r1, #4
 8003366:	6021      	strge	r1, [r4, #0]
 8003368:	b90d      	cbnz	r5, 800336e <_printf_i+0x112>
 800336a:	2e00      	cmp	r6, #0
 800336c:	d04b      	beq.n	8003406 <_printf_i+0x1aa>
 800336e:	4616      	mov	r6, r2
 8003370:	fbb5 f1f3 	udiv	r1, r5, r3
 8003374:	fb03 5711 	mls	r7, r3, r1, r5
 8003378:	5dc7      	ldrb	r7, [r0, r7]
 800337a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800337e:	462f      	mov	r7, r5
 8003380:	42bb      	cmp	r3, r7
 8003382:	460d      	mov	r5, r1
 8003384:	d9f4      	bls.n	8003370 <_printf_i+0x114>
 8003386:	2b08      	cmp	r3, #8
 8003388:	d10b      	bne.n	80033a2 <_printf_i+0x146>
 800338a:	6823      	ldr	r3, [r4, #0]
 800338c:	07df      	lsls	r7, r3, #31
 800338e:	d508      	bpl.n	80033a2 <_printf_i+0x146>
 8003390:	6923      	ldr	r3, [r4, #16]
 8003392:	6861      	ldr	r1, [r4, #4]
 8003394:	4299      	cmp	r1, r3
 8003396:	bfde      	ittt	le
 8003398:	2330      	movle	r3, #48	@ 0x30
 800339a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800339e:	f106 36ff 	addle.w	r6, r6, #4294967295
 80033a2:	1b92      	subs	r2, r2, r6
 80033a4:	6122      	str	r2, [r4, #16]
 80033a6:	464b      	mov	r3, r9
 80033a8:	4621      	mov	r1, r4
 80033aa:	4640      	mov	r0, r8
 80033ac:	f8cd a000 	str.w	sl, [sp]
 80033b0:	aa03      	add	r2, sp, #12
 80033b2:	f7ff fee1 	bl	8003178 <_printf_common>
 80033b6:	3001      	adds	r0, #1
 80033b8:	d14a      	bne.n	8003450 <_printf_i+0x1f4>
 80033ba:	f04f 30ff 	mov.w	r0, #4294967295
 80033be:	b004      	add	sp, #16
 80033c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033c4:	6823      	ldr	r3, [r4, #0]
 80033c6:	f043 0320 	orr.w	r3, r3, #32
 80033ca:	6023      	str	r3, [r4, #0]
 80033cc:	2778      	movs	r7, #120	@ 0x78
 80033ce:	4832      	ldr	r0, [pc, #200]	@ (8003498 <_printf_i+0x23c>)
 80033d0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80033d4:	6823      	ldr	r3, [r4, #0]
 80033d6:	6831      	ldr	r1, [r6, #0]
 80033d8:	061f      	lsls	r7, r3, #24
 80033da:	f851 5b04 	ldr.w	r5, [r1], #4
 80033de:	d402      	bmi.n	80033e6 <_printf_i+0x18a>
 80033e0:	065f      	lsls	r7, r3, #25
 80033e2:	bf48      	it	mi
 80033e4:	b2ad      	uxthmi	r5, r5
 80033e6:	6031      	str	r1, [r6, #0]
 80033e8:	07d9      	lsls	r1, r3, #31
 80033ea:	bf44      	itt	mi
 80033ec:	f043 0320 	orrmi.w	r3, r3, #32
 80033f0:	6023      	strmi	r3, [r4, #0]
 80033f2:	b11d      	cbz	r5, 80033fc <_printf_i+0x1a0>
 80033f4:	2310      	movs	r3, #16
 80033f6:	e7ab      	b.n	8003350 <_printf_i+0xf4>
 80033f8:	4826      	ldr	r0, [pc, #152]	@ (8003494 <_printf_i+0x238>)
 80033fa:	e7e9      	b.n	80033d0 <_printf_i+0x174>
 80033fc:	6823      	ldr	r3, [r4, #0]
 80033fe:	f023 0320 	bic.w	r3, r3, #32
 8003402:	6023      	str	r3, [r4, #0]
 8003404:	e7f6      	b.n	80033f4 <_printf_i+0x198>
 8003406:	4616      	mov	r6, r2
 8003408:	e7bd      	b.n	8003386 <_printf_i+0x12a>
 800340a:	6833      	ldr	r3, [r6, #0]
 800340c:	6825      	ldr	r5, [r4, #0]
 800340e:	1d18      	adds	r0, r3, #4
 8003410:	6961      	ldr	r1, [r4, #20]
 8003412:	6030      	str	r0, [r6, #0]
 8003414:	062e      	lsls	r6, r5, #24
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	d501      	bpl.n	800341e <_printf_i+0x1c2>
 800341a:	6019      	str	r1, [r3, #0]
 800341c:	e002      	b.n	8003424 <_printf_i+0x1c8>
 800341e:	0668      	lsls	r0, r5, #25
 8003420:	d5fb      	bpl.n	800341a <_printf_i+0x1be>
 8003422:	8019      	strh	r1, [r3, #0]
 8003424:	2300      	movs	r3, #0
 8003426:	4616      	mov	r6, r2
 8003428:	6123      	str	r3, [r4, #16]
 800342a:	e7bc      	b.n	80033a6 <_printf_i+0x14a>
 800342c:	6833      	ldr	r3, [r6, #0]
 800342e:	2100      	movs	r1, #0
 8003430:	1d1a      	adds	r2, r3, #4
 8003432:	6032      	str	r2, [r6, #0]
 8003434:	681e      	ldr	r6, [r3, #0]
 8003436:	6862      	ldr	r2, [r4, #4]
 8003438:	4630      	mov	r0, r6
 800343a:	f000 fa17 	bl	800386c <memchr>
 800343e:	b108      	cbz	r0, 8003444 <_printf_i+0x1e8>
 8003440:	1b80      	subs	r0, r0, r6
 8003442:	6060      	str	r0, [r4, #4]
 8003444:	6863      	ldr	r3, [r4, #4]
 8003446:	6123      	str	r3, [r4, #16]
 8003448:	2300      	movs	r3, #0
 800344a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800344e:	e7aa      	b.n	80033a6 <_printf_i+0x14a>
 8003450:	4632      	mov	r2, r6
 8003452:	4649      	mov	r1, r9
 8003454:	4640      	mov	r0, r8
 8003456:	6923      	ldr	r3, [r4, #16]
 8003458:	47d0      	blx	sl
 800345a:	3001      	adds	r0, #1
 800345c:	d0ad      	beq.n	80033ba <_printf_i+0x15e>
 800345e:	6823      	ldr	r3, [r4, #0]
 8003460:	079b      	lsls	r3, r3, #30
 8003462:	d413      	bmi.n	800348c <_printf_i+0x230>
 8003464:	68e0      	ldr	r0, [r4, #12]
 8003466:	9b03      	ldr	r3, [sp, #12]
 8003468:	4298      	cmp	r0, r3
 800346a:	bfb8      	it	lt
 800346c:	4618      	movlt	r0, r3
 800346e:	e7a6      	b.n	80033be <_printf_i+0x162>
 8003470:	2301      	movs	r3, #1
 8003472:	4632      	mov	r2, r6
 8003474:	4649      	mov	r1, r9
 8003476:	4640      	mov	r0, r8
 8003478:	47d0      	blx	sl
 800347a:	3001      	adds	r0, #1
 800347c:	d09d      	beq.n	80033ba <_printf_i+0x15e>
 800347e:	3501      	adds	r5, #1
 8003480:	68e3      	ldr	r3, [r4, #12]
 8003482:	9903      	ldr	r1, [sp, #12]
 8003484:	1a5b      	subs	r3, r3, r1
 8003486:	42ab      	cmp	r3, r5
 8003488:	dcf2      	bgt.n	8003470 <_printf_i+0x214>
 800348a:	e7eb      	b.n	8003464 <_printf_i+0x208>
 800348c:	2500      	movs	r5, #0
 800348e:	f104 0619 	add.w	r6, r4, #25
 8003492:	e7f5      	b.n	8003480 <_printf_i+0x224>
 8003494:	08003d3f 	.word	0x08003d3f
 8003498:	08003d50 	.word	0x08003d50

0800349c <_scanf_chars>:
 800349c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80034a0:	4615      	mov	r5, r2
 80034a2:	688a      	ldr	r2, [r1, #8]
 80034a4:	4680      	mov	r8, r0
 80034a6:	460c      	mov	r4, r1
 80034a8:	b932      	cbnz	r2, 80034b8 <_scanf_chars+0x1c>
 80034aa:	698a      	ldr	r2, [r1, #24]
 80034ac:	2a00      	cmp	r2, #0
 80034ae:	bf14      	ite	ne
 80034b0:	f04f 32ff 	movne.w	r2, #4294967295
 80034b4:	2201      	moveq	r2, #1
 80034b6:	608a      	str	r2, [r1, #8]
 80034b8:	2700      	movs	r7, #0
 80034ba:	6822      	ldr	r2, [r4, #0]
 80034bc:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 800354c <_scanf_chars+0xb0>
 80034c0:	06d1      	lsls	r1, r2, #27
 80034c2:	bf5f      	itttt	pl
 80034c4:	681a      	ldrpl	r2, [r3, #0]
 80034c6:	1d11      	addpl	r1, r2, #4
 80034c8:	6019      	strpl	r1, [r3, #0]
 80034ca:	6816      	ldrpl	r6, [r2, #0]
 80034cc:	69a0      	ldr	r0, [r4, #24]
 80034ce:	b188      	cbz	r0, 80034f4 <_scanf_chars+0x58>
 80034d0:	2801      	cmp	r0, #1
 80034d2:	d107      	bne.n	80034e4 <_scanf_chars+0x48>
 80034d4:	682b      	ldr	r3, [r5, #0]
 80034d6:	781a      	ldrb	r2, [r3, #0]
 80034d8:	6963      	ldr	r3, [r4, #20]
 80034da:	5c9b      	ldrb	r3, [r3, r2]
 80034dc:	b953      	cbnz	r3, 80034f4 <_scanf_chars+0x58>
 80034de:	2f00      	cmp	r7, #0
 80034e0:	d031      	beq.n	8003546 <_scanf_chars+0xaa>
 80034e2:	e022      	b.n	800352a <_scanf_chars+0x8e>
 80034e4:	2802      	cmp	r0, #2
 80034e6:	d120      	bne.n	800352a <_scanf_chars+0x8e>
 80034e8:	682b      	ldr	r3, [r5, #0]
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	f819 3003 	ldrb.w	r3, [r9, r3]
 80034f0:	071b      	lsls	r3, r3, #28
 80034f2:	d41a      	bmi.n	800352a <_scanf_chars+0x8e>
 80034f4:	6823      	ldr	r3, [r4, #0]
 80034f6:	3701      	adds	r7, #1
 80034f8:	06da      	lsls	r2, r3, #27
 80034fa:	bf5e      	ittt	pl
 80034fc:	682b      	ldrpl	r3, [r5, #0]
 80034fe:	781b      	ldrbpl	r3, [r3, #0]
 8003500:	f806 3b01 	strbpl.w	r3, [r6], #1
 8003504:	682a      	ldr	r2, [r5, #0]
 8003506:	686b      	ldr	r3, [r5, #4]
 8003508:	3201      	adds	r2, #1
 800350a:	602a      	str	r2, [r5, #0]
 800350c:	68a2      	ldr	r2, [r4, #8]
 800350e:	3b01      	subs	r3, #1
 8003510:	3a01      	subs	r2, #1
 8003512:	606b      	str	r3, [r5, #4]
 8003514:	60a2      	str	r2, [r4, #8]
 8003516:	b142      	cbz	r2, 800352a <_scanf_chars+0x8e>
 8003518:	2b00      	cmp	r3, #0
 800351a:	dcd7      	bgt.n	80034cc <_scanf_chars+0x30>
 800351c:	4629      	mov	r1, r5
 800351e:	4640      	mov	r0, r8
 8003520:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8003524:	4798      	blx	r3
 8003526:	2800      	cmp	r0, #0
 8003528:	d0d0      	beq.n	80034cc <_scanf_chars+0x30>
 800352a:	6823      	ldr	r3, [r4, #0]
 800352c:	f013 0310 	ands.w	r3, r3, #16
 8003530:	d105      	bne.n	800353e <_scanf_chars+0xa2>
 8003532:	68e2      	ldr	r2, [r4, #12]
 8003534:	3201      	adds	r2, #1
 8003536:	60e2      	str	r2, [r4, #12]
 8003538:	69a2      	ldr	r2, [r4, #24]
 800353a:	b102      	cbz	r2, 800353e <_scanf_chars+0xa2>
 800353c:	7033      	strb	r3, [r6, #0]
 800353e:	2000      	movs	r0, #0
 8003540:	6923      	ldr	r3, [r4, #16]
 8003542:	443b      	add	r3, r7
 8003544:	6123      	str	r3, [r4, #16]
 8003546:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800354a:	bf00      	nop
 800354c:	08003d7d 	.word	0x08003d7d

08003550 <_scanf_i>:
 8003550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003554:	460c      	mov	r4, r1
 8003556:	4698      	mov	r8, r3
 8003558:	4b72      	ldr	r3, [pc, #456]	@ (8003724 <_scanf_i+0x1d4>)
 800355a:	b087      	sub	sp, #28
 800355c:	4682      	mov	sl, r0
 800355e:	4616      	mov	r6, r2
 8003560:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003564:	ab03      	add	r3, sp, #12
 8003566:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800356a:	4b6f      	ldr	r3, [pc, #444]	@ (8003728 <_scanf_i+0x1d8>)
 800356c:	69a1      	ldr	r1, [r4, #24]
 800356e:	4a6f      	ldr	r2, [pc, #444]	@ (800372c <_scanf_i+0x1dc>)
 8003570:	4627      	mov	r7, r4
 8003572:	2903      	cmp	r1, #3
 8003574:	bf08      	it	eq
 8003576:	461a      	moveq	r2, r3
 8003578:	68a3      	ldr	r3, [r4, #8]
 800357a:	9201      	str	r2, [sp, #4]
 800357c:	1e5a      	subs	r2, r3, #1
 800357e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8003582:	bf81      	itttt	hi
 8003584:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8003588:	eb03 0905 	addhi.w	r9, r3, r5
 800358c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8003590:	60a3      	strhi	r3, [r4, #8]
 8003592:	f857 3b1c 	ldr.w	r3, [r7], #28
 8003596:	bf98      	it	ls
 8003598:	f04f 0900 	movls.w	r9, #0
 800359c:	463d      	mov	r5, r7
 800359e:	f04f 0b00 	mov.w	fp, #0
 80035a2:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 80035a6:	6023      	str	r3, [r4, #0]
 80035a8:	6831      	ldr	r1, [r6, #0]
 80035aa:	ab03      	add	r3, sp, #12
 80035ac:	2202      	movs	r2, #2
 80035ae:	7809      	ldrb	r1, [r1, #0]
 80035b0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80035b4:	f000 f95a 	bl	800386c <memchr>
 80035b8:	b328      	cbz	r0, 8003606 <_scanf_i+0xb6>
 80035ba:	f1bb 0f01 	cmp.w	fp, #1
 80035be:	d159      	bne.n	8003674 <_scanf_i+0x124>
 80035c0:	6862      	ldr	r2, [r4, #4]
 80035c2:	b92a      	cbnz	r2, 80035d0 <_scanf_i+0x80>
 80035c4:	2108      	movs	r1, #8
 80035c6:	6822      	ldr	r2, [r4, #0]
 80035c8:	6061      	str	r1, [r4, #4]
 80035ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035ce:	6022      	str	r2, [r4, #0]
 80035d0:	6822      	ldr	r2, [r4, #0]
 80035d2:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 80035d6:	6022      	str	r2, [r4, #0]
 80035d8:	68a2      	ldr	r2, [r4, #8]
 80035da:	1e51      	subs	r1, r2, #1
 80035dc:	60a1      	str	r1, [r4, #8]
 80035de:	b192      	cbz	r2, 8003606 <_scanf_i+0xb6>
 80035e0:	6832      	ldr	r2, [r6, #0]
 80035e2:	1c51      	adds	r1, r2, #1
 80035e4:	6031      	str	r1, [r6, #0]
 80035e6:	7812      	ldrb	r2, [r2, #0]
 80035e8:	f805 2b01 	strb.w	r2, [r5], #1
 80035ec:	6872      	ldr	r2, [r6, #4]
 80035ee:	3a01      	subs	r2, #1
 80035f0:	2a00      	cmp	r2, #0
 80035f2:	6072      	str	r2, [r6, #4]
 80035f4:	dc07      	bgt.n	8003606 <_scanf_i+0xb6>
 80035f6:	4631      	mov	r1, r6
 80035f8:	4650      	mov	r0, sl
 80035fa:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 80035fe:	4790      	blx	r2
 8003600:	2800      	cmp	r0, #0
 8003602:	f040 8085 	bne.w	8003710 <_scanf_i+0x1c0>
 8003606:	f10b 0b01 	add.w	fp, fp, #1
 800360a:	f1bb 0f03 	cmp.w	fp, #3
 800360e:	d1cb      	bne.n	80035a8 <_scanf_i+0x58>
 8003610:	6863      	ldr	r3, [r4, #4]
 8003612:	b90b      	cbnz	r3, 8003618 <_scanf_i+0xc8>
 8003614:	230a      	movs	r3, #10
 8003616:	6063      	str	r3, [r4, #4]
 8003618:	6863      	ldr	r3, [r4, #4]
 800361a:	4945      	ldr	r1, [pc, #276]	@ (8003730 <_scanf_i+0x1e0>)
 800361c:	6960      	ldr	r0, [r4, #20]
 800361e:	1ac9      	subs	r1, r1, r3
 8003620:	f000 f888 	bl	8003734 <__sccl>
 8003624:	f04f 0b00 	mov.w	fp, #0
 8003628:	68a3      	ldr	r3, [r4, #8]
 800362a:	6822      	ldr	r2, [r4, #0]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d03d      	beq.n	80036ac <_scanf_i+0x15c>
 8003630:	6831      	ldr	r1, [r6, #0]
 8003632:	6960      	ldr	r0, [r4, #20]
 8003634:	f891 c000 	ldrb.w	ip, [r1]
 8003638:	f810 000c 	ldrb.w	r0, [r0, ip]
 800363c:	2800      	cmp	r0, #0
 800363e:	d035      	beq.n	80036ac <_scanf_i+0x15c>
 8003640:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8003644:	d124      	bne.n	8003690 <_scanf_i+0x140>
 8003646:	0510      	lsls	r0, r2, #20
 8003648:	d522      	bpl.n	8003690 <_scanf_i+0x140>
 800364a:	f10b 0b01 	add.w	fp, fp, #1
 800364e:	f1b9 0f00 	cmp.w	r9, #0
 8003652:	d003      	beq.n	800365c <_scanf_i+0x10c>
 8003654:	3301      	adds	r3, #1
 8003656:	f109 39ff 	add.w	r9, r9, #4294967295
 800365a:	60a3      	str	r3, [r4, #8]
 800365c:	6873      	ldr	r3, [r6, #4]
 800365e:	3b01      	subs	r3, #1
 8003660:	2b00      	cmp	r3, #0
 8003662:	6073      	str	r3, [r6, #4]
 8003664:	dd1b      	ble.n	800369e <_scanf_i+0x14e>
 8003666:	6833      	ldr	r3, [r6, #0]
 8003668:	3301      	adds	r3, #1
 800366a:	6033      	str	r3, [r6, #0]
 800366c:	68a3      	ldr	r3, [r4, #8]
 800366e:	3b01      	subs	r3, #1
 8003670:	60a3      	str	r3, [r4, #8]
 8003672:	e7d9      	b.n	8003628 <_scanf_i+0xd8>
 8003674:	f1bb 0f02 	cmp.w	fp, #2
 8003678:	d1ae      	bne.n	80035d8 <_scanf_i+0x88>
 800367a:	6822      	ldr	r2, [r4, #0]
 800367c:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8003680:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8003684:	d1bf      	bne.n	8003606 <_scanf_i+0xb6>
 8003686:	2110      	movs	r1, #16
 8003688:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800368c:	6061      	str	r1, [r4, #4]
 800368e:	e7a2      	b.n	80035d6 <_scanf_i+0x86>
 8003690:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8003694:	6022      	str	r2, [r4, #0]
 8003696:	780b      	ldrb	r3, [r1, #0]
 8003698:	f805 3b01 	strb.w	r3, [r5], #1
 800369c:	e7de      	b.n	800365c <_scanf_i+0x10c>
 800369e:	4631      	mov	r1, r6
 80036a0:	4650      	mov	r0, sl
 80036a2:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80036a6:	4798      	blx	r3
 80036a8:	2800      	cmp	r0, #0
 80036aa:	d0df      	beq.n	800366c <_scanf_i+0x11c>
 80036ac:	6823      	ldr	r3, [r4, #0]
 80036ae:	05d9      	lsls	r1, r3, #23
 80036b0:	d50d      	bpl.n	80036ce <_scanf_i+0x17e>
 80036b2:	42bd      	cmp	r5, r7
 80036b4:	d909      	bls.n	80036ca <_scanf_i+0x17a>
 80036b6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80036ba:	4632      	mov	r2, r6
 80036bc:	4650      	mov	r0, sl
 80036be:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80036c2:	f105 39ff 	add.w	r9, r5, #4294967295
 80036c6:	4798      	blx	r3
 80036c8:	464d      	mov	r5, r9
 80036ca:	42bd      	cmp	r5, r7
 80036cc:	d028      	beq.n	8003720 <_scanf_i+0x1d0>
 80036ce:	6822      	ldr	r2, [r4, #0]
 80036d0:	f012 0210 	ands.w	r2, r2, #16
 80036d4:	d113      	bne.n	80036fe <_scanf_i+0x1ae>
 80036d6:	702a      	strb	r2, [r5, #0]
 80036d8:	4639      	mov	r1, r7
 80036da:	6863      	ldr	r3, [r4, #4]
 80036dc:	4650      	mov	r0, sl
 80036de:	9e01      	ldr	r6, [sp, #4]
 80036e0:	47b0      	blx	r6
 80036e2:	f8d8 3000 	ldr.w	r3, [r8]
 80036e6:	6821      	ldr	r1, [r4, #0]
 80036e8:	1d1a      	adds	r2, r3, #4
 80036ea:	f8c8 2000 	str.w	r2, [r8]
 80036ee:	f011 0f20 	tst.w	r1, #32
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	d00f      	beq.n	8003716 <_scanf_i+0x1c6>
 80036f6:	6018      	str	r0, [r3, #0]
 80036f8:	68e3      	ldr	r3, [r4, #12]
 80036fa:	3301      	adds	r3, #1
 80036fc:	60e3      	str	r3, [r4, #12]
 80036fe:	2000      	movs	r0, #0
 8003700:	6923      	ldr	r3, [r4, #16]
 8003702:	1bed      	subs	r5, r5, r7
 8003704:	445d      	add	r5, fp
 8003706:	442b      	add	r3, r5
 8003708:	6123      	str	r3, [r4, #16]
 800370a:	b007      	add	sp, #28
 800370c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003710:	f04f 0b00 	mov.w	fp, #0
 8003714:	e7ca      	b.n	80036ac <_scanf_i+0x15c>
 8003716:	07ca      	lsls	r2, r1, #31
 8003718:	bf4c      	ite	mi
 800371a:	8018      	strhmi	r0, [r3, #0]
 800371c:	6018      	strpl	r0, [r3, #0]
 800371e:	e7eb      	b.n	80036f8 <_scanf_i+0x1a8>
 8003720:	2001      	movs	r0, #1
 8003722:	e7f2      	b.n	800370a <_scanf_i+0x1ba>
 8003724:	08003cf8 	.word	0x08003cf8
 8003728:	080039f5 	.word	0x080039f5
 800372c:	08003ad5 	.word	0x08003ad5
 8003730:	08003d71 	.word	0x08003d71

08003734 <__sccl>:
 8003734:	b570      	push	{r4, r5, r6, lr}
 8003736:	780b      	ldrb	r3, [r1, #0]
 8003738:	4604      	mov	r4, r0
 800373a:	2b5e      	cmp	r3, #94	@ 0x5e
 800373c:	bf0b      	itete	eq
 800373e:	784b      	ldrbeq	r3, [r1, #1]
 8003740:	1c4a      	addne	r2, r1, #1
 8003742:	1c8a      	addeq	r2, r1, #2
 8003744:	2100      	movne	r1, #0
 8003746:	bf08      	it	eq
 8003748:	2101      	moveq	r1, #1
 800374a:	3801      	subs	r0, #1
 800374c:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8003750:	f800 1f01 	strb.w	r1, [r0, #1]!
 8003754:	42a8      	cmp	r0, r5
 8003756:	d1fb      	bne.n	8003750 <__sccl+0x1c>
 8003758:	b90b      	cbnz	r3, 800375e <__sccl+0x2a>
 800375a:	1e50      	subs	r0, r2, #1
 800375c:	bd70      	pop	{r4, r5, r6, pc}
 800375e:	f081 0101 	eor.w	r1, r1, #1
 8003762:	4610      	mov	r0, r2
 8003764:	54e1      	strb	r1, [r4, r3]
 8003766:	4602      	mov	r2, r0
 8003768:	f812 5b01 	ldrb.w	r5, [r2], #1
 800376c:	2d2d      	cmp	r5, #45	@ 0x2d
 800376e:	d005      	beq.n	800377c <__sccl+0x48>
 8003770:	2d5d      	cmp	r5, #93	@ 0x5d
 8003772:	d016      	beq.n	80037a2 <__sccl+0x6e>
 8003774:	2d00      	cmp	r5, #0
 8003776:	d0f1      	beq.n	800375c <__sccl+0x28>
 8003778:	462b      	mov	r3, r5
 800377a:	e7f2      	b.n	8003762 <__sccl+0x2e>
 800377c:	7846      	ldrb	r6, [r0, #1]
 800377e:	2e5d      	cmp	r6, #93	@ 0x5d
 8003780:	d0fa      	beq.n	8003778 <__sccl+0x44>
 8003782:	42b3      	cmp	r3, r6
 8003784:	dcf8      	bgt.n	8003778 <__sccl+0x44>
 8003786:	461a      	mov	r2, r3
 8003788:	3002      	adds	r0, #2
 800378a:	3201      	adds	r2, #1
 800378c:	4296      	cmp	r6, r2
 800378e:	54a1      	strb	r1, [r4, r2]
 8003790:	dcfb      	bgt.n	800378a <__sccl+0x56>
 8003792:	1af2      	subs	r2, r6, r3
 8003794:	3a01      	subs	r2, #1
 8003796:	42b3      	cmp	r3, r6
 8003798:	bfa8      	it	ge
 800379a:	2200      	movge	r2, #0
 800379c:	1c5d      	adds	r5, r3, #1
 800379e:	18ab      	adds	r3, r5, r2
 80037a0:	e7e1      	b.n	8003766 <__sccl+0x32>
 80037a2:	4610      	mov	r0, r2
 80037a4:	e7da      	b.n	800375c <__sccl+0x28>

080037a6 <__submore>:
 80037a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037aa:	460c      	mov	r4, r1
 80037ac:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80037ae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80037b2:	4299      	cmp	r1, r3
 80037b4:	d11b      	bne.n	80037ee <__submore+0x48>
 80037b6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80037ba:	f7ff f92f 	bl	8002a1c <_malloc_r>
 80037be:	b918      	cbnz	r0, 80037c8 <__submore+0x22>
 80037c0:	f04f 30ff 	mov.w	r0, #4294967295
 80037c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80037c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80037cc:	63a3      	str	r3, [r4, #56]	@ 0x38
 80037ce:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 80037d2:	6360      	str	r0, [r4, #52]	@ 0x34
 80037d4:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 80037d8:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80037dc:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 80037e0:	7043      	strb	r3, [r0, #1]
 80037e2:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80037e6:	7003      	strb	r3, [r0, #0]
 80037e8:	6020      	str	r0, [r4, #0]
 80037ea:	2000      	movs	r0, #0
 80037ec:	e7ea      	b.n	80037c4 <__submore+0x1e>
 80037ee:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 80037f0:	0077      	lsls	r7, r6, #1
 80037f2:	463a      	mov	r2, r7
 80037f4:	f000 f856 	bl	80038a4 <_realloc_r>
 80037f8:	4605      	mov	r5, r0
 80037fa:	2800      	cmp	r0, #0
 80037fc:	d0e0      	beq.n	80037c0 <__submore+0x1a>
 80037fe:	eb00 0806 	add.w	r8, r0, r6
 8003802:	4601      	mov	r1, r0
 8003804:	4632      	mov	r2, r6
 8003806:	4640      	mov	r0, r8
 8003808:	f000 f83e 	bl	8003888 <memcpy>
 800380c:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8003810:	f8c4 8000 	str.w	r8, [r4]
 8003814:	e7e9      	b.n	80037ea <__submore+0x44>

08003816 <memmove>:
 8003816:	4288      	cmp	r0, r1
 8003818:	b510      	push	{r4, lr}
 800381a:	eb01 0402 	add.w	r4, r1, r2
 800381e:	d902      	bls.n	8003826 <memmove+0x10>
 8003820:	4284      	cmp	r4, r0
 8003822:	4623      	mov	r3, r4
 8003824:	d807      	bhi.n	8003836 <memmove+0x20>
 8003826:	1e43      	subs	r3, r0, #1
 8003828:	42a1      	cmp	r1, r4
 800382a:	d008      	beq.n	800383e <memmove+0x28>
 800382c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003830:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003834:	e7f8      	b.n	8003828 <memmove+0x12>
 8003836:	4601      	mov	r1, r0
 8003838:	4402      	add	r2, r0
 800383a:	428a      	cmp	r2, r1
 800383c:	d100      	bne.n	8003840 <memmove+0x2a>
 800383e:	bd10      	pop	{r4, pc}
 8003840:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003844:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003848:	e7f7      	b.n	800383a <memmove+0x24>
	...

0800384c <_sbrk_r>:
 800384c:	b538      	push	{r3, r4, r5, lr}
 800384e:	2300      	movs	r3, #0
 8003850:	4d05      	ldr	r5, [pc, #20]	@ (8003868 <_sbrk_r+0x1c>)
 8003852:	4604      	mov	r4, r0
 8003854:	4608      	mov	r0, r1
 8003856:	602b      	str	r3, [r5, #0]
 8003858:	f7fd f8b6 	bl	80009c8 <_sbrk>
 800385c:	1c43      	adds	r3, r0, #1
 800385e:	d102      	bne.n	8003866 <_sbrk_r+0x1a>
 8003860:	682b      	ldr	r3, [r5, #0]
 8003862:	b103      	cbz	r3, 8003866 <_sbrk_r+0x1a>
 8003864:	6023      	str	r3, [r4, #0]
 8003866:	bd38      	pop	{r3, r4, r5, pc}
 8003868:	200003f0 	.word	0x200003f0

0800386c <memchr>:
 800386c:	4603      	mov	r3, r0
 800386e:	b510      	push	{r4, lr}
 8003870:	b2c9      	uxtb	r1, r1
 8003872:	4402      	add	r2, r0
 8003874:	4293      	cmp	r3, r2
 8003876:	4618      	mov	r0, r3
 8003878:	d101      	bne.n	800387e <memchr+0x12>
 800387a:	2000      	movs	r0, #0
 800387c:	e003      	b.n	8003886 <memchr+0x1a>
 800387e:	7804      	ldrb	r4, [r0, #0]
 8003880:	3301      	adds	r3, #1
 8003882:	428c      	cmp	r4, r1
 8003884:	d1f6      	bne.n	8003874 <memchr+0x8>
 8003886:	bd10      	pop	{r4, pc}

08003888 <memcpy>:
 8003888:	440a      	add	r2, r1
 800388a:	4291      	cmp	r1, r2
 800388c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003890:	d100      	bne.n	8003894 <memcpy+0xc>
 8003892:	4770      	bx	lr
 8003894:	b510      	push	{r4, lr}
 8003896:	f811 4b01 	ldrb.w	r4, [r1], #1
 800389a:	4291      	cmp	r1, r2
 800389c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80038a0:	d1f9      	bne.n	8003896 <memcpy+0xe>
 80038a2:	bd10      	pop	{r4, pc}

080038a4 <_realloc_r>:
 80038a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038a8:	4680      	mov	r8, r0
 80038aa:	4615      	mov	r5, r2
 80038ac:	460c      	mov	r4, r1
 80038ae:	b921      	cbnz	r1, 80038ba <_realloc_r+0x16>
 80038b0:	4611      	mov	r1, r2
 80038b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80038b6:	f7ff b8b1 	b.w	8002a1c <_malloc_r>
 80038ba:	b92a      	cbnz	r2, 80038c8 <_realloc_r+0x24>
 80038bc:	f7ff f844 	bl	8002948 <_free_r>
 80038c0:	2400      	movs	r4, #0
 80038c2:	4620      	mov	r0, r4
 80038c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80038c8:	f000 f906 	bl	8003ad8 <_malloc_usable_size_r>
 80038cc:	4285      	cmp	r5, r0
 80038ce:	4606      	mov	r6, r0
 80038d0:	d802      	bhi.n	80038d8 <_realloc_r+0x34>
 80038d2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80038d6:	d8f4      	bhi.n	80038c2 <_realloc_r+0x1e>
 80038d8:	4629      	mov	r1, r5
 80038da:	4640      	mov	r0, r8
 80038dc:	f7ff f89e 	bl	8002a1c <_malloc_r>
 80038e0:	4607      	mov	r7, r0
 80038e2:	2800      	cmp	r0, #0
 80038e4:	d0ec      	beq.n	80038c0 <_realloc_r+0x1c>
 80038e6:	42b5      	cmp	r5, r6
 80038e8:	462a      	mov	r2, r5
 80038ea:	4621      	mov	r1, r4
 80038ec:	bf28      	it	cs
 80038ee:	4632      	movcs	r2, r6
 80038f0:	f7ff ffca 	bl	8003888 <memcpy>
 80038f4:	4621      	mov	r1, r4
 80038f6:	4640      	mov	r0, r8
 80038f8:	f7ff f826 	bl	8002948 <_free_r>
 80038fc:	463c      	mov	r4, r7
 80038fe:	e7e0      	b.n	80038c2 <_realloc_r+0x1e>

08003900 <_strtol_l.constprop.0>:
 8003900:	2b24      	cmp	r3, #36	@ 0x24
 8003902:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003906:	4686      	mov	lr, r0
 8003908:	4690      	mov	r8, r2
 800390a:	d801      	bhi.n	8003910 <_strtol_l.constprop.0+0x10>
 800390c:	2b01      	cmp	r3, #1
 800390e:	d106      	bne.n	800391e <_strtol_l.constprop.0+0x1e>
 8003910:	f7fe ffee 	bl	80028f0 <__errno>
 8003914:	2316      	movs	r3, #22
 8003916:	6003      	str	r3, [r0, #0]
 8003918:	2000      	movs	r0, #0
 800391a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800391e:	460d      	mov	r5, r1
 8003920:	4833      	ldr	r0, [pc, #204]	@ (80039f0 <_strtol_l.constprop.0+0xf0>)
 8003922:	462a      	mov	r2, r5
 8003924:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003928:	5d06      	ldrb	r6, [r0, r4]
 800392a:	f016 0608 	ands.w	r6, r6, #8
 800392e:	d1f8      	bne.n	8003922 <_strtol_l.constprop.0+0x22>
 8003930:	2c2d      	cmp	r4, #45	@ 0x2d
 8003932:	d12d      	bne.n	8003990 <_strtol_l.constprop.0+0x90>
 8003934:	2601      	movs	r6, #1
 8003936:	782c      	ldrb	r4, [r5, #0]
 8003938:	1c95      	adds	r5, r2, #2
 800393a:	f033 0210 	bics.w	r2, r3, #16
 800393e:	d109      	bne.n	8003954 <_strtol_l.constprop.0+0x54>
 8003940:	2c30      	cmp	r4, #48	@ 0x30
 8003942:	d12a      	bne.n	800399a <_strtol_l.constprop.0+0x9a>
 8003944:	782a      	ldrb	r2, [r5, #0]
 8003946:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800394a:	2a58      	cmp	r2, #88	@ 0x58
 800394c:	d125      	bne.n	800399a <_strtol_l.constprop.0+0x9a>
 800394e:	2310      	movs	r3, #16
 8003950:	786c      	ldrb	r4, [r5, #1]
 8003952:	3502      	adds	r5, #2
 8003954:	2200      	movs	r2, #0
 8003956:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800395a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800395e:	fbbc f9f3 	udiv	r9, ip, r3
 8003962:	4610      	mov	r0, r2
 8003964:	fb03 ca19 	mls	sl, r3, r9, ip
 8003968:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800396c:	2f09      	cmp	r7, #9
 800396e:	d81b      	bhi.n	80039a8 <_strtol_l.constprop.0+0xa8>
 8003970:	463c      	mov	r4, r7
 8003972:	42a3      	cmp	r3, r4
 8003974:	dd27      	ble.n	80039c6 <_strtol_l.constprop.0+0xc6>
 8003976:	1c57      	adds	r7, r2, #1
 8003978:	d007      	beq.n	800398a <_strtol_l.constprop.0+0x8a>
 800397a:	4581      	cmp	r9, r0
 800397c:	d320      	bcc.n	80039c0 <_strtol_l.constprop.0+0xc0>
 800397e:	d101      	bne.n	8003984 <_strtol_l.constprop.0+0x84>
 8003980:	45a2      	cmp	sl, r4
 8003982:	db1d      	blt.n	80039c0 <_strtol_l.constprop.0+0xc0>
 8003984:	2201      	movs	r2, #1
 8003986:	fb00 4003 	mla	r0, r0, r3, r4
 800398a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800398e:	e7eb      	b.n	8003968 <_strtol_l.constprop.0+0x68>
 8003990:	2c2b      	cmp	r4, #43	@ 0x2b
 8003992:	bf04      	itt	eq
 8003994:	782c      	ldrbeq	r4, [r5, #0]
 8003996:	1c95      	addeq	r5, r2, #2
 8003998:	e7cf      	b.n	800393a <_strtol_l.constprop.0+0x3a>
 800399a:	2b00      	cmp	r3, #0
 800399c:	d1da      	bne.n	8003954 <_strtol_l.constprop.0+0x54>
 800399e:	2c30      	cmp	r4, #48	@ 0x30
 80039a0:	bf0c      	ite	eq
 80039a2:	2308      	moveq	r3, #8
 80039a4:	230a      	movne	r3, #10
 80039a6:	e7d5      	b.n	8003954 <_strtol_l.constprop.0+0x54>
 80039a8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80039ac:	2f19      	cmp	r7, #25
 80039ae:	d801      	bhi.n	80039b4 <_strtol_l.constprop.0+0xb4>
 80039b0:	3c37      	subs	r4, #55	@ 0x37
 80039b2:	e7de      	b.n	8003972 <_strtol_l.constprop.0+0x72>
 80039b4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80039b8:	2f19      	cmp	r7, #25
 80039ba:	d804      	bhi.n	80039c6 <_strtol_l.constprop.0+0xc6>
 80039bc:	3c57      	subs	r4, #87	@ 0x57
 80039be:	e7d8      	b.n	8003972 <_strtol_l.constprop.0+0x72>
 80039c0:	f04f 32ff 	mov.w	r2, #4294967295
 80039c4:	e7e1      	b.n	800398a <_strtol_l.constprop.0+0x8a>
 80039c6:	1c53      	adds	r3, r2, #1
 80039c8:	d108      	bne.n	80039dc <_strtol_l.constprop.0+0xdc>
 80039ca:	2322      	movs	r3, #34	@ 0x22
 80039cc:	4660      	mov	r0, ip
 80039ce:	f8ce 3000 	str.w	r3, [lr]
 80039d2:	f1b8 0f00 	cmp.w	r8, #0
 80039d6:	d0a0      	beq.n	800391a <_strtol_l.constprop.0+0x1a>
 80039d8:	1e69      	subs	r1, r5, #1
 80039da:	e006      	b.n	80039ea <_strtol_l.constprop.0+0xea>
 80039dc:	b106      	cbz	r6, 80039e0 <_strtol_l.constprop.0+0xe0>
 80039de:	4240      	negs	r0, r0
 80039e0:	f1b8 0f00 	cmp.w	r8, #0
 80039e4:	d099      	beq.n	800391a <_strtol_l.constprop.0+0x1a>
 80039e6:	2a00      	cmp	r2, #0
 80039e8:	d1f6      	bne.n	80039d8 <_strtol_l.constprop.0+0xd8>
 80039ea:	f8c8 1000 	str.w	r1, [r8]
 80039ee:	e794      	b.n	800391a <_strtol_l.constprop.0+0x1a>
 80039f0:	08003d7d 	.word	0x08003d7d

080039f4 <_strtol_r>:
 80039f4:	f7ff bf84 	b.w	8003900 <_strtol_l.constprop.0>

080039f8 <_strtoul_l.constprop.0>:
 80039f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80039fc:	4686      	mov	lr, r0
 80039fe:	460d      	mov	r5, r1
 8003a00:	4e33      	ldr	r6, [pc, #204]	@ (8003ad0 <_strtoul_l.constprop.0+0xd8>)
 8003a02:	4628      	mov	r0, r5
 8003a04:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003a08:	5d37      	ldrb	r7, [r6, r4]
 8003a0a:	f017 0708 	ands.w	r7, r7, #8
 8003a0e:	d1f8      	bne.n	8003a02 <_strtoul_l.constprop.0+0xa>
 8003a10:	2c2d      	cmp	r4, #45	@ 0x2d
 8003a12:	d12f      	bne.n	8003a74 <_strtoul_l.constprop.0+0x7c>
 8003a14:	2701      	movs	r7, #1
 8003a16:	782c      	ldrb	r4, [r5, #0]
 8003a18:	1c85      	adds	r5, r0, #2
 8003a1a:	f033 0010 	bics.w	r0, r3, #16
 8003a1e:	d109      	bne.n	8003a34 <_strtoul_l.constprop.0+0x3c>
 8003a20:	2c30      	cmp	r4, #48	@ 0x30
 8003a22:	d12c      	bne.n	8003a7e <_strtoul_l.constprop.0+0x86>
 8003a24:	7828      	ldrb	r0, [r5, #0]
 8003a26:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8003a2a:	2858      	cmp	r0, #88	@ 0x58
 8003a2c:	d127      	bne.n	8003a7e <_strtoul_l.constprop.0+0x86>
 8003a2e:	2310      	movs	r3, #16
 8003a30:	786c      	ldrb	r4, [r5, #1]
 8003a32:	3502      	adds	r5, #2
 8003a34:	f04f 38ff 	mov.w	r8, #4294967295
 8003a38:	fbb8 f8f3 	udiv	r8, r8, r3
 8003a3c:	2600      	movs	r6, #0
 8003a3e:	fb03 f908 	mul.w	r9, r3, r8
 8003a42:	4630      	mov	r0, r6
 8003a44:	ea6f 0909 	mvn.w	r9, r9
 8003a48:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8003a4c:	f1bc 0f09 	cmp.w	ip, #9
 8003a50:	d81c      	bhi.n	8003a8c <_strtoul_l.constprop.0+0x94>
 8003a52:	4664      	mov	r4, ip
 8003a54:	42a3      	cmp	r3, r4
 8003a56:	dd2a      	ble.n	8003aae <_strtoul_l.constprop.0+0xb6>
 8003a58:	f1b6 3fff 	cmp.w	r6, #4294967295
 8003a5c:	d007      	beq.n	8003a6e <_strtoul_l.constprop.0+0x76>
 8003a5e:	4580      	cmp	r8, r0
 8003a60:	d322      	bcc.n	8003aa8 <_strtoul_l.constprop.0+0xb0>
 8003a62:	d101      	bne.n	8003a68 <_strtoul_l.constprop.0+0x70>
 8003a64:	45a1      	cmp	r9, r4
 8003a66:	db1f      	blt.n	8003aa8 <_strtoul_l.constprop.0+0xb0>
 8003a68:	2601      	movs	r6, #1
 8003a6a:	fb00 4003 	mla	r0, r0, r3, r4
 8003a6e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003a72:	e7e9      	b.n	8003a48 <_strtoul_l.constprop.0+0x50>
 8003a74:	2c2b      	cmp	r4, #43	@ 0x2b
 8003a76:	bf04      	itt	eq
 8003a78:	782c      	ldrbeq	r4, [r5, #0]
 8003a7a:	1c85      	addeq	r5, r0, #2
 8003a7c:	e7cd      	b.n	8003a1a <_strtoul_l.constprop.0+0x22>
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d1d8      	bne.n	8003a34 <_strtoul_l.constprop.0+0x3c>
 8003a82:	2c30      	cmp	r4, #48	@ 0x30
 8003a84:	bf0c      	ite	eq
 8003a86:	2308      	moveq	r3, #8
 8003a88:	230a      	movne	r3, #10
 8003a8a:	e7d3      	b.n	8003a34 <_strtoul_l.constprop.0+0x3c>
 8003a8c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8003a90:	f1bc 0f19 	cmp.w	ip, #25
 8003a94:	d801      	bhi.n	8003a9a <_strtoul_l.constprop.0+0xa2>
 8003a96:	3c37      	subs	r4, #55	@ 0x37
 8003a98:	e7dc      	b.n	8003a54 <_strtoul_l.constprop.0+0x5c>
 8003a9a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8003a9e:	f1bc 0f19 	cmp.w	ip, #25
 8003aa2:	d804      	bhi.n	8003aae <_strtoul_l.constprop.0+0xb6>
 8003aa4:	3c57      	subs	r4, #87	@ 0x57
 8003aa6:	e7d5      	b.n	8003a54 <_strtoul_l.constprop.0+0x5c>
 8003aa8:	f04f 36ff 	mov.w	r6, #4294967295
 8003aac:	e7df      	b.n	8003a6e <_strtoul_l.constprop.0+0x76>
 8003aae:	1c73      	adds	r3, r6, #1
 8003ab0:	d106      	bne.n	8003ac0 <_strtoul_l.constprop.0+0xc8>
 8003ab2:	2322      	movs	r3, #34	@ 0x22
 8003ab4:	4630      	mov	r0, r6
 8003ab6:	f8ce 3000 	str.w	r3, [lr]
 8003aba:	b932      	cbnz	r2, 8003aca <_strtoul_l.constprop.0+0xd2>
 8003abc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003ac0:	b107      	cbz	r7, 8003ac4 <_strtoul_l.constprop.0+0xcc>
 8003ac2:	4240      	negs	r0, r0
 8003ac4:	2a00      	cmp	r2, #0
 8003ac6:	d0f9      	beq.n	8003abc <_strtoul_l.constprop.0+0xc4>
 8003ac8:	b106      	cbz	r6, 8003acc <_strtoul_l.constprop.0+0xd4>
 8003aca:	1e69      	subs	r1, r5, #1
 8003acc:	6011      	str	r1, [r2, #0]
 8003ace:	e7f5      	b.n	8003abc <_strtoul_l.constprop.0+0xc4>
 8003ad0:	08003d7d 	.word	0x08003d7d

08003ad4 <_strtoul_r>:
 8003ad4:	f7ff bf90 	b.w	80039f8 <_strtoul_l.constprop.0>

08003ad8 <_malloc_usable_size_r>:
 8003ad8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003adc:	1f18      	subs	r0, r3, #4
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	bfbc      	itt	lt
 8003ae2:	580b      	ldrlt	r3, [r1, r0]
 8003ae4:	18c0      	addlt	r0, r0, r3
 8003ae6:	4770      	bx	lr

08003ae8 <_init>:
 8003ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aea:	bf00      	nop
 8003aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003aee:	bc08      	pop	{r3}
 8003af0:	469e      	mov	lr, r3
 8003af2:	4770      	bx	lr

08003af4 <_fini>:
 8003af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003af6:	bf00      	nop
 8003af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003afa:	bc08      	pop	{r3}
 8003afc:	469e      	mov	lr, r3
 8003afe:	4770      	bx	lr
